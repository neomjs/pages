import t from"../../../src/core/Base.mjs";import{HtmlTemplate as e}from"./html.mjs";import*as n from"../../../dist/parse5.mjs";const s=/\s+([a-zA-Z][^=]*)\s*=\s*"?$/,o=/^__DYNAMIC_VALUE_(\d+)__$/,a=/__DYNAMIC_VALUE_(\d+)__/g,r=/(__DYNAMIC_VALUE_|neotag)(\d+)/g,l=/<([\w\.]+)/,c=/<((?:[A-Z][\w\.]*)|(?:neotag\d+))([^>]*?)\/>/g;export default Neo.setupClass(class extends t{static config={className:"Neo.functional.util.HtmlTemplateProcessor",singleton:!0};convertNodeToVdom(t,e,n,s){if("#text"===t.nodeName){const n=t.value.trim();if(!n)return null;return{vtype:"text",text:n.replace(a,(t,n)=>{const s=e[parseInt(n,10)];return Neo.isObject(s)?JSON.stringify(s):s})}}if(t.nodeName&&t.sourceCodeLocation?.startTag){const r={},c=t.tagName;if(c.startsWith("neotag")){const t=parseInt(c.replace("neotag",""),10);r.module=e[t]}else{const{startTag:e}=t.sourceCodeLocation,s=n.substring(e.startOffset,e.endOffset).match(l)[1];if(s[0]===s[0].toUpperCase()){const t=Neo.ns(s,!1);if(!t)throw new Error(`Could not resolve component tag <${s}> from global namespace.`);r.module=t}else r.tag=s}return t.attrs?.forEach(t=>{const n=t.value.match(o);if(n){const o=parseInt(n[1],10),a=s[o]||t.name;r[a]=e[o]}else r[t.name]=t.value.replace(a,(t,n)=>e[parseInt(n,10)])}),t.childNodes?.length>0&&(r.cn=t.childNodes.map(t=>this.convertNodeToVdom(t,e,n,s)).filter(Boolean),1===r.cn.length&&"text"===r.cn[0].vtype&&(r.text=r.cn[0].text,delete r.cn)),r}return null}convertAstToVdom(t,e,n,s){if(!t.childNodes||t.childNodes.length<1)return{};const o=t.childNodes.map(t=>this.convertNodeToVdom(t,e,n,s)).filter(Boolean);return 1===o.length?o[0]:{cn:o}}flattenTemplate(t){let n="";const o=[],a={};for(let l=0;l<t.strings.length;l++){let c=t.strings[l];if(n+=c,l<t.values.length){const i=t.values[l],m=c.match(s);if(i instanceof e){const t=this.flattenTemplate(i);n+=t.flatString.replace(r,(e,n,s)=>{const r=parseInt(s,10),l=r+o.length;return t.attributeNameMap[r]&&(a[l]=t.attributeNameMap[r]),`${n}${l}`}),o.push(...t.flatValues)}else!1!==i&&null!=i&&(t.strings[l].trim().endsWith("<")||t.strings[l].trim().endsWith("</")?n+=`neotag${o.length}`:n+=`__DYNAMIC_VALUE_${o.length}__`,o.push(i),m&&(a[o.length-1]=m[1]))}}return{flatString:n,flatValues:o,attributeNameMap:a}}process(t,e){const{flatString:s,flatValues:o,attributeNameMap:a}=this.flattenTemplate(t),r=s.replace(c,"<$1$2></$1>"),l=n.parseFragment(r,{sourceCodeLocationInfo:!0}),i=this.convertAstToVdom(l,o,r,a);e.continueUpdateWithVdom(i)}});