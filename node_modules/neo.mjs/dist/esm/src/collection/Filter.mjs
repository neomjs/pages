import e from"../core/Base.mjs";import t from"../core/Observable.mjs";class r extends e{static observable=!0;static operators=["==","===","!=","!==","<","<=",">",">=","endsWith","excluded","included","isDefined","isUndefined","like","startsWith"];static config={className:"Neo.collection.Filter",ntype:"filter",disabled_:!1,filterBy_:null,includeEmptyValues:!0,isUpdating_:!1,listenerApplied:!1,operator_:"===",property_:"id",scope:null,value_:null};afterSetDisabled(...e){this.fireChangeEvent(...e)}afterSetFilterBy(e,t){}afterSetIsUpdating(e,t){!1===e&&this.fireChangeEvent(e,t)}afterSetOperator(...e){this.fireChangeEvent(...e)}afterSetProperty(...e){this.fireChangeEvent(...e)}afterSetValue(...e){this.fireChangeEvent(...e)}beforeSetFilterBy(e,t){return e&&"function"!=typeof e?(Neo.logError("filterBy has to be a function",this),t):e}beforeSetOperator(e,t){return this.beforeSetEnumValue(e,t,"operator")}export(){let{operator:e,property:t,value:r}=this;return this.filterBy?null:{operator:e,property:t,value:r}}fireChangeEvent(e,t){let r=this;if(void 0!==t&&!0!==r.isUpdating){let{operator:e,property:t,value:i}=r;r.fire("change",{operator:e,property:t,value:i})}}isFiltered(e,t,i){let a,s,n=this;return!n._disabled&&(n._filterBy?n.filterBy.call(n.scope||n,{allItems:i,filteredItems:t,item:e,value:n._value}):(!n.includeEmptyValues||null!==n._value&&!Neo.isEmpty(n._value))&&(a=n._value,s=e[n._property],a instanceof Date&&s instanceof Date&&(a=a.valueOf(),s=s.valueOf()),!r[n._operator](s,a)))}static"=="(e,t){return e==t}static"==="(e,t){return e===t}static"!="(e,t){return e!=t}static"!=="(e,t){return e!==t}static"<"(e,t){return e<t}static"<="(e,t){return e<=t}static">"(e,t){return e>t}static">="(e,t){return e>=t}static endsWith(e,t){return Neo.isString(e)||(e=String(e)),Neo.isString(t)||(t=String(t)),e?.toLowerCase().endsWith(t?.toLowerCase())||!1}static excluded(e,t){return t.indexOf(e)<0}static included(e,t){return t.indexOf(e)>-1}static isDefined(e,t){return void 0!==e}static isUndefined(e,t){return void 0===e}static like(e,t){return Neo.isString(e)||(e=String(e)),Neo.isString(t)||(t=String(t)),e?.toLowerCase().includes(t?.toLowerCase())||!1}static startsWith(e,t){return Neo.isString(e)||(e=String(e)),Neo.isString(t)||(t=String(t)),e?.toLowerCase().startsWith(t?.toLowerCase())||!1}}export default Neo.setupClass(r);