import e from"../Base.mjs";import s from"../../util/Array.mjs";export default Neo.setupClass(class extends e{static config={className:"Neo.manager.rpc.Message",singleton:!0,sorters:[{direction:"ASC",property:"id"}]};endPointTimeouts=[];messageId=1;requestBuffer=20;socketConnections={};transactionId=1;onMessage(e){let s=Neo.manager.rpc.Api.get(`${e.service}.${e.method}`);return this[`onMessage${Neo.capitalize(s.type)}`](e,s)}onMessageAjax(e,s){return new Promise(((t,r)=>{let o=this,{url:i}=s;o.register({id:o.messageId,method:e.method,params:e.params,reject:r,resolve:t,service:e.service,transactionId:0,url:i}),o.messageId++,o.endPointTimeouts.includes(i)||(o.endPointTimeouts.push(i),o.timeout(o.requestBuffer).then((()=>{o.resolveBufferTimeout(i)})))}))}async onMessageWebsocket(e,s){let t=this,{url:r}=s,o=t.socketConnections[r];if(!o){let e=await import("../../data/connection/WebSocket.mjs");t.socketConnections[r]=o=Neo.create(e.default,{serverAddress:r})}return await o.promiseMessage(e)}async resolveBufferTimeout(e){let t,r=this,o=[],i=r.find({transactionId:0,url:e}),a=[],{transactionId:n}=r;i.forEach((e=>{e.transactionId=n,o.push(e.id),a.push({id:e.id,method:e.method,params:e.params,service:e.service})})),s.remove(r.endPointTimeouts,e),r.transactionId++,t=await Neo.Fetch.request(e,{},"post",JSON.stringify({tid:n,requests:a})),i.forEach((e=>{e.resolve()})),r.remove(o)}});