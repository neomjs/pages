import e from"../core/Base.mjs";import o from"../main/DomAccess.mjs";import r from"../main/DomEvents.mjs";import s from"./Message.mjs";import t from"../core/Observable.mjs";import a from"./mixin/RemoteMethodAccess.mjs";const n=Neo.config,i="development"===n.environment||"dist/esm"===n.environment;navigator.serviceWorker?.addEventListener("controllerchange",function(){window.location.reload()},{once:!0});class d extends e{static config={className:"Neo.worker.Manager",activeWorkers:0,appNames:[],constructedThreads:0,mixins:[t,a],remote:{app:["setNeoConfig"],canvas:["setNeoConfig"],data:["setNeoConfig"],task:["setNeoConfig"],vdom:["setNeoConfig"]},sharedWorkersEnabled:!1,singleton:!0,stopCommunication:!1,webWorkersEnabled:!1,windowId:(new Date).getTime(),workers:{app:{fileName:i?"App.mjs":"appworker.js"},canvas:{fileName:i?"Canvas.mjs":"canvasworker.js"},data:{fileName:i?"Data.mjs":"dataworker.js"},task:{fileName:i?"Task.mjs":"taskworker.js"},vdom:{fileName:i?"VDom.mjs":"vdomworker.js"}}};serviceWorker=null;construct(e){super.construct(e);let s=this;s.detectFeatures(),!Neo.insideWorker&&s.createWorkers(),Neo.setGlobalConfig=s.setGlobalConfig.bind(s),Neo.workerId="main",s.promises={},s.on({"message:addDomListener":{fn:r.addDomListener,scope:r},"message:getOffscreenCanvas":{fn:o.onGetOffscreenCanvas,scope:o},"message:readDom":{fn:o.onReadDom,scope:o},"message:registerRemote":{fn:s.onRegisterRemote,scope:s},"message:workerConstructed":{fn:s.onWorkerConstructed,scope:s}})}broadcast(e,o){let r=this;Object.keys(r.workers).forEach(s=>{s!==o&&r.getWorker(s)&&r.sendMessage(s,e)})}createWorker(e){let o=this,{fileName:r}=e,s=(e.basePath||Neo.config.workerBasePath)+r,t=`neomjs-${r.substring(0,r.indexOf(".")).toLowerCase()}-worker`,a=o.sharedWorkersEnabled&&n.useSharedWorkers,d=a?SharedWorker:Worker,m=new d(s,i?{name:t,type:"module"}:{name:t});return(a?m.port:m).onmessage=o.onWorkerMessage.bind(o),(a?m.port:m).onerror=o.onWorkerError.bind(o),o.activeWorkers++,m}createWorkers(){let e,o,s=this,t=Neo.clone(n,!0),{hash:a,href:i,search:d}=location,{windowId:m}=s;for([e,o]of(delete t.cesiumJsToken,a&&(t.hash={hash:r.parseHash(a.substring(1)),hashString:a.substring(1),windowId:m}),t.url={href:i,search:d},Object.entries(s.workers)))if(!("canvas"===e&&!t.useCanvasWorker||"task"===e&&!t.useTaskWorker||"vdom"===e&&!t.useVdomWorker)){try{o.worker=s.createWorker(o)}catch(e){document.body.innerHTML=e,s.stopCommunication=!0;break}s.sendMessage(e,{action:"registerNeoConfig",data:{...t,windowId:m}})}}detectFeatures(){let e=this;if(n.hasMouseEvents=matchMedia("(pointer:fine)").matches,n.hasTouchEvents="ontouchstart"in window||navigator.maxTouchPoints>0,document.body.classList.add(n.hasMouseEvents?"neo-mouse":"neo-no-mouse"),!window.Worker)throw new Error("Your browser does not support Web Workers");e.webWorkersEnabled=!0,window.SharedWorker&&(e.sharedWorkersEnabled=!0)}getWorker(e){return"service"===e?navigator.serviceWorker?.controller||this.serviceWorker:e instanceof Worker?e:this.workers[e].worker}loadApplication(e){this.sendMessage("app",{action:"loadApplication",path:e,resourcesPath:n.resourcesPath})}onWorkerConstructed(e){let o=this;o.constructedThreads++,o.constructedThreads===o.activeWorkers&&n.appPath&&o.timeout(n.loadApplicationDelay).then(()=>{o.loadApplication(n.appPath)})}onWorkerError(e){!i&&console.log("Worker Error:",e)}onWorkerMessage(e){let o,r=this,{data:s}=e,t=null;const{action:a,destination:n,replyId:i}=s;if(r.fire("message:"+a,s),"reply"===a&&(o=r.promises[i],o?("main"===n&&(s=s.data),s&&(o[s.reject?"reject":"resolve"](s),delete r.promises[i])):s.data&&(s.data.autoMount&&r.fire("automount",s),s.data.updateVdom&&r.fire("updateVdom",s),r.promiseForwardMessage(s).then(e=>{r.sendMessage(e.destination,e)}))),"main"!==n&&"reply"!==a)s.transfer&&(t=[s.transfer]),r.promiseMessage(n,s,t).then(e=>{r.sendMessage(e.destination,e)}).catch(e=>{r.sendMessage(s.origin,{action:"reply",reject:!0,replyId:s.id,error:e.message})});else if("main"===n&&"registerAppName"===a){let{appName:e}=s;r.appNames.push(e),r.broadcast({action:"registerApp",appName:e})}else"main"===n&&"remoteMethod"===a&&r.onRemoteMethod(s)}promiseForwardMessage(e){return new Promise((o,r)=>{this.promises[e.replyId]={data:e,reject:r,resolve:o}})}promiseMessage(e,o,r){let s=this;return new Promise((t,a)=>{let n,i=s.sendMessage(e,o,r);i?(n=i.id,s.promises[n]={reject:a,resolve:t}):a(new Error(s.stopCommunication?"Communication is stopped.":`Target worker '${e}' does not exist.`))})}resolveDomOperationPromise(e){if(e){let{promises:o}=this,r=o[e];r&&(r.resolve(r.data),delete o[e])}}sendMessage(e,o,r){let t,a,n=this;return!n.stopCommunication&&(o.channelPort?(a=o.channelPort,delete o.channelPort):a=n.getWorker(e),a)?(o.destination=e,t=new s(o),(a.port?a.port:a).postMessage(t,r),t):null}setGlobalConfig(e){Neo.worker.App.setGlobalConfig(e)}setNeoConfig({broadcast:e,config:o,excludeOrigin:r}){Neo.merge(Neo.config,o),this.fire("neoConfigChange",o),e&&this.broadcast({action:"setNeoConfig",config:o},r)}}export default Neo.setupClass(d);