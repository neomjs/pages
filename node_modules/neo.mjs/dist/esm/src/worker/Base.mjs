import e from"../core/Base.mjs";import*as o from"../core/_export.mjs";import r from"../core/Observable.mjs";import t from"../manager/ClassHierarchy.mjs";import n from"./Message.mjs";import s from"./mixin/RemoteMethodAccess.mjs";export default Neo.setupClass(class extends e{static config={className:"Neo.worker.Base",mixins:[r,s]};channelPorts=null;isConnected=!1;isSharedWorker=!1;ports=null;workerId=null;construct(e){super.construct(e);let o=this,r=globalThis;Object.assign(o,{channelPorts:{},isSharedWorker:"[object SharedWorkerGlobalScope]"===r.toString(),ports:[],promises:{}}),o.isSharedWorker?r.onconnect=o.onConnected.bind(o):r.onmessage=o.onMessage.bind(o),Neo.currentWorker=o,Neo.setGlobalConfig=o.setGlobalConfig.bind(o),Neo.workerId=o.workerId}afterConnect(){}getPort(e){let o,r=null;return this.ports.forEach(t=>{o=!0,Object.entries(e).forEach(([e,r])=>{r!==t[e]&&(o=!1)}),o&&(r=t)}),r}async onConnect(e){await this.timeout(10);let{appName:o,windowId:r}=e;this.fire("connect",{appName:o,windowId:r})}onConnected(e){let o=this,r=Neo.getId("port");o.isConnected=!0,o.ports.push({appName:null,id:r,port:e.ports[0],windowId:null}),o.ports[o.ports.length-1].port.onmessage=o.onMessage.bind(o),o.fire("connected"),o.sendMessage("main",{action:"workerConstructed",port:r}),o.afterConnect()}onConstructed(){super.onConstructed();let e=this;e.isSharedWorker||(e.sendMessage("main",{action:"workerConstructed"}),e.afterConnect())}onDisconnect(e){let{appName:o,windowId:r}=e;this.fire("disconnect",{appName:o,windowId:r})}onMessage(e){let o,r=this,{data:t}=e,{action:n,replyId:s}=t;if(!n)throw new Error("Message action is missing: "+t.id);"reply"!==n?r["on"+Neo.capitalize(n)](t):(o="reply"===n&&r.promises[s])&&(t.reject?o.reject(t.data):o.resolve(t.data),delete r.promises[s])}onPing(e){this.resolve(e,{originMsg:e})}onRegisterApp(e){let o,r=this,{appName:t}=e;for(o of r.ports)if(!o.appName){o.appName=t,r.onConnect({appName:t,windowId:o.windowId});break}}onRegisterNeoConfig(e){Neo.ns("Neo.config",!0);let o,r=this,{windowId:t}=e.data;for(o of r.ports)if(!o.windowId){o.windowId=t;break}Neo.merge(Neo.config,e.data)}onSetNeoConfig({config:e}){Neo.merge(Neo.config,e),this.fire("neoConfigChange",e)}promiseMessage(e,o,r){let t=this;return new Promise(function(n,s){let i=t.sendMessage(e,o,r),a=i?.id;a?t.promises[a]={reject:s,resolve:n}:s()})}sendMessage(e,o,r){o.destination=e;let t,s,i,a=this;return a.channelPorts[e]?s=a.channelPorts[e]:a.isSharedWorker?o.port?s=a.getPort({id:o.port}).port:o.windowId?(i=a.getPort({windowId:o.windowId}),s=i?.port,o.port=i?.id):o.appName?(i=a.getPort({appName:o.appName}),s=i?.port,o.port=i?.id):s=a.ports[0].port:s=globalThis,s&&(t=new n(o),s.postMessage(t,r)),t}setGlobalConfig(e){const o=this,{Manager:r}=Neo.worker;o.onSetNeoConfig({config:e}),o.isSharedWorker?o.ports.forEach((t,n)=>{r.setNeoConfig({broadcast:n<1,config:e,excludeOrigin:o.workerId,windowId:t.windowId})}):r.setNeoConfig({broadcast:!0,config:e,excludeOrigin:o.workerId})}});