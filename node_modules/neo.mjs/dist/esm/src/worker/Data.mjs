import e from"../Neo.mjs";import a from"./Base.mjs";import o from"../core/Compare.mjs";import r from"../Fetch.mjs";import s from"../core/Util.mjs";import t from"../Xhr.mjs";export default e.setupClass(class extends a{static config={className:"Neo.worker.Data",singleton:!0};rpcApiManagerLoaded=!1;rpcMessageManagerLoaded=!1;workerId="data";afterConnect(){let e=this,a=new MessageChannel,{port1:o,port2:r}=a;o.onmessage=e.onMessage.bind(e),e.sendMessage("app",{action:"registerPort",transfer:r},[r]),e.channelPorts.app=o}onLoad(){console.log("worker.Data onLoad")}onRegisterApi(e){import("../manager/rpc/Api.mjs").then((a=>{a.default.registerApi(e.data),this.rpcApiManagerLoaded=!0}))}onRegisterNeoConfig(a){super.onRegisterNeoConfig(a),e.config.remotesApiUrl&&import("../manager/rpc/Message.mjs").then((e=>{this.rpcMessageManagerLoaded=!0}))}async onRpc(a){let o,r=this;r.rpcMessageManagerLoaded?(o=await e.manager.rpc.Message.onMessage(a),r.resolve(a,o)):(console.warn("manager.RemotesApi not loaded yet",a),r.reject(a))}});