class e{static map={Array:"compareArrays",Date:"compareDates",Function:"compareFunctions",Map:"compareMaps",NeoInstance:"compareNeoInstances",Object:"compareObjects",RegExp:"compareRegExps",Set:"compareSets"};static compareArrays(t,r){if(t.length!==r.length)return!1;for(const[a,s]of t.entries())if(!e.isEqual(s,r[a]))return!1;return!0}static compareDates(e,t){return e.valueOf()===t.valueOf()}static compareFunctions(e,t){return e.name===t.name&&e.toString()===t.toString()}static compareMaps(e,t){if(e.size!==t.size)return!1;let r;for(const[a,s]of e)if(r=t.get(a),r!==s||void 0===r&&!t.has(a))return!1;return!0}static compareNeoInstances(e,t){return e.id===t.id}static compareObjects(t,r){if(Object.keys(t).length!==Object.keys(r).length)return!1;for(let a in t)if(!e.isEqual(t[a],r[a]))return!1;return!0}static compareRegExps(e,t){return e.toString()===t.toString()}static compareSets(e,t){if(e.size!==t.size)return!1;for(let r of e)if(!t.has(r))return!1;return!0}static isEqual(t,r){if(t===r)return!0;let a=Neo.typeOf(t);return a===Neo.typeOf(r)&&(e.map[a]?e[e.map[a]](t,r):t===r)}}export default Neo.gatekeep(e,"Neo.core.Compare",()=>{Neo.isEqual=e.isEqual});