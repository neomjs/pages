import e from"../core/Base.mjs";class t extends e{static config={className:"Neo.core.Compare"};static map={Array:"compareArrays",Date:"compareDates",Function:"compareFunctions",Map:"compareMaps",NeoInstance:"compareNeoInstances",Object:"compareObjects",RegExp:"compareRegExps",Set:"compareSets"};static compareArrays(e,r){if(e.length!==r.length)return!1;for(const[a,s]of e.entries())if(!t.isEqual(s,r[a]))return!1;return!0}static compareDates(e,t){return e.valueOf()===t.valueOf()}static compareFunctions(e,t){return e.name===t.name&&e.toString()===t.toString()}static compareMaps(e,t){if(e.size!==t.size)return!1;let r;for(const[a,s]of e)if(r=t.get(a),r!==s||void 0===r&&!t.has(a))return!1;return!0}static compareNeoInstances(e,t){return e.id===t.id}static compareObjects(e,r){if(Object.keys(e).length!==Object.keys(r).length)return!1;for(let a in e)if(!t.isEqual(e[a],r[a]))return!1;return!0}static compareRegExps(e,t){return e.toString()===t.toString()}static compareSets(e,t){if(e.size!==t.size)return!1;for(let r of e)if(!t.has(r))return!1;return!0}static isEqual(e,r){if(e===r)return!0;let a=Neo.typeOf(e);return a===Neo.typeOf(r)&&(t.map[a]?t[t.map[a]](e,r):e===r)}}t=Neo.setupClass(t),Neo.isEqual=t.isEqual;export default t;