import{buffer as e,debounce as t,intercept as s,resolveCallback as r,throttle as i}from"../util/Function.mjs";import o from"./IdGenerator.mjs";const n=Symbol.for("configSymbol"),a=Symbol("forceAssignConfigs"),c=Symbol("isInstance");class l{static delayable={};static instanceManagerAvailable=!1;static methodNameRegex=/\n.*\n\s+at\s+.*\.(\w+)\s+.*/;static observable=!1;static overwrittenMethods={};static config={className:"Neo.core.Base",ntype:"base",delayable:null,id_:null,isConstructed:!1,isReady_:!1,mixins:null,module:null,remote_:null};#e=[];construct(e={}){let t=this;Object.defineProperties(t,{[n]:{configurable:!0,enumerable:!1,value:{},writable:!0},[c]:{enumerable:!1,value:!0}}),t.createId(e.id||t.id),delete e.id,t.constructor.config&&delete t.constructor.config.id,t.getStaticConfig("observable")&&t.initObservable(e),e=t.setFields(e),t.initConfig(e),Object.defineProperty(t,"configsApplied",{enumerable:!1,value:!0}),t.applyDelayable(),s(t,"destroy",t.isDestroyedCheck,t),Promise.resolve().then(async()=>{await t.initAsync(),t.isReady=!0})}afterSetId(e,t){let s=this,r=!0===l.instanceManagerAvailable;t&&(r?Neo.manager.Instance.unregister(t):delete Neo.idMap[t]),e&&(r?Neo.manager.Instance.register(s):(Neo.idMap=Neo.idMap||{},Neo.idMap[s.id]=s))}applyDelayable(){let s=this,r=s.constructor.delayable,o=s.delayable?Neo.merge({},s.delayable,r):r;Object.entries(o).forEach(([r,o])=>{if(o){let n={buffer(){s[r]=new e(s[r],s,o.timer)},debounce(){s[r]=new t(s[r],s,o.timer)},throttle(){s[r]=new i(s[r],s,o.timer)}};n[o.type]?.()}})}static applyOverwrites(e){let t,s,r=Neo.ns(e.className,!1,Neo.overwrites);if(r){for(s in r)Neo.isFunction(r[s])&&(t=this.prototype,t[s]&&(t.constructor.overwrittenMethods[s]=t[s]));Object.assign(e,r)}}beforeSetEnumValue(e,t,s,r=s+"s"){let i=Array.isArray(r)?r:this.getStaticConfig(r);return i.includes(e)?e:(console.error(`Supported values for ${s} are:`,...i,this),t)}beforeSetRemote(e,t){let s=this;if(e&&!s.singleton&&!s.isMainThreadAddon)throw new Error("Remote method access is only functional for Singleton classes "+s.className);return e}bindCallback(e,t,s=this,i=this){if(e&&Neo.isString(e)){const o=r(e,s);i[t]=o.fn.bind(o.scope)}}callOverwritten(...e){let t=(new Error).stack.match(l.methodNameRegex)[1];this.__proto__.constructor.overwrittenMethods[t].call(this,...e)}createId(e){this.id=e||o.getId(this.getIdKey())}destroy(){let e=this;e.#e.forEach(e=>{clearTimeout(e)}),!0===l.instanceManagerAvailable?Neo.manager.Instance.unregister(e):Neo.idMap&&delete Neo.idMap[e.id],Object.keys(e).forEach(t=>{Object.getOwnPropertyDescriptor(e,t).writable&&"destroy"!==t&&"_id"!==t&&delete e[t]}),Neo.isFunction(e.fire)&&(e.fire=Neo.emptyFn),e.isDestroyed=!0}getIdKey(){return this.ntype}getStaticConfig(e){return this.constructor[e]}hasNtype(e){return this.constructor.ntypeChain.includes(e)}init(){}async initAsync(){this.remote&&this.initRemote()}initConfig(e,t){let s=this;s.isConfiguring=!0,Object.assign(s[n],s.mergeConfig(e,t)),s.processConfigs(),s.isConfiguring=!1}initRemote(){let{className:e,remote:t}=this,{currentWorker:s}=Neo;Neo.config.unitTestMode||("main"!==Neo.workerId&&s.isSharedWorker&&!s.isConnected?s.on("connected",()=>{l.sendRemotes(e,t)},this,{once:!0}):l.sendRemotes(e,t))}isDestroyedCheck(){return!this.isDestroyed}mergeConfig(e,t){let s=this,r=s.constructor;if(!r.config)throw new Error("Neo.applyClassConfig has not been run on "+s.className);return t||(s.originalConfig=Neo.clone(e,!0,!0)),{...r.config,...e}}onAfterConstructed(){let e=this;e.isConstructed=!0,e.getStaticConfig("observable")&&e.fire("constructed",e)}onConstructed(){}parseItemConfigs(e){let t,s,r,i,o=this;e&&(Array.isArray(e)||(e=[e]),e.forEach(e=>{e&&Object.entries(e).forEach(([a,c])=>{Array.isArray(c)?o.parseItemConfigs(c):"string"==typeof c&&c.startsWith("@config:")&&(s=c.substring(8).trim().split("."),r=s.pop(),t=Neo.ns(s,!1,o),void 0===t[r]?console.error("The used @config does not exist:",r,s.join(".")):(i=Neo.ns(s,!1,o[n]),i&&Object.hasOwn(i,r)?e[a]=i[r]:e[a]=t[r]))})}))}processConfigs(e=!1){let t=this,s=Object.keys(t[n]);t[a]=e,s.length>0&&(!e&&t.hasOwnProperty(s[0])||(t[s[0]]=t[n][s[0]]),delete t[n][s[0]],t.processConfigs(e))}static sendRemotes(e,t){let s;Object.entries(t).forEach(([t,r])=>{Neo.workerId!==t&&(s="main"===Neo.workerId?Neo.worker.Manager:Neo.currentWorker,s.sendMessage(t,{action:"registerRemote",className:e,methods:r}))})}set(e={}){let t=this;e=t.setFields(e),!0!==t[a]&&Object.keys(t[n]).length>0&&t.processConfigs(),Object.assign(t[n],e),t.processConfigs(!0)}setFields(e){let t=this,s=t.constructor.config;return Object.entries(e).forEach(([r,i])=>{s.hasOwnProperty(r)||Neo.hasPropertySetter(t,r)||(t[r]=i,delete e[r])}),e}setStaticConfig(e,t){let s=this.constructor.staticConfig;return!!s.hasOwnProperty(e)&&(s[e]=t,!0)}timeout(e){return new Promise(t=>{let s=this.#e,r=setTimeout(()=>{s.splice(s.indexOf(r),1),t()},e);s.push(r)})}get[Symbol.toStringTag](){return`${this.className} (id: ${this.id})`}static[Symbol.hasInstance](e){return!!e&&(!0===e[c]&&super[Symbol.hasInstance](e))}}export default Neo.setupClass(l);