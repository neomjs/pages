import e from"./EffectManager.mjs";import{isDescriptor as r}from"./ConfigSymbols.mjs";class t{#e={};#r;constructor(e){Neo.isObject(e)&&!0===e[r]?this.initDescriptor(e):this.#r=e}get(){return e.getActiveEffect()?.addDependency(this),this.#r}initDescriptor({clone:e,cloneOnGet:r,isEqual:t,merge:i}){let n=this;e&&e!==n.clone&&Object.defineProperty(n,"clone",{value:e,writable:!0,configurable:!0,enumerable:!0}),r&&r!==n.cloneOnGet&&Object.defineProperty(n,"cloneOnGet",{value:r,writable:!0,configurable:!0,enumerable:!0}),t&&t!==n.isEqual&&Object.defineProperty(n,"isEqual",{value:t,writable:!0,configurable:!0,enumerable:!0}),i&&i!==n.mergeStrategy&&Object.defineProperty(n,"mergeStrategy",{value:i,writable:!0,configurable:!0,enumerable:!0})}notify(e,r){for(const t in this.#e)if(this.#e.hasOwnProperty(t)){const i=this.#e[t];for(const t of i)t(e,r)}}set(e){if(void 0===e)return!1;const r=this,t=r.#r;return!r.isEqual(e,t)&&(r.#r=e,r.notify(e,t),!0)}setRaw(e){this.#r=e}subscribe({id:e,fn:r}){if("string"!=typeof e||0===e.length||"function"!=typeof r)throw new Error(["Config.subscribe: options must be an object with a non-empty string `id` ","(the subscription owner's id), and a callback function `fn`."].join(""));const t=this;return t.#e[e]||(t.#e[e]=new Set),t.#e[e].add(r),()=>{const i=t.#e[e];i&&(i.delete(r),0===i.size&&delete t.#e[e])}}}Object.defineProperties(t.prototype,{clone:{value:"deep",writable:!1,configurable:!0,enumerable:!1},cloneOnGet:{value:null,writable:!1,configurable:!0,enumerable:!1},isEqual:{value:Neo.isEqual,writable:!1,configurable:!0,enumerable:!1},mergeStrategy:{value:"replace",writable:!1,configurable:!0,enumerable:!1}});Neo.ns("Neo.core",!0).Config=t;export default t;