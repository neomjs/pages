import e from"./Config.mjs";import n from"./EffectManager.mjs";import s from"./EffectBatchManager.mjs";import t from"./IdGenerator.mjs";class i{componentId=null;dependencies=new Map;_fn=null;id=t.getId("effect");isDestroyed=!1;isRunning=null;get fn(){return this._fn}set fn(e){this._fn=e,this.run()}constructor(n,s={}){const t=this,{fn:i,componentId:c,lazy:o=!1,subscriber:f}="function"==typeof n?{...s,fn:n}:n||{};c&&(t.componentId=c),t.isRunning=new e(!1),f&&[].concat(f).forEach(e=>t.isRunning.subscribe(e)),o?t._fn=i:t.fn=i}destroy(){const e=this;e.dependencies.forEach(e=>e()),e.dependencies.clear(),e.isDestroyed=!0}run(){const e=this;if(n.pause(),e.isDestroyed||e.isRunning.get())n.resume();else if(s.isBatchActive())s.queueEffect(e);else{e.isRunning.set(!0),e.dependencies.forEach(e=>e()),e.dependencies.clear(),n.push(e),n.resume();try{e.fn()}finally{n.pop(),n.pause(),e.isRunning.set(!1),n.resume()}}}addDependency(e){const n=this;if(!n.dependencies.has(e)){const s=e.subscribe({id:n.id,fn:n.run.bind(n)});n.dependencies.set(e,s)}}}Neo.core??={},Neo.core.Effect||(Neo.core.Effect=i,Neo.effect=(e,n)=>new i(e,n));export default Neo.core.Effect;