import e from"./Config.mjs";import n from"./EffectManager.mjs";import s from"./IdGenerator.mjs";class i{componentId=null;dependencies=new Map;_fn=null;id=s.getId("effect");isDestroyed=!1;isRunning=null;get fn(){return this._fn}set fn(e){this._fn=e,this.run()}constructor(n,s={}){const i=this,{fn:t,componentId:r,lazy:c=!1,subscriber:o}="function"==typeof n?{...s,fn:n}:n||{};r&&(i.componentId=r),i.isRunning=new e(!1),o&&[].concat(o).forEach(e=>i.isRunning.subscribe(e)),c?i._fn=t:i.fn=t}destroy(){const e=this;e.dependencies.forEach(e=>e()),e.dependencies.clear(),e.isDestroyed=!0}run(){const e=this;if(e.isDestroyed)return;n.pauseTracking();const s=e.isRunning.get();if(n.resumeTracking(),!s)if(n.isPaused())n.queue(e);else{n.pauseTracking(),e.isRunning.set(!0),n.resumeTracking(),e.dependencies.forEach(e=>e()),e.dependencies.clear(),n.push(e);try{e.fn()}finally{n.pop(),n.pauseTracking(),e.isRunning.set(!1),n.resumeTracking()}}}addDependency(e){const n=this;if(!n.dependencies.has(e)){const s=e.subscribe({id:n.id,fn:n.run.bind(n)});n.dependencies.set(e,s)}}}export default Neo.gatekeep(i,"Neo.core.Effect",()=>{Neo.effect=(e,n)=>new i(e,n)});