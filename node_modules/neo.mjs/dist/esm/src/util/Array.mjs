import t from"../core/Base.mjs";export default Neo.setupClass(class extends t{static config={className:"Neo.util.Array"};static add(t,e){return Array.isArray(e)||(e=[e]),e.forEach((e=>{t.includes(e)||t.push(e)})),t}static difference(t=[],e=[]){return t.filter((t=>!e.includes(t)))}static hasItem(t,e){return t.includes(e)}static insert(t,e,r){Array.isArray(r)||(r=[r]);let s,i,a=r.length-1;for(;a>-1;a--)i=r[a],s=t.indexOf(i),e!==s&&(s>-1?this.move(t,s,e):t.splice(e,0,i));return t}static intersection(t=[],e=[]){return t.filter((t=>e.includes(t)))}static move(t,e,r){return e===r||(e>=t.length&&(e=t.length-1),t.splice(r,0,t.splice(e,1)[0])),t}static remove(t,e){let r;return Array.isArray(e)||(e=[e]),e.forEach((e=>{r=t.indexOf(e),r>-1&&t.splice(r,1)})),t}static removeAdd(t,e,r){return this.remove(t,e),this.add(t,r)}static toggle(t,e,r=!this.hasItem(t,e)){return this[r?"add":"remove"](t,e)}static union(){return[...new Set(Array.prototype.concat(...arguments))]}static unshift(t,e){return Array.isArray(e)||(e=[e]),e.forEach((e=>{t.includes(e)||t.unshift(e)})),t}});