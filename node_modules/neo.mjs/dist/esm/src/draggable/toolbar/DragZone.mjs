import e from"../../draggable/DragZone.mjs";import t from"../../util/Array.mjs";import r from"../../util/VDom.mjs";export default Neo.setupClass(class extends e{static config={className:"Neo.draggable.toolbar.DragZone",ntype:"toolbar-dragzone"};construct(e){super.construct(e);let t=this,{owner:r}=t,a={delegate:".neo-draggable",scope:t};r.addDomListeners([{"drag:end":t.onDragEnd,...a},{"drag:move":t.onDragMove,...a},{"drag:start":t.onDragStart,...a}]),r.on({insert:t.onItemInsert,itemsCreated:t.onItemsCreated,scope:t}),t.adjustToolbarItemCls(!0)}adjustToolbarItemCls(e){let r,{owner:a}=this;a.items.forEach((a=>{r=a.wrapperCls||[],t.toggle(r,"neo-draggable",e),a.wrapperCls=r}))}onDragEnd(e){if(this.owner.draggable){let e=this,r=e.dragProxy,a=r.cls||{},o=e.dragElementRect,s=r.wrapperStyle||{};t.add(a,"neo-animate"),r.cls=a,e.timeout(30).then((()=>{s.left=`${o.left}px`,s.top=`${o.top}px`,r.wrapperStyle=s,e.timeout(100).then((()=>{e.dragEnd()}))}))}}async onDragStart(e){let t=this;t.owner.draggable&&(t.dragElement=r.find(t.owner.vdom,e.path[0].id).vdom,await t.dragStart(e))}onItemInsert(e){let{item:r}=e,a=r.wrapperCls||[];t.add(a,"neo-draggable"),r.wrapperCls=a}onItemsCreated(e){this.adjustToolbarItemCls(!0)}});