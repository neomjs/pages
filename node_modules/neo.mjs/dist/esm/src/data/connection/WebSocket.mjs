import e from"../../core/Base.mjs";import{createInterceptor as s}from"../../util/Function.mjs";import t from"../../core/Observable.mjs";export default Neo.setupClass(class extends e{static observable=!0;static config={className:"Neo.data.connection.WebSocket",ntype:"socket-connection",socket_:null};channel=null;maxReconnectAttempts=5;messageCallbacks={};messageId=1;reconnectAttempts=0;serverAddress=null;construct(e){super.construct(e),this.createSocket()}attemptReconnect(e,s){let t=this;t.reconnectAttempts++,t.reconnectAttempts<t.maxReconnectAttempts&&(t.createSocket(),e&&t.on("open",{callback:e,scope:s||t,single:!0}))}beforeSend(e){let{channel:s}=this;return JSON.stringify(s?{channel:s,data:e}:e)}beforeSetSocket(e,t){if(e){let t=this;Object.assign(e,{onclose:t.onClose.bind(t),onerror:t.onError.bind(t),onmessage:t.onMessage.bind(t),onopen:t.onOpen.bind(t)}),s(e,"send",t.beforeSend,t)}return e}close(e,s){this.socket.close(e,s)}createSocket(){this.socket=new WebSocket(this.serverAddress)}destroy(...e){this.close(),super.destroy(...e)}onClose(e,s,t){console.log("onClose",e,s,t)}onError(){console.log("onError",arguments)}onMessage(e){let s=this,t=JSON.parse(e.data);t.mId&&(s.messageCallbacks[t.mId].resolve(t.data),delete s.messageCallbacks[t.mId])}onOpen(){this.fire("open",{scope:this})}promiseMessage(e){let s=this;return new Promise(((t,o)=>{s.messageCallbacks[s.messageId]={reject:o,resolve:t},s.sendMessage({data:e,mId:s.messageId}),s.messageId++}))}sendMessage(e){let s=this,{socket:t}=s,o=e;switch(t.readyState){case WebSocket.CLOSED:case WebSocket.CLOSING:s.attemptReconnect((function(){s.sendMessage(o)}));break;case WebSocket.CONNECTING:s.on("open",(function(){s.sendMessage(o)}),s,{once:!0});break;case WebSocket.OPEN:t.send(e)}}});