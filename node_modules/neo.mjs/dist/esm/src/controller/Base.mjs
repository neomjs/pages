import e from"../core/Base.mjs";import t from"../util/HashHistory.mjs";const o=/\//g,s=/{[^\s/]+}/g;export default Neo.setupClass(class extends e{static config={className:"Neo.controller.Base",ntype:"controller",defaultHash:null,defaultRoute:null,handleRoutes:{},routes_:{}};construct(e){super.construct(e),t.on("change",this.onHashChange,this)}afterSetRoutes(e,t){let o=this,n=Object.keys(e);o.routes=n.sort(o.#e).reduce(((t,o)=>(t[o]=e[o],t)),{}),o.handleRoutes={},n.forEach((t=>{"default"===t.toLowerCase()?o.defaultRoute=e[t]:o.handleRoutes[t]=new RegExp(t.replace(s,"([\\w-.]+)")+"$")}))}destroy(...e){t.un("change",this.onHashChange,this),super.destroy(...e)}async onConstructed(){let e=this,{defaultHash:o,windowId:s}=e,n=t.first(s);await e.timeout(1),n?n.windowId===s&&await e.onHashChange(n,null):!Neo.config.hash&&o&&Neo.Main.setRoute({value:o,windowId:s})}async onHashChange(e,t){if(e.windowId!==this.windowId)return;let o,n,a,l,u,h,r,i,d,c=this,g=0,f=!1,{handleRoutes:w,routes:m}=c,R=Object.keys(w),p=R.length;for(;p>0&&g<p&&!f;){if(l=R[g],a=null,h=null,r=null,u={},i=e.hashString.match(w[l]),i){if(o=l.match(s),n=i.splice(1,i.length-1),o&&o.length!==n.length)throw"Number of IDs and number of Values do not match";for(let e=0;o&&e<o.length;e++)u[o[e].substring(1,o[e].length-1)]=n[e];d=m[l],Neo.isString(d)?(a=d,r=!0):Neo.isObject(d)&&(a=d.handler,h=d.preHandler),f=!0}g++}f&&(r=!h||await(c[h]?.call(c,u,e,t)),r&&await(c[a]?.call(c,u,e,t))),R.length>0&&!f&&(c.defaultRoute?c[c.defaultRoute]?.(e,t):c.onNoRouteFound(e,t))}onNoRouteFound(e,t){}#e(e,t){return(e.match(o)||[]).length-(t.match(o)||[]).length}});