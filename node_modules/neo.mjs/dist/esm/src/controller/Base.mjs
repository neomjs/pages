import t from"../core/Base.mjs";import e from"../util/HashHistory.mjs";const n=/\//g,s=/{(\*|\.\.\.)?([^}]+)}/,o=/{(\*|\.\.\.)?([^}]+)}/g;export default Neo.setupClass(class extends t{static config={className:"Neo.controller.Base",ntype:"controller",defaultHash:null,defaultRoute:null,handleRoutes:{},routes_:{}};construct(t){super.construct(t),e.on("change",this.onHashChange,this)}afterSetRoutes(t,e){let n=this,s=Object.keys(t);n.routes=s.sort(n.#t).reduce((e,n)=>(e[n]=t[n],e),{}),n.handleRoutes={},s.forEach(e=>{"default"===e.toLowerCase()?n.defaultRoute=t[e]:n.handleRoutes[e]=new RegExp(e.replace(o,(t,e,n)=>e||n.startsWith("*")?"(.*)":"([\\w-.]+)"))})}destroy(...t){e.un("change",this.onHashChange,this),super.destroy(...t)}async initAsync(){await super.initAsync();let t=this,{defaultHash:n,windowId:s}=t,o=e.first(s);o?o.windowId===s&&await t.onHashChange(o,null):!Neo.config.hash&&n&&Neo.Main.setRoute({value:n,windowId:s})}async onHashChange(t,e){if(t.windowId!==this.windowId)return;let l=this,{handleRoutes:a,routes:h}=l,u=Object.keys(a),r=null,i=null,c=null;for(let e=0;e<u.length;e++){const l=u[e],h=t.hashString.match(a[l]);if(h){const t=l.match(o),e=h.splice(1,h.length-1),a={};if(t)for(let n=0;n<t.length;n++){const o=t[n].match(s);if(o){a[o[2]]=e[n]}}(!r||h[0].length>r[0].length||h[0].length===r[0].length&&(l.match(n)||[]).length>(i.match(n)||[]).length)&&(r=h,i=l,c=a)}}if(r){const n=h[i];let s=null,o=null;Neo.isString(n)?s=n:Neo.isObject(n)&&(s=n.handler,o=n.preHandler);let a=!0;o&&(a=await(l[o]?.call(l,c,t,e))),a&&await(l[s]?.call(l,c,t,e))}else l.defaultRoute?l[l.defaultRoute]?.(t,e):l.onNoRouteFound(t,e)}onNoRouteFound(t,e){}#t(t,e){return(t.match(n)||[]).length-(e.match(n)||[]).length}});