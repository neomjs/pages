import e from"../../../src/controller/Component.mjs";export default Neo.setupClass(class extends e{static config={className:"Colors.view.ViewportController"};connectedApps=[];intervalId=null;widgetIndexMap={"bar-chart":3,"pie-chart":2,grid:1};async createBrowserWindow(e){let t,a=this,{windowId:n}=a,{config:o,windowConfigs:i}=Neo,{environment:s}=o,r=parseInt(Object.keys(i)[0]),{basePath:d}=i[r];if("development"!==s&&(d=`${d+s}/`),t=`${d}apps/colors/childapps/widget/index.html?name=${e}`,a.getStateProvider().getData("openWidgetsAsPopups")){let o=a.getReference(e),i=await Neo.Main.getWindowData({windowId:n}),s=await a.component.getDomRect(o.vdom.id),{height:r,left:d,top:p,width:c}=s;r-=50,d+=i.screenLeft,p+=i.outerHeight-i.innerHeight+i.screenTop,await Neo.Main.windowOpen({url:t,windowFeatures:`height=${r},left=${d},top=${p},width=${c}`,windowName:e})}else await Neo.Main.windowOpen({url:t,windowName:"_blank"})}destroy(...e){this.intervalId&&clearInterval(this.intervalId),super.destroy(...e)}async onAppConnect(e){if("ColorsWidget"===e.appName){let t=this,a=Neo.apps[e.appName].mainView,{windowId:n}=e,o=await Neo.Main.getByPath({path:"document.URL",windowId:n}),i=new URL(o).searchParams.get("name"),s=t.getReference(i);t.connectedApps.push(i),t.getReference(`detach-${i}-button`).disabled=!0,a.add(s)}}async onAppDisconnect(e){let t=this,{appName:a,windowId:n}=e,o=await Neo.Main.getByPath({path:"document.URL",windowId:n}),i=new URL(o).searchParams.get("name"),s=t.getReference(i);"ColorsWidget"===a?(t.component.insert(t.widgetIndexMap[i],s),t.getReference(`detach-${i}-button`).disabled=!1):"Colors"===a&&Neo.Main.windowClose({names:t.connectedApps,windowId:n})}onChangeAmountColors(e){this.updateDataProperty(e,"amountColors",e.value)}onChangeAmountColumns(e){this.updateDataProperty(e,"amountColumns",parseInt(e.value.name))}onChangeAmountRows(e){this.updateDataProperty(e,"amountRows",parseInt(e.value.name))}onChangeOpenWidgetsAsPopups(e){this.setState("openWidgetsAsPopups",e.value)}onConstructed(){super.onConstructed();let e=this;Neo.currentWorker.on({connect:e.onAppConnect,disconnect:e.onAppDisconnect,scope:e})}onComponentConstructed(){super.onComponentConstructed(),this.updateWidgets()}async onDetachBarChartButtonClick(e){await this.createBrowserWindow("bar-chart")}async onDetachGridButtonClick(e){await this.createBrowserWindow("grid")}async onDetachPieChartButtonClick(e){await this.createBrowserWindow("pie-chart")}onStartButtonClick(e){let t=this,a=1e3/60;t.setState({isUpdating:!0}),t.intervalId||(t.intervalId=setInterval((()=>{t.updateWidgets()}),a))}onStopButtonClick(e){let t=this;t.setState({isUpdating:!1}),t.intervalId&&(clearInterval(t.intervalId),t.intervalId=null)}updateCharts(e){this.getReference("bar-chart").chartData=e,this.getReference("pie-chart").chartData=e}updateDataProperty(e,t,a){let n=this.getStateProvider();n.setData(t,a),null===e.oldValue||n.getData("isUpdating")||this.updateWidgets()}updateGrid(e){let t=this.getReference("grid"),{store:a}=t;a.getCount()?t.bulkUpdateRecords(e):this.getStateProvider().getData("amountRows")===e.length&&(a.data=e)}async updateWidgets(){let e,t=this,a=t.getStateProvider();if(Colors.backend){if(e=await Colors.backend.ColorService.read({amountColors:a.getData("amountColors"),amountColumns:a.getData("amountColumns"),amountRows:a.getData("amountRows")}),!t.isDestroyed){let{data:a}=e;t.updateGrid(a.tableData),t.updateCharts(a.summaryData)}}else await t.timeout(50),t.updateWidgets()}});