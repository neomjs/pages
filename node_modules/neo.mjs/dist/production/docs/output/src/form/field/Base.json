{"classData":[{"comment":"/**\n * Abstract base class for form fields\n * @class Neo.form.field.Base\n * @extends Neo.component.Base\n */","meta":{"filename":"Base.mjs","lineno":5,"columnno":0,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"description":"<p>Abstract base class for form fields</p>\n","kind":"class","name":"Base","augments":["Neo.component.Base"],"memberof":"Neo.form.field","longname":"Neo.form.field.Base","scope":"static","$longname":"Neo.form.field.Base","$kind":"class","id":2455,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n     * Valid values for isTouchedEvent\n     * @member {String[]} isTouchedEvents=['focusEnter','focusLeave']\n     * @protected\n     * @static\n     */","meta":{"filename":"Base.mjs","lineno":17,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"description":"<p>Valid values for isTouchedEvent</p>\n","kind":"member","name":"isTouchedEvents","type":{"names":["Array.<String>"]},"defaultvalue":"['focusEnter','focusLeave']","access":"protected","scope":"static","longname":"isTouchedEvents","$longname":"isTouchedEvents","$kind":"property","id":2456,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n         * @member {String} className='Neo.form.field.Base'\n         * @protected\n         */","meta":{"filename":"Base.mjs","lineno":24,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"kind":"member","name":"className","type":{"names":["String"]},"defaultvalue":"'Neo.form.field.Base'","access":"protected","longname":"className","scope":"global","$longname":"className","$kind":"property","id":2457,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n         * @member {String} ntype='basefield'\n         * @protected\n         */","meta":{"filename":"Base.mjs","lineno":29,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"kind":"member","name":"ntype","type":{"names":["String"]},"defaultvalue":"'basefield'","access":"protected","longname":"ntype","scope":"global","$longname":"ntype","$kind":"property","id":2458,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n         * Form groups can get set on any parent component level.\n         * An alternative way for using dots in field names.\n         * @member {String|null} formGroup_=null\n         */","meta":{"filename":"Base.mjs","lineno":35,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"description":"<p>Form groups can get set on any parent component level.\nAn alternative way for using dots in field names.</p>\n","kind":"member","name":"formGroup_","type":{"names":["String","null"]},"defaultvalue":null,"longname":"formGroup_","scope":"global","$longname":"formGroup_","$kind":"property","id":2459,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n         * @member {Object|null} keys={}\n         */","meta":{"filename":"Base.mjs","lineno":39,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"kind":"member","name":"keys","type":{"names":["Object","null"]},"defaultvalue":"{}","longname":"keys","scope":"global","$longname":"keys","$kind":"property","id":2460,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n         * True indicates that a user has interacted with the form field\n         * @member {Boolean} isTouched_=false\n         */","meta":{"filename":"Base.mjs","lineno":44,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"description":"<p>True indicates that a user has interacted with the form field</p>\n","kind":"member","name":"isTouched_","type":{"names":["Boolean"]},"defaultvalue":false,"longname":"isTouched_","scope":"global","$longname":"isTouched_","$kind":"property","id":2461,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n         * Event name which sets isTouched to true. Valid options are 'focusEnter' & 'focusLeave'\n         * @member {String} isTouched_=false\n         */","meta":{"filename":"Base.mjs","lineno":49,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"description":"<p>Event name which sets isTouched to true. Valid options are &#39;focusEnter&#39; &amp; &#39;focusLeave&#39;</p>\n","kind":"member","name":"isTouched_","type":{"names":["String"]},"defaultvalue":false,"longname":"isTouched_","scope":"global","$longname":"isTouched_","$kind":"property","id":2462,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n         * @member {String|null} name_=null\n         */","meta":{"filename":"Base.mjs","lineno":53,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"kind":"member","name":"name_","type":{"names":["String","null"]},"defaultvalue":null,"longname":"name_","scope":"global","$longname":"name_","$kind":"property","id":2463,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n         * Neo itself does not need field names to get mapped to the DOM (input nodes),\n         * except for CheckBoxes & Radios to work. It can be useful for testing tools\n         * & accessibility though, so the default got set to true.\n         * Feel free to change it to false to keep the DOM minimal.\n         * @member {Boolean} renderName_=true\n         */","meta":{"filename":"Base.mjs","lineno":61,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"description":"<p>Neo itself does not need field names to get mapped to the DOM (input nodes),\nexcept for CheckBoxes &amp; Radios to work. It can be useful for testing tools\n&amp; accessibility though, so the default got set to true.\nFeel free to change it to false to keep the DOM minimal.</p>\n","kind":"member","name":"renderName_","type":{"names":["Boolean"]},"defaultvalue":true,"longname":"renderName_","scope":"global","$longname":"renderName_","$kind":"property","id":2464,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n         * In case renderName is set to true, you can optionally render the combination\n         * of all formGroup(s) & the field name into the DOM => input node\n         * @member {Boolean} renderPath=true\n         */","meta":{"filename":"Base.mjs","lineno":67,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"description":"<p>In case renderName is set to true, you can optionally render the combination\nof all formGroup(s) &amp; the field name into the DOM =&gt; input node</p>\n","kind":"member","name":"renderPath","type":{"names":["Boolean"]},"defaultvalue":true,"longname":"renderPath","scope":"global","$longname":"renderPath","$kind":"property","id":2465,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n         * @member {*} value_=null\n         */","meta":{"filename":"Base.mjs","lineno":71,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"kind":"member","name":"value_","type":{"names":["*"]},"defaultvalue":null,"longname":"value_","scope":"global","$longname":"value_","$kind":"property","id":2466,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n     * An internal cache for formGroups of all parent levels\n     * @member {String|null} formGroupString=null\n     */","meta":{"filename":"Base.mjs","lineno":78,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"description":"<p>An internal cache for formGroups of all parent levels</p>\n","kind":"member","name":"formGroupString","type":{"names":["String","null"]},"defaultvalue":null,"longname":"formGroupString","scope":"global","$longname":"formGroupString","$kind":"property","id":2467,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n     * Base implementation to check if the fields value has changed.\n     * Can get overridden in superclasses.\n     * @returns {Boolean}\n     */","meta":{"range":[2655,2754],"filename":"Base.mjs","lineno":89,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{"id":"astnode100075148","name":"Field#isDirty","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Base implementation to check if the fields value has changed.\nCan get overridden in superclasses.</p>\n","returns":[{"type":{"names":["Boolean"]}}],"name":"isDirty","longname":"Field#isDirty","kind":"member","memberof":"Field","scope":"instance","params":[],"$longname":"Field#isDirty","$kind":"property","id":2468,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n     * An internal cache for formGroup(s) and the field name\n     * @member {String|null} path=null\n     */","meta":{"filename":"Base.mjs","lineno":91,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"description":"<p>An internal cache for formGroup(s) and the field name</p>\n","kind":"member","name":"path","type":{"names":["String","null"]},"defaultvalue":null,"longname":"path","scope":"global","$longname":"path","$kind":"property","id":2469,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n     * Triggered after the name isTouched got changed\n     * @param {String|null} value\n     * @param {String|null} oldValue\n     */","meta":{"range":[3033,3180],"filename":"Base.mjs","lineno":98,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{"id":"astnode100075169","name":"Field#afterSetIsTouched","type":"MethodDefinition","paramnames":["value","oldValue"]},"vars":{"":null}},"description":"<p>Triggered after the name isTouched got changed</p>\n","params":[{"type":{"names":["String","null"]},"name":"value"},{"type":{"names":["String","null"]},"name":"oldValue"}],"name":"afterSetIsTouched","longname":"Field#afterSetIsTouched","kind":"function","memberof":"Field","scope":"instance","$longname":"Field#afterSetIsTouched","$kind":"method","id":2470,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n     * Triggered after the name config got changed\n     * @param {String|null} value\n     * @param {String|null} oldValue\n     */","meta":{"range":[3324,3476],"filename":"Base.mjs","lineno":110,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{"id":"astnode100075195","name":"Field#afterSetName","type":"MethodDefinition","paramnames":["value","oldValue"]},"vars":{"":null}},"description":"<p>Triggered after the name config got changed</p>\n","params":[{"type":{"names":["String","null"]},"name":"value"},{"type":{"names":["String","null"]},"name":"oldValue"}],"name":"afterSetName","longname":"Field#afterSetName","kind":"function","memberof":"Field","scope":"instance","$longname":"Field#afterSetName","$kind":"method","id":2471,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n     * Triggered after the role config got changed\n     * @param {String|null} value\n     * @param {String|null} oldValue\n     * @protected\n     */","meta":{"range":[3638,3737],"filename":"Base.mjs","lineno":122,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{"id":"astnode100075224","name":"Field#afterSetRole","type":"MethodDefinition","paramnames":["value","oldValue"]},"vars":{"":null}},"description":"<p>Triggered after the role config got changed</p>\n","params":[{"type":{"names":["String","null"]},"name":"value"},{"type":{"names":["String","null"]},"name":"oldValue"}],"access":"protected","name":"afterSetRole","longname":"Field#afterSetRole","kind":"function","memberof":"Field","scope":"instance","$longname":"Field#afterSetRole","$kind":"method","id":2472,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n     * Triggered after the value config got changed\n     * @param {*} value\n     * @param {*} oldValue\n     */","meta":{"range":[3862,3972],"filename":"Base.mjs","lineno":132,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{"id":"astnode100075244","name":"Field#afterSetValue","type":"MethodDefinition","paramnames":["value","oldValue"]},"vars":{"":null}},"description":"<p>Triggered after the value config got changed</p>\n","params":[{"type":{"names":["*"]},"name":"value"},{"type":{"names":["*"]},"name":"oldValue"}],"name":"afterSetValue","longname":"Field#afterSetValue","kind":"function","memberof":"Field","scope":"instance","$longname":"Field#afterSetValue","$kind":"method","id":2473,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n     * Triggered when accessing the formGroup config\n     * @param {String|null} value\n     * @returns {String|null} parents\n     * @protected\n     */","meta":{"range":[4137,4613],"filename":"Base.mjs","lineno":142,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{"id":"astnode100075261","name":"Field#beforeGetFormGroup","type":"MethodDefinition","paramnames":["value"]},"vars":{"":null}},"description":"<p>Triggered when accessing the formGroup config</p>\n","params":[{"type":{"names":["String","null"]},"name":"value"}],"returns":[{"type":{"names":["String","null"]},"description":"parents"}],"access":"protected","name":"beforeGetFormGroup","longname":"Field#beforeGetFormGroup","kind":"function","memberof":"Field","scope":"instance","$longname":"Field#beforeGetFormGroup","$kind":"method","id":2474,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n     * Triggered before the isTouchedEvent config gets changed\n     * @param {String} value\n     * @param {String} oldValue\n     * @protected\n     */","meta":{"range":[4777,4899],"filename":"Base.mjs","lineno":170,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{"id":"astnode100075332","name":"Field#beforeSetIsTouchedEvent","type":"MethodDefinition","paramnames":["value","oldValue"]},"vars":{"":null}},"description":"<p>Triggered before the isTouchedEvent config gets changed</p>\n","params":[{"type":{"names":["String"]},"name":"value"},{"type":{"names":["String"]},"name":"oldValue"}],"access":"protected","name":"beforeSetIsTouchedEvent","longname":"Field#beforeSetIsTouchedEvent","kind":"function","memberof":"Field","scope":"instance","$longname":"Field#beforeSetIsTouchedEvent","$kind":"method","id":2475,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n     * Changes the value of a inputEl vdom object attribute or removes it in case it has no value\n     * @param {String} key\n     * @param {Array|Number|Object|String|null} value\n     * @param {Boolean} silent=false\n     */","meta":{"range":[5137,5411],"filename":"Base.mjs","lineno":180,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{"id":"astnode100075346","name":"Field#changeInputElKey","type":"MethodDefinition","paramnames":["key","value","silent"]},"vars":{"":null}},"description":"<p>Changes the value of a inputEl vdom object attribute or removes it in case it has no value</p>\n","params":[{"type":{"names":["String"]},"name":"key"},{"type":{"names":["Array","Number","Object","String","null"]},"name":"value"},{"type":{"names":["Boolean"]},"defaultvalue":false,"name":"silent"}],"name":"changeInputElKey","longname":"Field#changeInputElKey","kind":"function","memberof":"Field","scope":"instance","$longname":"Field#changeInputElKey","$kind":"method","id":2476,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n     * Override this method as needed\n     * @param {*}      value\n     * @param {*}      oldValue\n     * @param {String} eventName\n     */","meta":{"range":[5565,6233],"filename":"Base.mjs","lineno":198,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{"id":"astnode100075398","name":"Field#doFireChangeEvent","type":"MethodDefinition","paramnames":["value","oldValue","eventName"]},"vars":{"":null}},"description":"<p>Override this method as needed</p>\n","params":[{"type":{"names":["*"]},"name":"value"},{"type":{"names":["*"]},"name":"oldValue"},{"type":{"names":["String"]},"name":"eventName"}],"name":"doFireChangeEvent","longname":"Field#doFireChangeEvent","kind":"function","memberof":"Field","scope":"instance","$longname":"Field#doFireChangeEvent","$kind":"method","id":2477,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n     * Override this method as needed\n     * @param {*} value\n     * @param {*} oldValue\n     */","meta":{"range":[6344,6442],"filename":"Base.mjs","lineno":224,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{"id":"astnode100075487","name":"Field#fireChangeEvent","type":"MethodDefinition","paramnames":["value","oldValue"]},"vars":{"":null}},"description":"<p>Override this method as needed</p>\n","params":[{"type":{"names":["*"]},"name":"value"},{"type":{"names":["*"]},"name":"oldValue"}],"name":"fireChangeEvent","longname":"Field#fireChangeEvent","kind":"function","memberof":"Field","scope":"instance","$longname":"Field#fireChangeEvent","$kind":"method","id":2478,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n     * Override this method as needed\n     * @param {*} value\n     * @param {*} oldValue\n     */","meta":{"range":[6553,6659],"filename":"Base.mjs","lineno":233,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{"id":"astnode100075501","name":"Field#fireUserChangeEvent","type":"MethodDefinition","paramnames":["value","oldValue"]},"vars":{"":null}},"description":"<p>Override this method as needed</p>\n","params":[{"type":{"names":["*"]},"name":"value"},{"type":{"names":["*"]},"name":"oldValue"}],"name":"fireUserChangeEvent","longname":"Field#fireUserChangeEvent","kind":"function","memberof":"Field","scope":"instance","$longname":"Field#fireUserChangeEvent","$kind":"method","id":2479,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n     * Forms in neo can be nested. This method will return the closest parent which is a form.Container or null.\n     * @returns {Neo.form.Container|null}\n     */","meta":{"range":[6836,7165],"filename":"Base.mjs","lineno":241,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{"id":"astnode100075515","name":"Field#getClosestForm","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Forms in neo can be nested. This method will return the closest parent which is a form.Container or null.</p>\n","returns":[{"type":{"names":["Neo.form.Container","null"]}}],"name":"getClosestForm","longname":"Field#getClosestForm","kind":"function","memberof":"Field","scope":"instance","params":[],"$longname":"Field#getClosestForm","$kind":"method","id":2480,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n     * Override this method as needed\n     * @returns {Object|null}\n     */","meta":{"range":[7255,7300],"filename":"Base.mjs","lineno":259,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{"id":"astnode100075547","name":"Field#getInputEl","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Override this method as needed</p>\n","returns":[{"type":{"names":["Object","null"]}}],"name":"getInputEl","longname":"Field#getInputEl","kind":"function","memberof":"Field","scope":"instance","params":[],"$longname":"Field#getInputEl","$kind":"method","id":2481,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n     * Returns the combination of the field formGroup(s) & name\n     * @returns {String|null}\n     */","meta":{"range":[7416,8112],"filename":"Base.mjs","lineno":267,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{"id":"astnode100075555","name":"Field#getPath","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Returns the combination of the field formGroup(s) &amp; name</p>\n","returns":[{"type":{"names":["String","null"]}}],"name":"getPath","longname":"Field#getPath","kind":"function","memberof":"Field","scope":"instance","params":[],"$longname":"Field#getPath","$kind":"method","id":2482,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n     * @returns {*}\n     */","meta":{"range":[8154,8204],"filename":"Base.mjs","lineno":300,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{"id":"astnode100075648","name":"Field#getSubmitValue","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"returns":[{"type":{"names":["*"]}}],"name":"getSubmitValue","longname":"Field#getSubmitValue","kind":"function","memberof":"Field","scope":"instance","params":[],"$longname":"Field#getSubmitValue","$kind":"method","id":2483,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n     * @deprecated in v7.x\n     * @returns {*}\n     */","meta":{"range":[8273,8328],"filename":"Base.mjs","lineno":308,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{"id":"astnode100075656","name":"Field#getValue","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"deprecated":"in v7.x","returns":[{"type":{"names":["*"]}}],"name":"getValue","longname":"Field#getValue","kind":"function","memberof":"Field","scope":"instance","params":[],"$longname":"Field#getValue","$kind":"method","id":2484,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n     * @returns {Boolean}\n     */","meta":{"range":[8376,8413],"filename":"Base.mjs","lineno":315,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{"id":"astnode100075665","name":"Field#isValid","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"returns":[{"type":{"names":["Boolean"]}}],"name":"isValid","longname":"Field#isValid","kind":"function","memberof":"Field","scope":"instance","params":[],"$longname":"Field#isValid","$kind":"method","id":2485,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n     * @param {Object} data\n     */","meta":{"range":[8463,8620],"filename":"Base.mjs","lineno":322,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{"id":"astnode100075671","name":"Field#onFocusEnter","type":"MethodDefinition","paramnames":["data"]},"vars":{"":null}},"params":[{"type":{"names":["Object"]},"name":"data"}],"name":"onFocusEnter","longname":"Field#onFocusEnter","kind":"function","memberof":"Field","scope":"instance","$longname":"Field#onFocusEnter","$kind":"method","id":2486,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n     * @param {Object} data\n     * @param {Object[]} data.oldPath\n     * @protected\n     */","meta":{"range":[8726,9423],"filename":"Base.mjs","lineno":335,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{"id":"astnode100075695","name":"Field#onFocusLeave","type":"MethodDefinition","paramnames":["data"]},"vars":{"":null}},"params":[{"type":{"names":["Object"]},"name":"data"},{"type":{"names":["Array.<Object>"]},"name":"data.oldPath"}],"access":"protected","name":"onFocusLeave","longname":"Field#onFocusLeave","kind":"function","memberof":"Field","scope":"instance","$longname":"Field#onFocusLeave","$kind":"method","id":2487,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n     * Resets the field to a new value or null\n     * @param {*} value=null\n     */","meta":{"range":[9521,9616],"filename":"Base.mjs","lineno":363,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{"id":"astnode100075788","name":"Field#reset","type":"MethodDefinition","paramnames":["value"]},"vars":{"":null}},"description":"<p>Resets the field to a new value or null</p>\n","params":[{"type":{"names":["*"]},"defaultvalue":null,"name":"value"}],"name":"reset","longname":"Field#reset","kind":"function","memberof":"Field","scope":"instance","$longname":"Field#reset","$kind":"method","id":2488,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n     * Checks for client-side field errors\n     * @param {Boolean} silent=true\n     * @returns {Boolean} Returns true in case there are no client-side errors\n     */","meta":{"range":[9796,9845],"filename":"Base.mjs","lineno":373,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{"id":"astnode100075809","name":"Field#validate","type":"MethodDefinition","paramnames":["silent"]},"vars":{"":null}},"description":"<p>Checks for client-side field errors</p>\n","params":[{"type":{"names":["Boolean"]},"defaultvalue":true,"name":"silent"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns true in case there are no client-side errors"}],"name":"validate","longname":"Field#validate","kind":"function","memberof":"Field","scope":"instance","$longname":"Field#validate","$kind":"method","id":2489,"neoClassName":"Neo.form.field.Base"},{"comment":"/**\n * The change event fires after the value config gets changed\n * @event change\n * @param {*} value\n * @param {*} oldValue\n * @returns {Object}\n */","meta":{"filename":"Base.mjs","lineno":378,"columnno":0,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form/field","code":{}},"description":"<p>The change event fires after the value config gets changed</p>\n","kind":"event","name":"change","params":[{"type":{"names":["*"]},"name":"value"},{"type":{"names":["*"]},"name":"oldValue"}],"returns":[{"type":{"names":["Object"]}}],"longname":"event:change","scope":"global","$longname":"event:change","$kind":"event","id":2490,"neoClassName":"Neo.form.field.Base"}]}