{"classData":[{"comment":"/**\n * The base module to enhance classes, create instances and the Neo namespace\n * @module Neo\n * @singleton\n * @borrows Neo.core.Util.bindMethods       as bindMethods\n * @borrows Neo.core.Util.createStyleObject as createStyleObject\n * @borrows Neo.core.Util.createStyles      as createStyles\n * @borrows Neo.core.Util.decamel           as decamel\n * @borrows Neo.core.Util.isArray           as isArray\n * @borrows Neo.core.Util.isBoolean         as isBoolean\n * @borrows Neo.core.Util.isDefined         as isDefined\n * @borrows Neo.core.Compare.isEqual        as isEqual\n * @borrows Neo.core.Util.isNumber          as isNumber\n * @borrows Neo.core.Util.isObject          as isObject\n * @borrows Neo.core.Util.isString          as isString\n * @borrows Neo.core.Util.toArray           as toArray\n * @tutorial 01_Concept\n */","meta":{"filename":"Neo.mjs","lineno":49,"columnno":0,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src","code":{}},"description":"<p>The base module to enhance classes, create instances and the Neo namespace</p>\n","kind":"module","name":"Neo","tags":[{"originalTitle":"singleton","title":"singleton","text":""},{"originalTitle":"tutorial","title":"tutorial","text":"01_Concept","value":"01_Concept"}],"longname":"module:Neo","$longname":"Neo","$kind":"module","id":4474,"neoClassName":"Neo"},{"comment":"/**\n     * A map containing ntypes as key and Neo classes or singletons as values\n     * @memberOf! module:Neo\n     * @protected\n     * @type Object\n     */","meta":{"range":[2552,2564],"filename":"Neo.mjs","lineno":82,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src","code":{"id":"astnode100135905","name":"ntypeMap","type":"ObjectExpression","value":"{}"}},"description":"<p>A map containing ntypes as key and Neo classes or singletons as values</p>\n","memberof":"module:Neo","access":"protected","type":{"names":["Object"]},"name":"ntypeMap","longname":"module:Neo.ntypeMap","kind":"member","scope":"static","$longname":"Neo.ntypeMap","$kind":"property","id":4475,"neoClassName":"Neo"},{"comment":"/**\n     * Needed for Neo.create. False for the main thread, true for the App, Data & Vdom worker\n     * @memberOf! module:Neo\n     * @protected\n     * @type Boolean\n     */","meta":{"range":[2748,2855],"filename":"Neo.mjs","lineno":89,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src","code":{"id":"astnode100135907","name":"insideWorker","type":"LogicalExpression","value":""}},"description":"<p>Needed for Neo.create. False for the main thread, true for the App, Data &amp; Vdom worker</p>\n","memberof":"module:Neo","access":"protected","type":{"names":["Boolean"]},"name":"insideWorker","longname":"module:Neo.insideWorker","kind":"member","scope":"static","$longname":"Neo.insideWorker","$kind":"property","id":4476,"neoClassName":"Neo"},{"comment":"/**\n     * Maps methods from one namespace to another one\n     * @example\n     * // aliases\n     * Neo.applyFromNs(Neo, Util, {\n     *     createStyleObject: 'createStyleObject',\n     *     createStyles     : 'createStyles',\n     *     capitalize       : 'capitalize'\n     * }, true);\n     *\n     * // e.g. Neo.core.Util.isObject => Neo.isObject\n     * @memberOf module:Neo\n     * @param {Neo|Neo.core.Base} target    The target class or singleton Instance or Neo\n     * @param {Neo.core.Base}     namespace The class containing the methods\n     * @param {Object}            config\n     * @param {Boolean}           [bind]    set this to true in case you want to bind methods to the \"from\" namespace\n     * @returns {Object} target\n     */","meta":{"range":[3606,3959],"filename":"Neo.mjs","lineno":103,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src","code":{"id":"astnode100135917","name":"applyFromNs","type":"FunctionExpression"},"vars":{"fnName":"module:Neo.applyFromNs~fnName","":null}},"description":"<p>Maps methods from one namespace to another one</p>\n","examples":["// aliases\nNeo.applyFromNs(Neo, Util, {\n    createStyleObject: 'createStyleObject',\n    createStyles     : 'createStyles',\n    capitalize       : 'capitalize'\n}, true);\n\n// e.g. Neo.core.Util.isObject => Neo.isObject"],"memberof":"module:Neo","params":[{"type":{"names":["Neo","Neo.core.Base"]},"description":"<p>The target class or singleton Instance or Neo</p>\n","name":"target"},{"type":{"names":["Neo.core.Base"]},"description":"<p>The class containing the methods</p>\n","name":"namespace"},{"type":{"names":["Object"]},"name":"config"},{"type":{"names":["Boolean"]},"optional":true,"description":"<p>set this to true in case you want to bind methods to the &quot;from&quot; namespace</p>\n","name":"bind"}],"returns":[{"type":{"names":["Object"]},"description":"target"}],"name":"applyFromNs","longname":"module:Neo.applyFromNs","kind":"function","scope":"static","$longname":"Neo.applyFromNs","$kind":"method","id":4477,"neoClassName":"Neo"},{"comment":"/**\n     * Maps a class to the global Neo or App namespace.\n     * Can get called for classes and singleton instances\n     * @memberOf module:Neo\n     * @param {Neo.core.Base} cls\n     */","meta":{"range":[4158,4496],"filename":"Neo.mjs","lineno":122,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src","code":{"id":"astnode100135971","name":"applyToGlobalNs","type":"FunctionExpression"},"vars":{"proto":"module:Neo.applyToGlobalNs~proto","className":"module:Neo.applyToGlobalNs~className","nsArray":"module:Neo.applyToGlobalNs~nsArray","key":"module:Neo.applyToGlobalNs~key","ns":"module:Neo.applyToGlobalNs~ns","ns[undefined]":"module:Neo~ns[undefined]"}},"description":"<p>Maps a class to the global Neo or App namespace.\nCan get called for classes and singleton instances</p>\n","memberof":"module:Neo","params":[{"type":{"names":["Neo.core.Base"]},"name":"cls"}],"name":"applyToGlobalNs","longname":"module:Neo.applyToGlobalNs","kind":"function","scope":"static","$longname":"Neo.applyToGlobalNs","$kind":"method","id":4478,"neoClassName":"Neo"},{"comment":"/**\n     * Copies all keys of defaults into target, in case they don't already exist\n     * @memberOf module:Neo\n     * @param {Object} target   The target object\n     * @param {Object} defaults The object containing the keys you want to copy\n     * @returns {Object} target\n     */","meta":{"range":[4790,5111],"filename":"Neo.mjs","lineno":139,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src","code":{"id":"astnode100136028","name":"assignDefaults","type":"FunctionExpression"},"vars":{"":null}},"description":"<p>Copies all keys of defaults into target, in case they don&#39;t already exist</p>\n","memberof":"module:Neo","params":[{"type":{"names":["Object"]},"description":"<p>The target object</p>\n","name":"target"},{"type":{"names":["Object"]},"description":"<p>The object containing the keys you want to copy</p>\n","name":"defaults"}],"returns":[{"type":{"names":["Object"]},"description":"target"}],"name":"assignDefaults","longname":"module:Neo.assignDefaults","kind":"function","scope":"static","$longname":"Neo.assignDefaults","$kind":"method","id":4479,"neoClassName":"Neo"},{"comment":"/**\n     * Assigns a new value to a given nested objects path.\n     * It will create the path structure or parts of it, in case it does not exist.\n     * @example\n     * Neo.assignToNs('annotations.selected', false, record)\n     *\n     * @memberOf module:Neo\n     * @param {String[]|String} path             The path string containing dots or an Array of the string parts\n     * @param {*}               value            The new value to assign to the leaf node\n     * @param {Object}          scope=globalThis Set a different starting point as globalThis\n     * @param {Boolean}         force=true       false will only assign default values (assign if old value === undefined)\n     */","meta":{"range":[5809,6200],"filename":"Neo.mjs","lineno":163,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src","code":{"id":"astnode100136073","name":"assignToNs","type":"FunctionExpression"},"vars":{"path":"module:Neo~path","key":"module:Neo~key","scope":"module:Neo~scope","scope[undefined]":"module:Neo~scope.undefined]"}},"description":"<p>Assigns a new value to a given nested objects path.\nIt will create the path structure or parts of it, in case it does not exist.</p>\n","examples":["Neo.assignToNs('annotations.selected', false, record)"],"memberof":"module:Neo","params":[{"type":{"names":["Array.<String>","String"]},"description":"<p>The path string containing dots or an Array of the string parts</p>\n","name":"path"},{"type":{"names":["*"]},"description":"<p>The new value to assign to the leaf node</p>\n","name":"value"},{"type":{"names":["Object"]},"defaultvalue":"globalThis","description":"<p>Set a different starting point as globalThis</p>\n","name":"scope"},{"type":{"names":["Boolean"]},"defaultvalue":true,"description":"<p>false will only assign default values (assign if old value === undefined)</p>\n","name":"force"}],"name":"assignToNs","longname":"module:Neo.assignToNs","kind":"function","scope":"static","$longname":"Neo.assignToNs","$kind":"method","id":4480,"neoClassName":"Neo"},{"comment":"/**\n     * Converts kebab-case strings into camel-case\n     * @memberOf module:Neo\n     * @param {String} value The target object\n     * @returns {String}\n     */","meta":{"range":[6374,6468],"filename":"Neo.mjs","lineno":186,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src","code":{"id":"astnode100136146","name":"camel","type":"FunctionExpression"},"vars":{"":null}},"description":"<p>Converts kebab-case strings into camel-case</p>\n","memberof":"module:Neo","params":[{"type":{"names":["String"]},"description":"<p>The target object</p>\n","name":"value"}],"returns":[{"type":{"names":["String"]}}],"name":"camel","longname":"module:Neo.camel","kind":"function","scope":"static","$longname":"Neo.camel","$kind":"method","id":4481,"neoClassName":"Neo"},{"comment":"/**\n     * Makes the first character of a string uppercase\n     * @memberOf module:Neo\n     * @param {String} value\n     * @returns {Boolean|String} Returns false for non string inputs\n     */","meta":{"range":[6672,6752],"filename":"Neo.mjs","lineno":196,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src","code":{"id":"astnode100136164","name":"capitalize","type":"FunctionExpression"}},"description":"<p>Makes the first character of a string uppercase</p>\n","memberof":"module:Neo","params":[{"type":{"names":["String"]},"name":"value"}],"returns":[{"type":{"names":["Boolean","String"]},"description":"Returns false for non string inputs"}],"name":"capitalize","longname":"module:Neo.capitalize","kind":"function","scope":"static","$longname":"Neo.capitalize","$kind":"method","id":4482,"neoClassName":"Neo"},{"comment":"/**\n     * @memberOf module:Neo\n     * @param {Object|Array|*} obj\n     * @param {Boolean} deep=false               Set this to true in case you want to clone nested objects as well\n     * @param {Boolean} ignoreNeoInstances=false returns existing instances if set to true\n     * @returns {Object|Array|*} the cloned input\n     */","meta":{"range":[7094,7231],"filename":"Neo.mjs","lineno":207,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src","code":{"id":"astnode100136181","name":"clone","type":"FunctionExpression"}},"memberof":"module:Neo","params":[{"type":{"names":["Object","Array","*"]},"name":"obj"},{"type":{"names":["Boolean"]},"defaultvalue":false,"description":"<p>Set this to true in case you want to clone nested objects as well</p>\n","name":"deep"},{"type":{"names":["Boolean"]},"defaultvalue":false,"description":"<p>returns existing instances if set to true</p>\n","name":"ignoreNeoInstances"}],"returns":[{"type":{"names":["Object","Array","*"]},"description":"the cloned input"}],"name":"clone","longname":"module:Neo.clone","kind":"function","scope":"static","$longname":"Neo.clone","$kind":"method","id":4483,"neoClassName":"Neo"},{"comment":"/**\n     * Creates a new instance using the originalConfig without the id\n     * @memberOf module:Neo\n     * @param {Neo.core.Base} instance\n     * @returns {Neo.core.Base} the cloned instance\n     */","meta":{"range":[7443,7637],"filename":"Neo.mjs","lineno":217,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src","code":{"id":"astnode100136195","name":"cloneNeoInstance","type":"FunctionExpression"},"vars":{"config":"module:Neo.cloneNeoInstance~config"}},"description":"<p>Creates a new instance using the originalConfig without the id</p>\n","memberof":"module:Neo","params":[{"type":{"names":["Neo.core.Base"]},"name":"instance"}],"returns":[{"type":{"names":["Neo.core.Base"]},"description":"the cloned instance"}],"name":"cloneNeoInstance","longname":"module:Neo.cloneNeoInstance","kind":"function","scope":"static","$longname":"Neo.cloneNeoInstance","$kind":"method","id":4484,"neoClassName":"Neo"},{"comment":"/**\n     * Use Neo.create() instead of \"new\" to create instances of all Neo classes\n     * @example\n     * import Button from '../button/Base.mjs';\n     *\n     * Neo.create(Button, {\n     *     iconCls: 'fa fa-home',\n     *     text   : 'Home'\n     * });\n     * @example\n     * import Button from '../button/Base.mjs';\n     *\n     * Neo.create({\n     *     module : Button,\n     *     iconCls: 'fa fa-home',\n     *     text   : 'Home'\n     * });\n     * @example\n     * Neo.create('Neo.button.Base' {\n     *     iconCls: 'fa fa-home',\n     *     text   : 'Home'\n     * });\n     * @example\n     * Neo.create({\n     *     className: 'Neo.button.Base',\n     *     iconCls  : 'fa fa-home',\n     *     text     : 'Home'\n     * });\n     * @memberOf module:Neo\n     * @param {String|Object|Neo.core.Base} className\n     * @param {Object}                      [config]\n     * @returns {Neo.core.Base|null} The new class instance\n     * @tutorial 02_ClassSystem\n     */","meta":{"range":[8608,9645],"filename":"Neo.mjs","lineno":260,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src","code":{"id":"astnode100136226","name":"create","type":"FunctionExpression"},"vars":{"type":"module:Neo.create~type","cls":"module:Neo~cls","instance":"module:Neo~instance","config":"module:Neo~config","className":"module:Neo~className"}},"description":"<p>Use Neo.create() instead of &quot;new&quot; to create instances of all Neo classes</p>\n","examples":["import Button from '../button/Base.mjs';\n\nNeo.create(Button, {\n    iconCls: 'fa fa-home',\n    text   : 'Home'\n});","import Button from '../button/Base.mjs';\n\nNeo.create({\n    module : Button,\n    iconCls: 'fa fa-home',\n    text   : 'Home'\n});","Neo.create('Neo.button.Base' {\n    iconCls: 'fa fa-home',\n    text   : 'Home'\n});","Neo.create({\n    className: 'Neo.button.Base',\n    iconCls  : 'fa fa-home',\n    text     : 'Home'\n});"],"memberof":"module:Neo","params":[{"type":{"names":["String","Object","Neo.core.Base"]},"name":"className"},{"type":{"names":["Object"]},"optional":true,"name":"config"}],"returns":[{"type":{"names":["Neo.core.Base","null"]},"description":"The new class instance"}],"tags":[{"originalTitle":"tutorial","title":"tutorial","text":"02_ClassSystem","value":"02_ClassSystem"}],"name":"create","longname":"module:Neo.create","kind":"function","scope":"static","$longname":"Neo.create","$kind":"method","id":4485,"neoClassName":"Neo"},{"comment":"/**\n     * Defines a reactive configuration property on a target object (prototype or instance).\n     * This method creates getters and setters that fully participate in Neo.mjs's reactive config system,\n     * including lifecycle hooks.\n     *\n     * @param {Neo.core.Base}  target        - The instance or prototype on which to define the config.\n     * @param {String}         key           - The name of the config property (without the '_' suffix).\n     * @param {*}             [initialValue] - The initial value for the config.\n     */","meta":{"range":[10199,16432],"filename":"Neo.mjs","lineno":305,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src","code":{"id":"astnode100136346","name":"createConfig","type":"FunctionExpression"},"vars":{"_key":"module:Neo~createConfig~_key","uKey":"module:Neo~createConfig~uKey","beforeGet":"module:Neo~createConfig~beforeGet","beforeSet":"module:Neo~createConfig~beforeSet","afterSet":"module:Neo~createConfig~afterSet","Neo[undefined]":"module:Neo~Neo.undefined]","Neo[undefined][undefined]":"module:Neo~Neo.undefined][undefined]","":null,"target[undefined]":"module:Neo~target[undefined]"}},"description":"<p>Defines a reactive configuration property on a target object (prototype or instance).\nThis method creates getters and setters that fully participate in Neo.mjs&#39;s reactive config system,\nincluding lifecycle hooks.</p>\n","params":[{"type":{"names":["Neo.core.Base"]},"description":"<p>The instance or prototype on which to define the config.</p>\n","name":"target"},{"type":{"names":["String"]},"description":"<p>The name of the config property (without the &#39;_&#39; suffix).</p>\n","name":"key"},{"type":{"names":["*"]},"optional":true,"description":"<p>The initial value for the config.</p>\n","name":"initialValue"}],"name":"createConfig","longname":"module:Neo~createConfig","kind":"function","scope":"inner","memberof":"module:Neo","$longname":"Neo~createConfig","$kind":"method","id":4486,"neoClassName":"Neo"},{"comment":"/**\n     *\n     */","meta":{"range":[16462,16474],"filename":"Neo.mjs","lineno":453,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src","code":{"id":"astnode100136812","name":"emptyFn","type":"FunctionExpression"}},"name":"emptyFn","longname":"module:Neo~emptyFn","kind":"function","scope":"inner","memberof":"module:Neo","$longname":"Neo~emptyFn","$kind":"method","id":4487,"neoClassName":"Neo"},{"comment":"/**\n     * Ensures a class is assigned to the Neo namespace only once, preventing duplicates.\n     * This is a lightweight version of `Neo.setupClass` for simple classes\n     * that do not extend `Neo.core.Base`.\n     * It follows a \"first one wins\" strategy.\n     *\n     * @param {Function|Object} module    - The class constructor or singleton object to register.\n     * @param {String}          classPath - The fully qualified name (e.g., 'Neo.core.Config').\n     * @param {Function}       [onFirst]  - An optional callback that runs only the first time the class is registered.\n     * @returns {Function|Object} The class or singleton from the Neo namespace (either the existing one or the newly set one).\n     */","meta":{"range":[17203,17626],"filename":"Neo.mjs","lineno":466,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src","code":{"id":"astnode100136815","name":"gatekeep","type":"FunctionExpression"},"vars":{"existingClass":"module:Neo~gatekeep~existingClass","nsArray":"module:Neo~gatekeep~nsArray","className":"module:Neo~gatekeep~className","parentNs":"module:Neo~gatekeep~parentNs","parentNs[undefined]":"module:Neo~gatekeep~parentNs.undefined]"}},"description":"<p>Ensures a class is assigned to the Neo namespace only once, preventing duplicates.\nThis is a lightweight version of <code>Neo.setupClass</code> for simple classes\nthat do not extend <code>Neo.core.Base</code>.\nIt follows a &quot;first one wins&quot; strategy.</p>\n","params":[{"type":{"names":["function","Object"]},"description":"<p>The class constructor or singleton object to register.</p>\n","name":"module"},{"type":{"names":["String"]},"description":"<p>The fully qualified name (e.g., &#39;Neo.core.Config&#39;).</p>\n","name":"classPath"},{"type":{"names":["function"]},"optional":true,"description":"<p>An optional callback that runs only the first time the class is registered.</p>\n","name":"onFirst"}],"returns":[{"type":{"names":["function","Object"]},"description":"The class or singleton from the Neo namespace (either the existing one or the newly set one)."}],"name":"gatekeep","longname":"module:Neo~gatekeep","kind":"function","scope":"inner","memberof":"module:Neo","$longname":"Neo~gatekeep","$kind":"method","id":4488,"neoClassName":"Neo"},{"comment":"/**\n     * Checks if there is a set method for a given property key inside the prototype chain\n     * @memberOf module:Neo\n     * @param {Neo.core.Base} proto The top level prototype of a class\n     * @param {String}        key   The property key to test\n     * @returns {Boolean}\n     */","meta":{"range":[17926,18294],"filename":"Neo.mjs","lineno":492,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src","code":{"id":"astnode100136869","name":"hasPropertySetter","type":"FunctionExpression"},"vars":{"descriptor":"module:Neo~descriptor","proto":"module:Neo~proto"}},"description":"<p>Checks if there is a set method for a given property key inside the prototype chain</p>\n","memberof":"module:Neo","params":[{"type":{"names":["Neo.core.Base"]},"description":"<p>The top level prototype of a class</p>\n","name":"proto"},{"type":{"names":["String"]},"description":"<p>The property key to test</p>\n","name":"key"}],"returns":[{"type":{"names":["Boolean"]}}],"name":"hasPropertySetter","longname":"module:Neo.hasPropertySetter","kind":"function","scope":"static","$longname":"Neo.hasPropertySetter","$kind":"method","id":4489,"neoClassName":"Neo"},{"comment":"/**\n     * Deep-merges a source object into a target object\n     * @memberOf module:Neo\n     * @param {Object} target\n     * @param {Object} source\n     * @param {Object} defaults\n     * @returns {Object} target\n     */","meta":{"range":[18525,19021],"filename":"Neo.mjs","lineno":516,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src","code":{"id":"astnode100136914","name":"merge","type":"FunctionExpression"},"vars":{"key":"module:Neo.merge~key","value":"module:Neo.merge~value","target[undefined]":"module:Neo~target[undefined]"}},"description":"<p>Deep-merges a source object into a target object</p>\n","memberof":"module:Neo","params":[{"type":{"names":["Object"]},"name":"target"},{"type":{"names":["Object"]},"name":"source"},{"type":{"names":["Object"]},"name":"defaults"}],"returns":[{"type":{"names":["Object"]},"description":"target"}],"name":"merge","longname":"module:Neo.merge","kind":"function","scope":"static","$longname":"Neo.merge","$kind":"method","id":4490,"neoClassName":"Neo"},{"comment":"/**\n     * Merges a new value into an existing config value based on a specified strategy.\n     * This method is used during instance creation to apply merge strategies defined in config descriptors.\n     * @param {any} defaultValue - The default value of the config (from static config).\n     * @param {any} instanceValue - The value provided during instance creation.\n     * @param {string|Function} strategy - The merge strategy: 'shallow', 'deep', 'replace', or a custom function.\n     * @returns {any} The merged value.\n     */","meta":{"range":[19565,20382],"filename":"Neo.mjs","lineno":546,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src","code":{"id":"astnode100136986","name":"mergeConfig","type":"FunctionExpression"},"vars":{"defaultValueType":"module:Neo~mergeConfig~defaultValueType","instanceValueType":"module:Neo~mergeConfig~instanceValueType"}},"description":"<p>Merges a new value into an existing config value based on a specified strategy.\nThis method is used during instance creation to apply merge strategies defined in config descriptors.</p>\n","params":[{"type":{"names":["any"]},"description":"<p>The default value of the config (from static config).</p>\n","name":"defaultValue"},{"type":{"names":["any"]},"description":"<p>The value provided during instance creation.</p>\n","name":"instanceValue"},{"type":{"names":["string","function"]},"description":"<p>The merge strategy: &#39;shallow&#39;, &#39;deep&#39;, &#39;replace&#39;, or a custom function.</p>\n","name":"strategy"}],"returns":[{"type":{"names":["any"]},"description":"The merged value."}],"name":"mergeConfig","longname":"module:Neo~mergeConfig","kind":"function","scope":"inner","memberof":"module:Neo","$longname":"Neo~mergeConfig","$kind":"method","id":4491,"neoClassName":"Neo"},{"comment":"/**\n     * Maps a className string into a given or global namespace\n     * @example\n     * Neo.ns('Neo.button.Base', true);\n     * // =>\n     * // globalThis.Neo             = globalThis.Neo             || {};\n     * // globalThis.Neo.button      = globalThis.Neo.button      || {};\n     * // globalThis.Neo.button.Base = globalThis.Neo.button.Base || {};\n     * // return globalThis.Neo.button.Base;\n     *\n     * @memberOf module:Neo\n     * @param {String[]|String} names        The class name string containing dots or an Array of the string parts\n     * @param {Boolean}         create=false Set create to true to create empty objects for non-existing parts\n     * @param {Object}          [scope]      Set a different starting point as globalThis\n     * @returns {Object} reference to the toplevel namespace\n     */","meta":{"range":[21214,21568],"filename":"Neo.mjs","lineno":583,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src","code":{"id":"astnode100137066","name":"ns","type":"FunctionExpression"},"vars":{"names":"module:Neo~names","":null}},"description":"<p>Maps a className string into a given or global namespace</p>\n","examples":["Neo.ns('Neo.button.Base', true);\n// =>\n// globalThis.Neo             = globalThis.Neo             || {};\n// globalThis.Neo.button      = globalThis.Neo.button      || {};\n// globalThis.Neo.button.Base = globalThis.Neo.button.Base || {};\n// return globalThis.Neo.button.Base;"],"memberof":"module:Neo","params":[{"type":{"names":["Array.<String>","String"]},"description":"<p>The class name string containing dots or an Array of the string parts</p>\n","name":"names"},{"type":{"names":["Boolean"]},"defaultvalue":false,"description":"<p>Set create to true to create empty objects for non-existing parts</p>\n","name":"create"},{"type":{"names":["Object"]},"optional":true,"description":"<p>Set a different starting point as globalThis</p>\n","name":"scope"}],"returns":[{"type":{"names":["Object"]},"description":"reference to the toplevel namespace"}],"name":"ns","longname":"module:Neo.ns","kind":"function","scope":"static","$longname":"Neo.ns","$kind":"method","id":4492,"neoClassName":"Neo"},{"comment":"/**\n     * Extended version of Neo.ns() which supports mapping into arrays.\n     * @memberOf module:Neo\n     * @param {Array|String} names        The class name string containing dots or an Array of the string parts\n     * @param {Boolean}      create=false Set create to true to create empty objects for non-existing parts\n     * @param {Object}       [scope]      Set a different starting point as globalThis\n     * @returns {Object} reference to the toplevel namespace\n     */","meta":{"range":[22059,22676],"filename":"Neo.mjs","lineno":605,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src","code":{"id":"astnode100137122","name":"nsWithArrays","type":"FunctionExpression"},"vars":{"names":"module:Neo~names","":null}},"description":"<p>Extended version of Neo.ns() which supports mapping into arrays.</p>\n","memberof":"module:Neo","params":[{"type":{"names":["Array","String"]},"description":"<p>The class name string containing dots or an Array of the string parts</p>\n","name":"names"},{"type":{"names":["Boolean"]},"defaultvalue":false,"description":"<p>Set create to true to create empty objects for non-existing parts</p>\n","name":"create"},{"type":{"names":["Object"]},"optional":true,"description":"<p>Set a different starting point as globalThis</p>\n","name":"scope"}],"returns":[{"type":{"names":["Object"]},"description":"reference to the toplevel namespace"}],"name":"nsWithArrays","longname":"module:Neo.nsWithArrays","kind":"function","scope":"static","$longname":"Neo.nsWithArrays","$kind":"method","id":4493,"neoClassName":"Neo"},{"comment":"/**\n     * Creates instances of Neo classes using their ntype instead of the class name\n     * @example\n     * Neo.ntype('button' {\n     *     iconCls: 'fa fa-home',\n     *     text   : 'Home'\n     * });\n     * @example\n     * Neo.ntype({\n     *     ntype  : 'button',\n     *     iconCls: 'fa fa-home',\n     *     text   : 'Home'\n     * });\n     * @memberOf module:Neo\n     * @param {String|Object} ntype\n     * @param {Object}        [config]\n     * @returns {Neo.core.Base}\n     * @see {@link module:Neo.create create}\n     */","meta":{"range":[23216,23715],"filename":"Neo.mjs","lineno":646,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src","code":{"id":"astnode100137204","name":"ntype","type":"FunctionExpression"},"vars":{"config":"module:Neo~config","ntype":"module:Neo~ntype","className":"module:Neo.ntype~className"}},"description":"<p>Creates instances of Neo classes using their ntype instead of the class name</p>\n","examples":["Neo.ntype('button' {\n    iconCls: 'fa fa-home',\n    text   : 'Home'\n});","Neo.ntype({\n    ntype  : 'button',\n    iconCls: 'fa fa-home',\n    text   : 'Home'\n});"],"memberof":"module:Neo","params":[{"type":{"names":["String","Object"]},"name":"ntype"},{"type":{"names":["Object"]},"optional":true,"name":"config"}],"returns":[{"type":{"names":["Neo.core.Base"]}}],"see":["{@link module:Neo.create create}"],"name":"ntype","longname":"module:Neo.ntype","kind":"function","scope":"static","$longname":"Neo.ntype","$kind":"method","id":4494,"neoClassName":"Neo"},{"comment":"/**\n     * This is the final and most critical step in the Neo.mjs class creation process.\n     * It is called at the end of every class module definition.\n     *\n     * `setupClass` performs several key operations:\n     * 1.  **Mixed-Environment Gatekeeper:** It first checks if the class's namespace already exists.\n     *     If it does, it immediately returns the existing class. This is the crucial \"first comes wins\"\n     *     strategy that enables Neo.mjs to safely combine environments. For example, a bundled\n     *     `dist/production` app can dynamically load an unbundled module from `dist/esm` at runtime.\n     *     If that module imports a class already present in the main bundle, this check ensures the\n     *     original, bundled class is used, preventing conflicts and maintaining application integrity.\n     * 1.  **Configuration Merging:** It traverses the prototype chain to merge `static config`\n     *     objects from parent classes into the current class, creating a unified `config`.\n     * 2.  **Applying Overwrites:** It calls the static `applyOverwrites()` method on the class,\n     *     allowing the global `Neo.overwrites` object to modify the class's default prototype\n     *     configs. This is a key mechanism for external theming and configuration.\n     * 3.  **Reactive Getter/Setter Generation:** For any config ending with an underscore (e.g., `myConfig_`),\n     *     it automatically generates the corresponding public getter and setter. This enables optional\n     *     lifecycle hooks that are called automatically if implemented on the class:\n     *     - `beforeGetMyConfig(value)`\n     *     - `beforeSetMyConfig(newValue, oldValue)`\n     *     - `afterSetMyConfig(newValue, oldValue)`\n     * 4.  **Prototype-based Configs:** Non-reactive configs (without an underscore) are set\n     *     directly on the prototype for memory efficiency.\n     * 5.  **Mixin Application:** It processes the `mixins` config to blend in functionality from\n     *     other classes.\n     * 6.  **Namespace Registration:** It registers the class in the global `Neo` namespace.\n     * 7.  **Singleton Instantiation:** If the class is configured as a singleton, it creates the\n     *     single instance.\n     *\n     * @memberOf module:Neo\n     * @template T\n     * @param {T} cls The class constructor to process.\n     * @returns {T} The processed and finalized class constructor or singleton instance.\n     */","meta":{"range":[26166,33962],"filename":"Neo.mjs","lineno":701,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src","code":{"id":"astnode100137266","name":"setupClass","type":"FunctionExpression"},"vars":{"baseConfig":"module:Neo~baseConfig","baseConfigDescriptors":"module:Neo~baseConfigDescriptors","ntypeChain":"module:Neo~ntypeChain","undefined":null,"proto":"module:Neo~proto","ns":"module:Neo.setupClass~ns","protos":"module:Neo.setupClass~protos","cfg":"module:Neo.setupClass~cfg","config":"module:Neo~config","configDescriptors":"module:Neo~configDescriptors","ctor":"module:Neo~ctor","hierarchyInfo":"module:Neo~hierarchyInfo","ntype":"module:Neo.setupClass~ntype","":null,"cls":"module:Neo~cls","Neo.classHierarchyMap":"module:Neo~Neo.classHierarchyMap","Neo.classHierarchyMap[undefined]":"module:Neo~Neo.classHierarchyMap[undefined]"}},"description":"<p>This is the final and most critical step in the Neo.mjs class creation process.\nIt is called at the end of every class module definition.</p>\n<p><code>setupClass</code> performs several key operations:</p>\n<ol>\n<li><strong>Mixed-Environment Gatekeeper:</strong> It first checks if the class&#39;s namespace already exists.\nIf it does, it immediately returns the existing class. This is the crucial &quot;first comes wins&quot;\nstrategy that enables Neo.mjs to safely combine environments. For example, a bundled\n<code>dist/production</code> app can dynamically load an unbundled module from <code>dist/esm</code> at runtime.\nIf that module imports a class already present in the main bundle, this check ensures the\noriginal, bundled class is used, preventing conflicts and maintaining application integrity.</li>\n<li><strong>Configuration Merging:</strong> It traverses the prototype chain to merge <code>static config</code>\nobjects from parent classes into the current class, creating a unified <code>config</code>.</li>\n<li><strong>Applying Overwrites:</strong> It calls the static <code>applyOverwrites()</code> method on the class,\nallowing the global <code>Neo.overwrites</code> object to modify the class&#39;s default prototype\nconfigs. This is a key mechanism for external theming and configuration.</li>\n<li><strong>Reactive Getter/Setter Generation:</strong> For any config ending with an underscore (e.g., <code>myConfig_</code>),\nit automatically generates the corresponding public getter and setter. This enables optional\nlifecycle hooks that are called automatically if implemented on the class:<ul>\n<li><code>beforeGetMyConfig(value)</code></li>\n<li><code>beforeSetMyConfig(newValue, oldValue)</code></li>\n<li><code>afterSetMyConfig(newValue, oldValue)</code></li>\n</ul>\n</li>\n<li><strong>Prototype-based Configs:</strong> Non-reactive configs (without an underscore) are set\ndirectly on the prototype for memory efficiency.</li>\n<li><strong>Mixin Application:</strong> It processes the <code>mixins</code> config to blend in functionality from\nother classes.</li>\n<li><strong>Namespace Registration:</strong> It registers the class in the global <code>Neo</code> namespace.</li>\n<li><strong>Singleton Instantiation:</strong> If the class is configured as a singleton, it creates the\nsingle instance.</li>\n</ol>\n","memberof":"module:Neo","params":[{"type":{"names":["T"]},"description":"<p>The class constructor to process.</p>\n","name":"cls"}],"returns":[{"type":{"names":["T"]},"description":"The processed and finalized class constructor or singleton instance."}],"name":"setupClass","longname":"module:Neo.setupClass","kind":"function","scope":"static","$longname":"Neo.setupClass","$kind":"method","id":4495,"neoClassName":"Neo"},{"comment":"/**\n     * @param {*} item\n     * @returns {String|null}\n     */","meta":{"range":[34038,34241],"filename":"Neo.mjs","lineno":893,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src","code":{"id":"astnode100137938","name":"typeOf","type":"FunctionExpression"}},"params":[{"type":{"names":["*"]},"name":"item"}],"returns":[{"type":{"names":["String","null"]}}],"name":"typeOf","longname":"module:Neo~typeOf","kind":"function","scope":"inner","memberof":"module:Neo","$longname":"Neo~typeOf","$kind":"method","id":4496,"neoClassName":"Neo"},{"comment":"/**\n * List of class properties which are not supposed to get mixed into other classes\n * @type {string[]}\n * @private\n */","meta":{"range":[34381,34541],"filename":"Neo.mjs","lineno":908,"columnno":6,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src","code":{"id":"astnode100137955","name":"ignoreMixin","type":"ArrayExpression","value":"[\"_name\",\"classConfigApplied\",\"className\",\"constructor\",\"id\",\"isClass\",\"mixin\",\"ntype\",\"observable\"]"}},"description":"<p>List of class properties which are not supposed to get mixed into other classes</p>\n","type":{"names":["Array.<string>"]},"access":"private","name":"ignoreMixin","longname":"module:Neo~ignoreMixin","kind":"constant","scope":"inner","memberof":"module:Neo","params":[],"$longname":"Neo~ignoreMixin","$kind":"constant","id":4497,"neoClassName":"Neo"},{"comment":"/**\n * @param {Neo.core.Base} cls\n * @param {Array}         mixins\n * @param {Object}        classConfig\n * @private\n */","meta":{"range":[34761,35762],"filename":"Neo.mjs","lineno":929,"columnno":0,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src","code":{"id":"astnode100137973","name":"applyMixins","type":"FunctionDeclaration","paramnames":["cls","mixins","classConfig"]},"vars":{"mixins":"module:Neo~mixins","i":"module:Neo~applyMixins~i","len":"module:Neo~applyMixins~len","mixinClasses":"module:Neo~applyMixins~mixinClasses","mixin":"module:Neo~mixin","mixinCls":"module:Neo~mixinCls","mixinProto":"module:Neo~mixinProto","cls.prototype.mixins":"module:Neo~cls#mixins"}},"params":[{"type":{"names":["Neo.core.Base"]},"name":"cls"},{"type":{"names":["Array"]},"name":"mixins"},{"type":{"names":["Object"]},"name":"classConfig"}],"access":"private","name":"applyMixins","longname":"module:Neo~applyMixins","kind":"function","scope":"inner","memberof":"module:Neo","$longname":"Neo~applyMixins","$kind":"method","id":4498,"neoClassName":"Neo"},{"comment":"/**\n * @param {Boolean} create\n * @param {Object}  current\n * @param {Object}  prev\n * @returns {Object|undefined}\n */","meta":{"range":[35883,36463],"filename":"Neo.mjs","lineno":968,"columnno":0,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src","code":{"id":"astnode100138122","name":"createArrayNs","type":"FunctionDeclaration","paramnames":["create","current","prev"]},"vars":{"arrDetails":"module:Neo~createArrayNs~arrDetails","i":"module:Neo~createArrayNs~i","len":"module:Neo~createArrayNs~len","arrItem":"module:Neo~arrItem","arrRoot":"module:Neo~arrRoot","prev[undefined]":"module:Neo~prev[undefined]","arrRoot[undefined]":"module:Neo~arrRoot.undefined]"}},"params":[{"type":{"names":["Boolean"]},"name":"create"},{"type":{"names":["Object"]},"name":"current"},{"type":{"names":["Object"]},"name":"prev"}],"returns":[{"type":{"names":["Object","undefined"]}}],"name":"createArrayNs","longname":"module:Neo~createArrayNs","kind":"function","scope":"inner","memberof":"module:Neo","$longname":"Neo~createArrayNs","$kind":"method","id":4499,"neoClassName":"Neo"},{"comment":"/**\n * Checks if the class name exists inside the Neo or app namespace\n * @param {String} className\n * @returns {Boolean}\n * @private\n */","meta":{"range":[36603,36809],"filename":"Neo.mjs","lineno":1001,"columnno":0,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src","code":{"id":"astnode100138214","name":"exists","type":"FunctionDeclaration","paramnames":["className"]},"vars":{"":null}},"description":"<p>Checks if the class name exists inside the Neo or app namespace</p>\n","params":[{"type":{"names":["String"]},"name":"className"}],"returns":[{"type":{"names":["Boolean"]}}],"access":"private","name":"exists","longname":"module:Neo~exists","kind":"function","scope":"inner","memberof":"module:Neo","$longname":"Neo~exists","$kind":"method","id":4500,"neoClassName":"Neo"},{"comment":"/**\n * @param {Neo.core.Base} proto\n * @param {Neo.core.Base} mixinProto\n * @param {Object}        classConfig\n * @returns {Function}\n * @private\n */","meta":{"range":[36961,38321],"filename":"Neo.mjs","lineno":1018,"columnno":0,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src","code":{"id":"astnode100138243","name":"mixinProperty","type":"FunctionDeclaration","paramnames":["proto","mixinProto","classConfig"]},"vars":{"":null}},"params":[{"type":{"names":["Neo.core.Base"]},"name":"proto"},{"type":{"names":["Neo.core.Base"]},"name":"mixinProto"},{"type":{"names":["Object"]},"name":"classConfig"}],"returns":[{"type":{"names":["function"]}}],"access":"private","name":"mixinProperty","longname":"module:Neo~mixinProperty","kind":"function","scope":"inner","memberof":"module:Neo","$longname":"Neo~mixinProperty","$kind":"method","id":4501,"neoClassName":"Neo"},{"comment":"/**\n * @param mixinCls\n * @returns {Function}\n * @private\n */","meta":{"range":[38385,38551],"filename":"Neo.mjs","lineno":1064,"columnno":0,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src","code":{"id":"astnode100138395","name":"mixReduce","type":"FunctionDeclaration","paramnames":["mixinCls"]},"vars":{"":null}},"params":[{"name":"mixinCls"}],"returns":[{"type":{"names":["function"]}}],"access":"private","name":"mixReduce","longname":"module:Neo~mixReduce","kind":"function","scope":"inner","memberof":"module:Neo","$longname":"Neo~mixReduce","$kind":"method","id":4502,"neoClassName":"Neo"},{"comment":"/**\n * @param {String} str\n * @returns {Function}\n * @private\n */","meta":{"range":[38619,38792],"filename":"Neo.mjs","lineno":1075,"columnno":0,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src","code":{"id":"astnode100138425","name":"parseArrayFromString","type":"FunctionDeclaration","paramnames":["str"]},"vars":{"":null}},"params":[{"type":{"names":["String"]},"name":"str"}],"returns":[{"type":{"names":["function"]}}],"access":"private","name":"parseArrayFromString","longname":"module:Neo~parseArrayFromString","kind":"function","scope":"inner","memberof":"module:Neo","$longname":"Neo~parseArrayFromString","$kind":"method","id":4503,"neoClassName":"Neo"}]}