{"classData":[{"comment":"/**\n * A singleton class responsible for processing HtmlTemplate objects.\n * The core challenge is to convert a tagged template literal (which is just strings and values)\n * into a valid Neo.mjs VDOM structure. This requires several steps:\n * 1. Flattening nested templates into a single string with placeholders.\n * 2. Using a robust HTML parser (`parse5`) to create an Abstract Syntax Tree (AST).\n * 3. Traversing the AST and converting it back into a Neo.mjs VDOM object, re-inserting\n *    the original dynamic values (like functions, objects, and components) in the correct places.\n * @class Neo.functional.util.HtmlTemplateProcessor\n * @extends Neo.core.Base\n * @singleton\n */","meta":{"filename":"HtmlTemplateProcessor.mjs","lineno":23,"columnno":0,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/functional/util","code":{}},"description":"<p>A singleton class responsible for processing HtmlTemplate objects.\nThe core challenge is to convert a tagged template literal (which is just strings and values)\ninto a valid Neo.mjs VDOM structure. This requires several steps:</p>\n<ol>\n<li>Flattening nested templates into a single string with placeholders.</li>\n<li>Using a robust HTML parser (<code>parse5</code>) to create an Abstract Syntax Tree (AST).</li>\n<li>Traversing the AST and converting it back into a Neo.mjs VDOM object, re-inserting\nthe original dynamic values (like functions, objects, and components) in the correct places.</li>\n</ol>\n","kind":"class","name":"HtmlTemplateProcessor","augments":["Neo.core.Base"],"tags":[{"originalTitle":"singleton","title":"singleton","text":""}],"memberof":"Neo.functional.util","longname":"Neo.functional.util.HtmlTemplateProcessor","scope":"static","$longname":"Neo.functional.util.HtmlTemplateProcessor","$kind":"class","id":3265,"neoClassName":"Neo.functional.util.HtmlTemplateProcessor"},{"comment":"/**\n         * @member {String} className='Neo.functional.util.HtmlTemplateProcessor'\n         * @protected\n         */","meta":{"filename":"HtmlTemplateProcessor.mjs","lineno":41,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/functional/util","code":{}},"kind":"member","name":"className","type":{"names":["String"]},"defaultvalue":"'Neo.functional.util.HtmlTemplateProcessor'","access":"protected","longname":"className","scope":"global","$longname":"className","$kind":"property","id":3266,"neoClassName":"Neo.functional.util.HtmlTemplateProcessor"},{"comment":"/**\n         * @member {Boolean} singleton=true\n         * @protected\n         */","meta":{"filename":"HtmlTemplateProcessor.mjs","lineno":46,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/functional/util","code":{}},"kind":"member","name":"singleton","type":{"names":["Boolean"]},"defaultvalue":true,"access":"protected","longname":"singleton","scope":"global","$longname":"singleton","$kind":"property","id":3267,"neoClassName":"Neo.functional.util.HtmlTemplateProcessor"},{"comment":"/**\n     * Recursively converts a single parse5 AST node into a Neo.mjs VDOM node.\n     * This is the heart of the transformation process.\n     * @param {Object}   node             The parse5 AST node\n     * @param {Array<*>} values           The array of interpolated values from the flattened template\n     * @param {String}   originalString   The flattened template string\n     * @param {Object}   attributeNameMap A map of dynamic value indices to original, case-sensitive attribute names\n     * @returns {Object|String|null} A VDOM node, a text string, or null if the node is empty\n     */","meta":{"range":[3077,6896],"filename":"HtmlTemplateProcessor.mjs","lineno":58,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/functional/util","code":{"id":"astnode100093925","name":"HtmlTemplateProcessor#convertNodeToVdom","type":"MethodDefinition","paramnames":["node","values","originalString","attributeNameMap"]},"vars":{"":null}},"description":"<p>Recursively converts a single parse5 AST node into a Neo.mjs VDOM node.\nThis is the heart of the transformation process.</p>\n","params":[{"type":{"names":["Object"]},"description":"<p>The parse5 AST node</p>\n","name":"node"},{"type":{"names":["Array.<*>"]},"description":"<p>The array of interpolated values from the flattened template</p>\n","name":"values"},{"type":{"names":["String"]},"description":"<p>The flattened template string</p>\n","name":"originalString"},{"type":{"names":["Object"]},"description":"<p>A map of dynamic value indices to original, case-sensitive attribute names</p>\n","name":"attributeNameMap"}],"returns":[{"type":{"names":["Object","String","null"]},"description":"A VDOM node, a text string, or null if the node is empty"}],"name":"convertNodeToVdom","longname":"HtmlTemplateProcessor#convertNodeToVdom","kind":"function","memberof":"HtmlTemplateProcessor","scope":"instance","$longname":"HtmlTemplateProcessor#convertNodeToVdom","$kind":"method","id":3268,"neoClassName":"Neo.functional.util.HtmlTemplateProcessor"},{"comment":"/**\n     * Kicks off the AST to VDOM conversion for the entire template.\n     * @param {Object}   ast              The root parse5 AST\n     * @param {Array<*>} values           Interpolated values\n     * @param {String}   originalString   The flattened template string\n     * @param {Object}   attributeNameMap The original attribute names with mixed case, mapped by dynamic value index\n     * @returns {Object} The final Neo.mjs VDOM\n     */","meta":{"range":[7349,7926],"filename":"HtmlTemplateProcessor.mjs","lineno":146,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/functional/util","code":{"id":"astnode100094184","name":"HtmlTemplateProcessor#convertAstToVdom","type":"MethodDefinition","paramnames":["ast","values","originalString","attributeNameMap"]},"vars":{"":null}},"description":"<p>Kicks off the AST to VDOM conversion for the entire template.</p>\n","params":[{"type":{"names":["Object"]},"description":"<p>The root parse5 AST</p>\n","name":"ast"},{"type":{"names":["Array.<*>"]},"description":"<p>Interpolated values</p>\n","name":"values"},{"type":{"names":["String"]},"description":"<p>The flattened template string</p>\n","name":"originalString"},{"type":{"names":["Object"]},"description":"<p>The original attribute names with mixed case, mapped by dynamic value index</p>\n","name":"attributeNameMap"}],"returns":[{"type":{"names":["Object"]},"description":"The final Neo.mjs VDOM"}],"name":"convertAstToVdom","longname":"HtmlTemplateProcessor#convertAstToVdom","kind":"function","memberof":"HtmlTemplateProcessor","scope":"instance","$longname":"HtmlTemplateProcessor#convertAstToVdom","$kind":"method","id":3269,"neoClassName":"Neo.functional.util.HtmlTemplateProcessor"},{"comment":"/**\n     * Flattens a potentially nested HtmlTemplate object into a single string and a corresponding array of values.\n     * This is a necessary pre-processing step before parsing with parse5, which only accepts a single string.\n     * @param {Neo.functional.util.HtmlTemplate} template The root template object\n     * @returns {{flatString: string, flatValues: Array<*>, attributeNameMap: Object}}\n     */","meta":{"range":[8344,10963],"filename":"HtmlTemplateProcessor.mjs","lineno":168,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/functional/util","code":{"id":"astnode100094246","name":"HtmlTemplateProcessor#flattenTemplate","type":"MethodDefinition","paramnames":["template"]},"vars":{"":null}},"description":"<p>Flattens a potentially nested HtmlTemplate object into a single string and a corresponding array of values.\nThis is a necessary pre-processing step before parsing with parse5, which only accepts a single string.</p>\n","params":[{"type":{"names":["Neo.functional.util.HtmlTemplate"]},"description":"<p>The root template object</p>\n","name":"template"}],"returns":[{"type":{"names":["Object"]}}],"name":"flattenTemplate","longname":"HtmlTemplateProcessor#flattenTemplate","kind":"function","memberof":"HtmlTemplateProcessor","scope":"instance","$longname":"HtmlTemplateProcessor#flattenTemplate","$kind":"method","id":3270,"neoClassName":"Neo.functional.util.HtmlTemplateProcessor"},{"comment":"/**\n     * The main entry point for processing a template.\n     * It orchestrates the flattening, parsing, and VDOM conversion, and then passes the result\n     * back to the component to continue its update lifecycle.\n     * @param {Neo.functional.util.HtmlTemplate} template  The root template object\n     * @param {Neo.functional.component.Base}    component The component instance\n     */","meta":{"range":[11365,12032],"filename":"HtmlTemplateProcessor.mjs","lineno":231,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/functional/util","code":{"id":"astnode100094476","name":"HtmlTemplateProcessor#process","type":"MethodDefinition","paramnames":["template","component"]},"vars":{"":null}},"description":"<p>The main entry point for processing a template.\nIt orchestrates the flattening, parsing, and VDOM conversion, and then passes the result\nback to the component to continue its update lifecycle.</p>\n","params":[{"type":{"names":["Neo.functional.util.HtmlTemplate"]},"description":"<p>The root template object</p>\n","name":"template"},{"type":{"names":["Neo.functional.component.Base"]},"description":"<p>The component instance</p>\n","name":"component"}],"name":"process","longname":"HtmlTemplateProcessor#process","kind":"function","memberof":"HtmlTemplateProcessor","scope":"instance","$longname":"HtmlTemplateProcessor#process","$kind":"method","id":3271,"neoClassName":"Neo.functional.util.HtmlTemplateProcessor"}]}