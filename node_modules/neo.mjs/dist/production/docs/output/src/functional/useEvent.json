{"classData":[{"comment":"/**\n * A hook for registering DOM event listeners within a functional component.\n * Event listeners registered via this hook will be managed by Neo.mjs's\n * delegated DOM event system, ensuring efficient and proper lifecycle handling.\n *\n * @param {String} eventType - The type of DOM event to listen for (e.g., 'click', 'input').\n * @param {Function} handler - The event handler function. It will receive the event data as its argument.\n * @param {String} [delegate] - An optional CSS selector for event delegation. If provided,\n *                               the handler will only fire if the event target matches this selector.\n */","meta":{"range":[757,1674],"filename":"useEvent.mjs","lineno":15,"columnno":0,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/functional","code":{"id":"astnode100091611","name":"exports.useEvent","type":"FunctionDeclaration","paramnames":["eventType","handler","delegate"]}},"description":"<p>A hook for registering DOM event listeners within a functional component.\nEvent listeners registered via this hook will be managed by Neo.mjs&#39;s\ndelegated DOM event system, ensuring efficient and proper lifecycle handling.</p>\n","params":[{"type":{"names":["String"]},"description":"<p>The type of DOM event to listen for (e.g., &#39;click&#39;, &#39;input&#39;).</p>\n","name":"eventType"},{"type":{"names":["function"]},"description":"<p>The event handler function. It will receive the event data as its argument.</p>\n","name":"handler"},{"type":{"names":["String"]},"optional":true,"description":"<p>An optional CSS selector for event delegation. If provided,\n                              the handler will only fire if the event target matches this selector.</p>\n","name":"delegate"}],"name":"useEvent","longname":"useEvent","kind":"function","scope":"global","$longname":"useEvent","$kind":"method","id":3195,"neoClassName":"Neo.functional.useEvent"}]}