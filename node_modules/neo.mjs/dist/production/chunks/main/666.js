"use strict";(self.webpackChunkneo_mjs=self.webpackChunkneo_mjs||[]).push([[96,666],{96:(e,t,a)=>{a.r(t),a.d(t,{default:()=>r});var s=a(583);class o extends s.A{static config={className:"Neo.main.addon.Base",isMainThreadAddon:!0,isReady_:!1,preloadFilesDelay:5e3};cache=[];isLoading=!1;loadingTimeoutId=null;construct(e){super.construct(e);let t=this;t.loadFiles&&(0===t.preloadFilesDelay?t.loadFiles():Neo.isNumber(t.preloadFilesDelay)&&(t.loadingTimeoutId=setTimeout((()=>{t.loadFiles()}),t.preloadFilesDelay)))}afterSetIsReady(e,t){if(e){let e,t=this;t.cache.forEach((a=>{e=t[a.fn](a.data),a.resolve(e)})),t.cache=[]}}cacheMethodCall(e){let t=this;return t.isLoading||(t.loadingTimeoutId&&clearTimeout(t.loadingTimeoutId),t.loadingTimeoutId=null,t.loadFiles()),new Promise(((a,s)=>{t.cache.push({...e,resolve:a})}))}}const r=Neo.setupClass(o)},666:(e,t,a)=>{a.r(t),a.d(t,{default:()=>i});var s=a(96),o=a(160);class r extends s.default{static config={className:"Neo.main.addon.IntersectionObserver",remote:{app:["disconnect","observe","register"]}};cache={};map={};disconnect(e){this.map[e.id]?.disconnect()}findTopmostItem(e,t){let a,s,r,i,d=this;e.forEach((e=>{i=e.target,a=i.dataset&&{...i.dataset}||null,s=o.A.getPathFromElement(e.target).map((e=>o.A.getTargetData(e))),r=i.getBoundingClientRect(),r.y<200&&(e.isIntersecting,d.sendMessage({data:a,id:t.rootId,isIntersecting:!0,path:s,targetId:i.id}))}))}isVisible(e,t){let a,s,r,i=this;e.forEach((e=>{r=e.target,a=r.dataset&&{...r.dataset}||null,s=o.A.getPathFromElement(e.target).map((e=>o.A.getTargetData(e))),e.isIntersecting&&i.sendMessage({data:a,id:t.rootId,isIntersecting:!0,path:s,targetId:r.id})}))}observe(e){let t=this.cache,a=!1,{id:s,observe:o}=e,r=this.map[e.id],i=[];return Neo.isArray(o)||(o=[o]),o.forEach((e=>{i.push(...document.querySelectorAll(e))})),r?(e.disconnect&&r.disconnect(),i.forEach((e=>{r.observe(e)}))):(a=!0,t[s]||(t[s]=[]),t[s].push(e)),{cached:a,countTargets:i.length}}register(e){let t,a=this,{cache:s}=a,{id:o,observe:r}=e,i=!0;return a.map[o]=t=new IntersectionObserver(a[e.callback].bind(a),{root:document.querySelector(e.root),rootMargin:e.rootMargin||"0px",threshold:e.threshold||0}),t.rootId=e.id,r&&(i=a.observe({id:o,observe:r})),s[o]&&(s[o].forEach((e=>a.observe(e))),delete s[o]),i}sendMessage(e){Neo.worker.Manager.sendMessage("app",{action:"domEvent",eventName:"intersect",data:e})}}const i=Neo.setupClass(r)}}]);