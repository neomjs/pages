"use strict";
(self["webpackChunkneo_mjs"] = self["webpackChunkneo_mjs"] || []).push([["vendors-src_main_addon_WindowPosition_mjs"],{

/***/ "./src/main/addon/Base.mjs":
/*!*********************************!*\
  !*** ./src/main/addon/Base.mjs ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/Base.mjs */ "./src/core/Base.mjs");


/**
 * Base class for main thread addons
 * @class Neo.main.addon.Base
 * @extends Neo.core.Base
 */
class Base extends _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.main.addon.Base'
         * @protected
         */
        className: 'Neo.main.addon.Base',
        /**
         * An identifier for core.Base to get handled like singletons for remote method access
         * @member {Boolean} isMainThreadAddon=true
         * @protected
         */
        isMainThreadAddon: true,
        /**
         * Will get set to true once all addon related files got loaded (if there is a need to load)
         * @member {Boolean} isReady_=false
         * @protected
         */
        isReady_: false,
        /**
         * Amount in ms to delay the loading of library files, unless remote method access happens
         * Change the value to false in case you don't want an automated preloading
         * @member {Boolean|Number} preloadFilesDelay=5000
         * @protected
         */
        preloadFilesDelay: 5000,
    }

    /**
     * @member {Object[]} cache=[]
     */
    cache = []
    /**
     * Will get set to true once we start loading Monaco related files
     * @member {Boolean} isLoading=false
     */
    isLoading = false
    /**
     * Internal flag to store the setTimeout() id for loading external files
     * @member {Number|null} loadingTimeoutId=null
     */
    loadingTimeoutId = null

    /**
     * @param {Object} config
     */
    construct(config) {
        super.construct(config);

        let me = this;

        if (me.loadFiles) {
            if (me.preloadFilesDelay === 0) {
                me.loadFiles()
            } else if (Neo.isNumber(me.preloadFilesDelay)) {
                me.loadingTimeoutId = setTimeout(() => {
                    me.loadFiles()
                }, me.preloadFilesDelay)
            }
        }
    }

    /**
     * Triggered after the isReady config got changed
     * @param {Boolean} value
     * @param {Boolean} oldValue
     * @protected
     */
    afterSetIsReady(value, oldValue) {
        if (value) {
            let me = this,
                returnValue;

            me.cache.forEach(item => {
                returnValue = me[item.fn](item.data);
                item.resolve(returnValue)
            });

            me.cache = []
        }
    }

    /**
     * Internally caches call when isReady===false
     * Loads the library files in case this is not already happening
     * @param item
     * @returns {Promise<unknown>}
     */
    cacheMethodCall(item) {
        let me = this;

        if (!me.isLoading) {
            me.loadingTimeoutId && clearTimeout(me.loadingTimeoutId);
            me.loadingTimeoutId = null;
            me.loadFiles()
        }

        return new Promise((resolve, reject) => {
            me.cache.push({...item, resolve})
        })
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(Base));


/***/ }),

/***/ "./src/main/addon/WindowPosition.mjs":
/*!*******************************************!*\
  !*** ./src/main/addon/WindowPosition.mjs ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Base.mjs */ "./src/main/addon/Base.mjs");


/**
 * @class Neo.main.addon.WindowPosition
 * @extends Neo.main.addon.Base
 */
class WindowPosition extends _Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.main.addon.WindowPosition'
         * @protected
         */
        className: 'Neo.main.addon.WindowPosition',
        /**
         * @member {Boolean} adjustWindowPositions=false
         */
        adjustWindowPositions: false,
        /**
         * @member {String|null} intervalId=null
         */
        intervalId: null,
        /**
         * @member {Number} intervalTime=20
         */
        intervalTime: 20,
        /**
         * @member {Boolean} observeResize_=false
         */
        observeResize_: false,
        /**
         * Remote method access for other workers
         * @member {Object} remote
         * @protected
         */
        remote: {
            app: [
                'registerWindow',
                'setConfigs',
                'setDock',
                'unregisterWindow'
            ]
        },
        /**
         * @member {Number|null} screenLeft=null
         */
        screenLeft: null,
        /**
         * @member {Number|null} screenTop=null
         */
        screenTop: null,
        /**
         * @member {Object} windows={}
         * @protected
         */
        windows: {}
    }

    /**
     * @member {Function|null} resizeListener=null
     * @protected
     */
    resizeListener = null

    /**
     * @param {Object} config
     */
    construct(config) {
        super.construct(config);

        let me                      = this,
            {screenLeft, screenTop} = window;

        me.screenLeft = screenLeft;
        me.screenTop  = screenTop;

        window.addEventListener('mouseout', me.onMouseOut.bind(me))
    }

    /**
     * Triggered after the observeResize config got changed
     * @param {Boolean} value
     * @param {Boolean} oldValue
     * @protected
     */
    afterSetObserveResize(value, oldValue) {
        let me = this;

        if (!me.resizeListener) {
            me.resizeListener =  me.onResize.bind(me)
        }

        window[value ? 'addEventListener' : 'removeEventListener']('resize', me.resizeListener)
    }

    /**
     *
     */
    adjustPositions() {
        Object.entries(this.windows).forEach(([key, value]) => {
            let {left, top} = this.getPosition(value);

            Neo.Main.windowMoveTo({
                windowName: key,
                x         : left,
                y         : top
            })
        })
    }

    /**
     *
     */
    checkMovement() {
        let me                      = this,
            {Manager}               = Neo.worker,
            win                     = window,
            {screenLeft, screenTop} = win,
            winData;

        if (me.screenLeft !== screenLeft || me.screenTop !== screenTop) {
            winData = Neo.Main.getWindowData();

            me.adjustWindowPositions && me.adjustPositions();

            Manager.sendMessage('app', {
                action: 'windowPositionChange',
                data  : {
                    appName: Manager.appName,
                    ...winData
                }
            });

            me.screenLeft = screenLeft;
            me.screenTop  = screenTop
        }
    }

    /**
     * Returns true in case the dock direction changes from horizontal (left, right)
     * to vertical (bottom, top) or vice versa.
     * @param {String} oldValue
     * @param {String} newValue
     * @returns {Boolean}
     */
    dockDirectionChange(oldValue, newValue) {
        return (oldValue === 'bottom' || oldValue === 'top') && (newValue === 'left' || newValue === 'right')
            || (newValue === 'bottom' || newValue === 'top') && (oldValue === 'left' || oldValue === 'right')
    }

    /**
     * @param {Object} data
     */
    getPosition(data) {
        let {size}                  = data,
            win                     = window,
            {screenLeft, screenTop} = win,
            left, top;

        switch (data.dock) {
            case 'bottom':
                left = screenLeft;
                top  = win.outerHeight + screenTop - 62;
                break
            case 'left':
                left = screenLeft - size;
                top  = screenTop  + 24;
                break
            case 'right':
                left = win.outerWidth + screenLeft;
                top  = screenTop  + 24;
                break
            case 'top':
                left = screenLeft;
                top  = screenTop - size + 86;
                break
        }

        return {left, top}
    }

    /**
     * @param {MouseEvent} event
     */
    onMouseOut(event) {
        let me = this;

        if (!event.toElement) {
            if (!me.intervalId) {
                me.intervalId = setInterval(me.checkMovement.bind(me), me.intervalTime)
            }
        } else if (me.intervalId) {
            clearInterval(me.intervalId);
            me.intervalId = null
        }
    }

    /**
     * @param {Object} event
     */
    onResize(event) {
        let me  = this,
            win = window,
            height, width;

        Object.entries(me.windows).forEach(([key, value]) => {
            switch (value.dock) {
                case 'bottom':
                case 'top':
                    width = win.outerWidth;
                    break
                case 'left':
                case 'right':
                    height = win.outerHeight - 28;
                    break
            }

            if (me.adjustWindowPositions) {
                Neo.Main.windowResizeTo({
                    height,
                    width,
                    windowName: key
                });

                me.adjustPositions()
            }
        })
    }

    /**
     * @param {Object} data
     * @param {String} data.dock
     * @param {String} data.name
     * @param {Number} data.size
     */
    registerWindow(data) {
        this.windows[data.name] = data
    }

    /**
     * Set configs from within the app worker
     * @param {Object} data
     * @param {String} data.appName
     */
    setConfigs(data) {
        delete data.appName;
        this.set(data)
    }

    /**
     * Docks an existing window to a new side
     * @param {Object} data
     * @param {String} data.dock
     * @param {String} data.name
     */
    setDock(data) {
        let me           = this,
            {dock, name} = data,
            win          = me.windows[name],
            dockDirectionChange, position;

        if (win) {
            dockDirectionChange = me.dockDirectionChange(dock, win.dock);

            win.dock = dock;
            position = me.getPosition(win);

            if (dockDirectionChange) {
                Neo.Main.windowResizeTo({
                    height    : dock === 'bottom' || dock === 'top'   ? win.size : window.outerHeight - 28,
                    width     : dock === 'left'   || dock === 'right' ? win.size : window.outerWidth,
                    windowName: name
                })
            }

            Neo.Main.windowMoveTo({
                windowName: name,
                x         : position.left,
                y         : position.top
            })
        }
    }

    /**
     * @param {Object} data
     * @param {String} data.name
     */
    unregisterWindow(data) {
        delete this.windows[data.name]
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(WindowPosition));


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2h1bmtzL21haW4vdmVuZG9ycy1zcmNfbWFpbl9hZGRvbl9XaW5kb3dQb3NpdGlvbl9tanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBMkM7O0FBRTNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsc0RBQVE7QUFDM0I7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsU0FBUztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFNBQVM7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGdCQUFnQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGdCQUFnQixVQUFVO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFNBQVM7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsYUFBYTtBQUM3QjtBQUNBOztBQUVBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWUsU0FBUztBQUN4QixlQUFlLFNBQVM7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7O0FBRWI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMkJBQTJCLGlCQUFpQjtBQUM1QyxTQUFTO0FBQ1Q7QUFDQTs7QUFFQSxpRUFBZSxvQkFBb0IsRUFBQzs7Ozs7Ozs7Ozs7Ozs7OztBQzlHTjs7QUFFOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsaURBQUk7QUFDakM7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFNBQVM7QUFDN0I7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGFBQWE7QUFDakM7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFNBQVM7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxvQkFBb0IsYUFBYTtBQUNqQztBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsYUFBYTtBQUNqQztBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGdCQUFnQixlQUFlO0FBQy9CO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxhQUFhLHVCQUF1Qjs7QUFFcEM7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxlQUFlLFNBQVM7QUFDeEIsZUFBZSxTQUFTO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsV0FBVzs7QUFFNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLHVCQUF1QjtBQUNwQztBQUNBLGFBQWEsdUJBQXVCO0FBQ3BDOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQSxhQUFhLHVCQUF1QjtBQUNwQztBQUNBLGFBQWEsdUJBQXVCO0FBQ3BDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxnQkFBZ0I7QUFDaEI7O0FBRUE7QUFDQSxlQUFlLFlBQVk7QUFDM0I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCOztBQUVqQjtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLGFBQWEsWUFBWTtBQUN6QjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7O0FBRUE7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsaUVBQWUsOEJBQThCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZW8ubWpzLy4vc3JjL21haW4vYWRkb24vQmFzZS5tanMiLCJ3ZWJwYWNrOi8vbmVvLm1qcy8uL3NyYy9tYWluL2FkZG9uL1dpbmRvd1Bvc2l0aW9uLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ29yZUJhc2UgZnJvbSAnLi4vLi4vY29yZS9CYXNlLm1qcyc7XG5cbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgbWFpbiB0aHJlYWQgYWRkb25zXG4gKiBAY2xhc3MgTmVvLm1haW4uYWRkb24uQmFzZVxuICogQGV4dGVuZHMgTmVvLmNvcmUuQmFzZVxuICovXG5jbGFzcyBCYXNlIGV4dGVuZHMgQ29yZUJhc2Uge1xuICAgIHN0YXRpYyBjb25maWcgPSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IGNsYXNzTmFtZT0nTmVvLm1haW4uYWRkb24uQmFzZSdcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgY2xhc3NOYW1lOiAnTmVvLm1haW4uYWRkb24uQmFzZScsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbiBpZGVudGlmaWVyIGZvciBjb3JlLkJhc2UgdG8gZ2V0IGhhbmRsZWQgbGlrZSBzaW5nbGV0b25zIGZvciByZW1vdGUgbWV0aG9kIGFjY2Vzc1xuICAgICAgICAgKiBAbWVtYmVyIHtCb29sZWFufSBpc01haW5UaHJlYWRBZGRvbj10cnVlXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIGlzTWFpblRocmVhZEFkZG9uOiB0cnVlLFxuICAgICAgICAvKipcbiAgICAgICAgICogV2lsbCBnZXQgc2V0IHRvIHRydWUgb25jZSBhbGwgYWRkb24gcmVsYXRlZCBmaWxlcyBnb3QgbG9hZGVkIChpZiB0aGVyZSBpcyBhIG5lZWQgdG8gbG9hZClcbiAgICAgICAgICogQG1lbWJlciB7Qm9vbGVhbn0gaXNSZWFkeV89ZmFsc2VcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgaXNSZWFkeV86IGZhbHNlLFxuICAgICAgICAvKipcbiAgICAgICAgICogQW1vdW50IGluIG1zIHRvIGRlbGF5IHRoZSBsb2FkaW5nIG9mIGxpYnJhcnkgZmlsZXMsIHVubGVzcyByZW1vdGUgbWV0aG9kIGFjY2VzcyBoYXBwZW5zXG4gICAgICAgICAqIENoYW5nZSB0aGUgdmFsdWUgdG8gZmFsc2UgaW4gY2FzZSB5b3UgZG9uJ3Qgd2FudCBhbiBhdXRvbWF0ZWQgcHJlbG9hZGluZ1xuICAgICAgICAgKiBAbWVtYmVyIHtCb29sZWFufE51bWJlcn0gcHJlbG9hZEZpbGVzRGVsYXk9NTAwMFxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBwcmVsb2FkRmlsZXNEZWxheTogNTAwMCxcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyIHtPYmplY3RbXX0gY2FjaGU9W11cbiAgICAgKi9cbiAgICBjYWNoZSA9IFtdXG4gICAgLyoqXG4gICAgICogV2lsbCBnZXQgc2V0IHRvIHRydWUgb25jZSB3ZSBzdGFydCBsb2FkaW5nIE1vbmFjbyByZWxhdGVkIGZpbGVzXG4gICAgICogQG1lbWJlciB7Qm9vbGVhbn0gaXNMb2FkaW5nPWZhbHNlXG4gICAgICovXG4gICAgaXNMb2FkaW5nID0gZmFsc2VcbiAgICAvKipcbiAgICAgKiBJbnRlcm5hbCBmbGFnIHRvIHN0b3JlIHRoZSBzZXRUaW1lb3V0KCkgaWQgZm9yIGxvYWRpbmcgZXh0ZXJuYWwgZmlsZXNcbiAgICAgKiBAbWVtYmVyIHtOdW1iZXJ8bnVsbH0gbG9hZGluZ1RpbWVvdXRJZD1udWxsXG4gICAgICovXG4gICAgbG9hZGluZ1RpbWVvdXRJZCA9IG51bGxcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3QoY29uZmlnKSB7XG4gICAgICAgIHN1cGVyLmNvbnN0cnVjdChjb25maWcpO1xuXG4gICAgICAgIGxldCBtZSA9IHRoaXM7XG5cbiAgICAgICAgaWYgKG1lLmxvYWRGaWxlcykge1xuICAgICAgICAgICAgaWYgKG1lLnByZWxvYWRGaWxlc0RlbGF5ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgbWUubG9hZEZpbGVzKClcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoTmVvLmlzTnVtYmVyKG1lLnByZWxvYWRGaWxlc0RlbGF5KSkge1xuICAgICAgICAgICAgICAgIG1lLmxvYWRpbmdUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbWUubG9hZEZpbGVzKClcbiAgICAgICAgICAgICAgICB9LCBtZS5wcmVsb2FkRmlsZXNEZWxheSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJlZCBhZnRlciB0aGUgaXNSZWFkeSBjb25maWcgZ290IGNoYW5nZWRcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHZhbHVlXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBvbGRWYWx1ZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBhZnRlclNldElzUmVhZHkodmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgbGV0IG1lID0gdGhpcyxcbiAgICAgICAgICAgICAgICByZXR1cm5WYWx1ZTtcblxuICAgICAgICAgICAgbWUuY2FjaGUuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm5WYWx1ZSA9IG1lW2l0ZW0uZm5dKGl0ZW0uZGF0YSk7XG4gICAgICAgICAgICAgICAgaXRlbS5yZXNvbHZlKHJldHVyblZhbHVlKVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIG1lLmNhY2hlID0gW11cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEludGVybmFsbHkgY2FjaGVzIGNhbGwgd2hlbiBpc1JlYWR5PT09ZmFsc2VcbiAgICAgKiBMb2FkcyB0aGUgbGlicmFyeSBmaWxlcyBpbiBjYXNlIHRoaXMgaXMgbm90IGFscmVhZHkgaGFwcGVuaW5nXG4gICAgICogQHBhcmFtIGl0ZW1cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTx1bmtub3duPn1cbiAgICAgKi9cbiAgICBjYWNoZU1ldGhvZENhbGwoaXRlbSkge1xuICAgICAgICBsZXQgbWUgPSB0aGlzO1xuXG4gICAgICAgIGlmICghbWUuaXNMb2FkaW5nKSB7XG4gICAgICAgICAgICBtZS5sb2FkaW5nVGltZW91dElkICYmIGNsZWFyVGltZW91dChtZS5sb2FkaW5nVGltZW91dElkKTtcbiAgICAgICAgICAgIG1lLmxvYWRpbmdUaW1lb3V0SWQgPSBudWxsO1xuICAgICAgICAgICAgbWUubG9hZEZpbGVzKClcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBtZS5jYWNoZS5wdXNoKHsuLi5pdGVtLCByZXNvbHZlfSlcbiAgICAgICAgfSlcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE5lby5zZXR1cENsYXNzKEJhc2UpO1xuIiwiaW1wb3J0IEJhc2UgZnJvbSAnLi9CYXNlLm1qcyc7XG5cbi8qKlxuICogQGNsYXNzIE5lby5tYWluLmFkZG9uLldpbmRvd1Bvc2l0aW9uXG4gKiBAZXh0ZW5kcyBOZW8ubWFpbi5hZGRvbi5CYXNlXG4gKi9cbmNsYXNzIFdpbmRvd1Bvc2l0aW9uIGV4dGVuZHMgQmFzZSB7XG4gICAgc3RhdGljIGNvbmZpZyA9IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gY2xhc3NOYW1lPSdOZW8ubWFpbi5hZGRvbi5XaW5kb3dQb3NpdGlvbidcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgY2xhc3NOYW1lOiAnTmVvLm1haW4uYWRkb24uV2luZG93UG9zaXRpb24nLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7Qm9vbGVhbn0gYWRqdXN0V2luZG93UG9zaXRpb25zPWZhbHNlXG4gICAgICAgICAqL1xuICAgICAgICBhZGp1c3RXaW5kb3dQb3NpdGlvbnM6IGZhbHNlLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfG51bGx9IGludGVydmFsSWQ9bnVsbFxuICAgICAgICAgKi9cbiAgICAgICAgaW50ZXJ2YWxJZDogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge051bWJlcn0gaW50ZXJ2YWxUaW1lPTIwXG4gICAgICAgICAqL1xuICAgICAgICBpbnRlcnZhbFRpbWU6IDIwLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7Qm9vbGVhbn0gb2JzZXJ2ZVJlc2l6ZV89ZmFsc2VcbiAgICAgICAgICovXG4gICAgICAgIG9ic2VydmVSZXNpemVfOiBmYWxzZSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlbW90ZSBtZXRob2QgYWNjZXNzIGZvciBvdGhlciB3b3JrZXJzXG4gICAgICAgICAqIEBtZW1iZXIge09iamVjdH0gcmVtb3RlXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIHJlbW90ZToge1xuICAgICAgICAgICAgYXBwOiBbXG4gICAgICAgICAgICAgICAgJ3JlZ2lzdGVyV2luZG93JyxcbiAgICAgICAgICAgICAgICAnc2V0Q29uZmlncycsXG4gICAgICAgICAgICAgICAgJ3NldERvY2snLFxuICAgICAgICAgICAgICAgICd1bnJlZ2lzdGVyV2luZG93J1xuICAgICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7TnVtYmVyfG51bGx9IHNjcmVlbkxlZnQ9bnVsbFxuICAgICAgICAgKi9cbiAgICAgICAgc2NyZWVuTGVmdDogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge051bWJlcnxudWxsfSBzY3JlZW5Ub3A9bnVsbFxuICAgICAgICAgKi9cbiAgICAgICAgc2NyZWVuVG9wOiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7T2JqZWN0fSB3aW5kb3dzPXt9XG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIHdpbmRvd3M6IHt9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG1lbWJlciB7RnVuY3Rpb258bnVsbH0gcmVzaXplTGlzdGVuZXI9bnVsbFxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICByZXNpemVMaXN0ZW5lciA9IG51bGxcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3QoY29uZmlnKSB7XG4gICAgICAgIHN1cGVyLmNvbnN0cnVjdChjb25maWcpO1xuXG4gICAgICAgIGxldCBtZSAgICAgICAgICAgICAgICAgICAgICA9IHRoaXMsXG4gICAgICAgICAgICB7c2NyZWVuTGVmdCwgc2NyZWVuVG9wfSA9IHdpbmRvdztcblxuICAgICAgICBtZS5zY3JlZW5MZWZ0ID0gc2NyZWVuTGVmdDtcbiAgICAgICAgbWUuc2NyZWVuVG9wICA9IHNjcmVlblRvcDtcblxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdXQnLCBtZS5vbk1vdXNlT3V0LmJpbmQobWUpKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJlZCBhZnRlciB0aGUgb2JzZXJ2ZVJlc2l6ZSBjb25maWcgZ290IGNoYW5nZWRcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHZhbHVlXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBvbGRWYWx1ZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBhZnRlclNldE9ic2VydmVSZXNpemUodmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgIGxldCBtZSA9IHRoaXM7XG5cbiAgICAgICAgaWYgKCFtZS5yZXNpemVMaXN0ZW5lcikge1xuICAgICAgICAgICAgbWUucmVzaXplTGlzdGVuZXIgPSAgbWUub25SZXNpemUuYmluZChtZSlcbiAgICAgICAgfVxuXG4gICAgICAgIHdpbmRvd1t2YWx1ZSA/ICdhZGRFdmVudExpc3RlbmVyJyA6ICdyZW1vdmVFdmVudExpc3RlbmVyJ10oJ3Jlc2l6ZScsIG1lLnJlc2l6ZUxpc3RlbmVyKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgYWRqdXN0UG9zaXRpb25zKCkge1xuICAgICAgICBPYmplY3QuZW50cmllcyh0aGlzLndpbmRvd3MpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgbGV0IHtsZWZ0LCB0b3B9ID0gdGhpcy5nZXRQb3NpdGlvbih2YWx1ZSk7XG5cbiAgICAgICAgICAgIE5lby5NYWluLndpbmRvd01vdmVUbyh7XG4gICAgICAgICAgICAgICAgd2luZG93TmFtZToga2V5LFxuICAgICAgICAgICAgICAgIHggICAgICAgICA6IGxlZnQsXG4gICAgICAgICAgICAgICAgeSAgICAgICAgIDogdG9wXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgY2hlY2tNb3ZlbWVudCgpIHtcbiAgICAgICAgbGV0IG1lICAgICAgICAgICAgICAgICAgICAgID0gdGhpcyxcbiAgICAgICAgICAgIHtNYW5hZ2VyfSAgICAgICAgICAgICAgID0gTmVvLndvcmtlcixcbiAgICAgICAgICAgIHdpbiAgICAgICAgICAgICAgICAgICAgID0gd2luZG93LFxuICAgICAgICAgICAge3NjcmVlbkxlZnQsIHNjcmVlblRvcH0gPSB3aW4sXG4gICAgICAgICAgICB3aW5EYXRhO1xuXG4gICAgICAgIGlmIChtZS5zY3JlZW5MZWZ0ICE9PSBzY3JlZW5MZWZ0IHx8IG1lLnNjcmVlblRvcCAhPT0gc2NyZWVuVG9wKSB7XG4gICAgICAgICAgICB3aW5EYXRhID0gTmVvLk1haW4uZ2V0V2luZG93RGF0YSgpO1xuXG4gICAgICAgICAgICBtZS5hZGp1c3RXaW5kb3dQb3NpdGlvbnMgJiYgbWUuYWRqdXN0UG9zaXRpb25zKCk7XG5cbiAgICAgICAgICAgIE1hbmFnZXIuc2VuZE1lc3NhZ2UoJ2FwcCcsIHtcbiAgICAgICAgICAgICAgICBhY3Rpb246ICd3aW5kb3dQb3NpdGlvbkNoYW5nZScsXG4gICAgICAgICAgICAgICAgZGF0YSAgOiB7XG4gICAgICAgICAgICAgICAgICAgIGFwcE5hbWU6IE1hbmFnZXIuYXBwTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgLi4ud2luRGF0YVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBtZS5zY3JlZW5MZWZ0ID0gc2NyZWVuTGVmdDtcbiAgICAgICAgICAgIG1lLnNjcmVlblRvcCAgPSBzY3JlZW5Ub3BcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpbiBjYXNlIHRoZSBkb2NrIGRpcmVjdGlvbiBjaGFuZ2VzIGZyb20gaG9yaXpvbnRhbCAobGVmdCwgcmlnaHQpXG4gICAgICogdG8gdmVydGljYWwgKGJvdHRvbSwgdG9wKSBvciB2aWNlIHZlcnNhLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBvbGRWYWx1ZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBuZXdWYWx1ZVxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqL1xuICAgIGRvY2tEaXJlY3Rpb25DaGFuZ2Uob2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgICAgIHJldHVybiAob2xkVmFsdWUgPT09ICdib3R0b20nIHx8IG9sZFZhbHVlID09PSAndG9wJykgJiYgKG5ld1ZhbHVlID09PSAnbGVmdCcgfHwgbmV3VmFsdWUgPT09ICdyaWdodCcpXG4gICAgICAgICAgICB8fCAobmV3VmFsdWUgPT09ICdib3R0b20nIHx8IG5ld1ZhbHVlID09PSAndG9wJykgJiYgKG9sZFZhbHVlID09PSAnbGVmdCcgfHwgb2xkVmFsdWUgPT09ICdyaWdodCcpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICAgKi9cbiAgICBnZXRQb3NpdGlvbihkYXRhKSB7XG4gICAgICAgIGxldCB7c2l6ZX0gICAgICAgICAgICAgICAgICA9IGRhdGEsXG4gICAgICAgICAgICB3aW4gICAgICAgICAgICAgICAgICAgICA9IHdpbmRvdyxcbiAgICAgICAgICAgIHtzY3JlZW5MZWZ0LCBzY3JlZW5Ub3B9ID0gd2luLFxuICAgICAgICAgICAgbGVmdCwgdG9wO1xuXG4gICAgICAgIHN3aXRjaCAoZGF0YS5kb2NrKSB7XG4gICAgICAgICAgICBjYXNlICdib3R0b20nOlxuICAgICAgICAgICAgICAgIGxlZnQgPSBzY3JlZW5MZWZ0O1xuICAgICAgICAgICAgICAgIHRvcCAgPSB3aW4ub3V0ZXJIZWlnaHQgKyBzY3JlZW5Ub3AgLSA2MjtcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgICAgICAgICAgbGVmdCA9IHNjcmVlbkxlZnQgLSBzaXplO1xuICAgICAgICAgICAgICAgIHRvcCAgPSBzY3JlZW5Ub3AgICsgMjQ7XG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgICAgICAgICAgICBsZWZ0ID0gd2luLm91dGVyV2lkdGggKyBzY3JlZW5MZWZ0O1xuICAgICAgICAgICAgICAgIHRvcCAgPSBzY3JlZW5Ub3AgICsgMjQ7XG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIGNhc2UgJ3RvcCc6XG4gICAgICAgICAgICAgICAgbGVmdCA9IHNjcmVlbkxlZnQ7XG4gICAgICAgICAgICAgICAgdG9wICA9IHNjcmVlblRvcCAtIHNpemUgKyA4NjtcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtsZWZ0LCB0b3B9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtNb3VzZUV2ZW50fSBldmVudFxuICAgICAqL1xuICAgIG9uTW91c2VPdXQoZXZlbnQpIHtcbiAgICAgICAgbGV0IG1lID0gdGhpcztcblxuICAgICAgICBpZiAoIWV2ZW50LnRvRWxlbWVudCkge1xuICAgICAgICAgICAgaWYgKCFtZS5pbnRlcnZhbElkKSB7XG4gICAgICAgICAgICAgICAgbWUuaW50ZXJ2YWxJZCA9IHNldEludGVydmFsKG1lLmNoZWNrTW92ZW1lbnQuYmluZChtZSksIG1lLmludGVydmFsVGltZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChtZS5pbnRlcnZhbElkKSB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKG1lLmludGVydmFsSWQpO1xuICAgICAgICAgICAgbWUuaW50ZXJ2YWxJZCA9IG51bGxcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudFxuICAgICAqL1xuICAgIG9uUmVzaXplKGV2ZW50KSB7XG4gICAgICAgIGxldCBtZSAgPSB0aGlzLFxuICAgICAgICAgICAgd2luID0gd2luZG93LFxuICAgICAgICAgICAgaGVpZ2h0LCB3aWR0aDtcblxuICAgICAgICBPYmplY3QuZW50cmllcyhtZS53aW5kb3dzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIHN3aXRjaCAodmFsdWUuZG9jaykge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2JvdHRvbSc6XG4gICAgICAgICAgICAgICAgY2FzZSAndG9wJzpcbiAgICAgICAgICAgICAgICAgICAgd2lkdGggPSB3aW4ub3V0ZXJXaWR0aDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IHdpbi5vdXRlckhlaWdodCAtIDI4O1xuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobWUuYWRqdXN0V2luZG93UG9zaXRpb25zKSB7XG4gICAgICAgICAgICAgICAgTmVvLk1haW4ud2luZG93UmVzaXplVG8oe1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgICAgICAgICAgICB3aW5kb3dOYW1lOiBrZXlcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIG1lLmFkanVzdFBvc2l0aW9ucygpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YS5kb2NrXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGEubmFtZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkYXRhLnNpemVcbiAgICAgKi9cbiAgICByZWdpc3RlcldpbmRvdyhkYXRhKSB7XG4gICAgICAgIHRoaXMud2luZG93c1tkYXRhLm5hbWVdID0gZGF0YVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCBjb25maWdzIGZyb20gd2l0aGluIHRoZSBhcHAgd29ya2VyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YS5hcHBOYW1lXG4gICAgICovXG4gICAgc2V0Q29uZmlncyhkYXRhKSB7XG4gICAgICAgIGRlbGV0ZSBkYXRhLmFwcE5hbWU7XG4gICAgICAgIHRoaXMuc2V0KGRhdGEpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRG9ja3MgYW4gZXhpc3Rpbmcgd2luZG93IHRvIGEgbmV3IHNpZGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhLmRvY2tcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YS5uYW1lXG4gICAgICovXG4gICAgc2V0RG9jayhkYXRhKSB7XG4gICAgICAgIGxldCBtZSAgICAgICAgICAgPSB0aGlzLFxuICAgICAgICAgICAge2RvY2ssIG5hbWV9ID0gZGF0YSxcbiAgICAgICAgICAgIHdpbiAgICAgICAgICA9IG1lLndpbmRvd3NbbmFtZV0sXG4gICAgICAgICAgICBkb2NrRGlyZWN0aW9uQ2hhbmdlLCBwb3NpdGlvbjtcblxuICAgICAgICBpZiAod2luKSB7XG4gICAgICAgICAgICBkb2NrRGlyZWN0aW9uQ2hhbmdlID0gbWUuZG9ja0RpcmVjdGlvbkNoYW5nZShkb2NrLCB3aW4uZG9jayk7XG5cbiAgICAgICAgICAgIHdpbi5kb2NrID0gZG9jaztcbiAgICAgICAgICAgIHBvc2l0aW9uID0gbWUuZ2V0UG9zaXRpb24od2luKTtcblxuICAgICAgICAgICAgaWYgKGRvY2tEaXJlY3Rpb25DaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICBOZW8uTWFpbi53aW5kb3dSZXNpemVUbyh7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCAgICA6IGRvY2sgPT09ICdib3R0b20nIHx8IGRvY2sgPT09ICd0b3AnICAgPyB3aW4uc2l6ZSA6IHdpbmRvdy5vdXRlckhlaWdodCAtIDI4LFxuICAgICAgICAgICAgICAgICAgICB3aWR0aCAgICAgOiBkb2NrID09PSAnbGVmdCcgICB8fCBkb2NrID09PSAncmlnaHQnID8gd2luLnNpemUgOiB3aW5kb3cub3V0ZXJXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgd2luZG93TmFtZTogbmFtZVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIE5lby5NYWluLndpbmRvd01vdmVUbyh7XG4gICAgICAgICAgICAgICAgd2luZG93TmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgICB4ICAgICAgICAgOiBwb3NpdGlvbi5sZWZ0LFxuICAgICAgICAgICAgICAgIHkgICAgICAgICA6IHBvc2l0aW9uLnRvcFxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGEubmFtZVxuICAgICAqL1xuICAgIHVucmVnaXN0ZXJXaW5kb3coZGF0YSkge1xuICAgICAgICBkZWxldGUgdGhpcy53aW5kb3dzW2RhdGEubmFtZV1cbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE5lby5zZXR1cENsYXNzKFdpbmRvd1Bvc2l0aW9uKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==