"use strict";
(self["webpackChunkneo_mjs"] = self["webpackChunkneo_mjs"] || []).push([["src_main_addon_PrefixField_mjs"],{

/***/ "./src/main/addon/Base.mjs":
/*!*********************************!*\
  !*** ./src/main/addon/Base.mjs ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/Base.mjs */ "./src/core/Base.mjs");


/**
 * Base class for main thread addons
 * @class Neo.main.addon.Base
 * @extends Neo.core.Base
 */
class Base extends _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.main.addon.Base'
         * @protected
         */
        className: 'Neo.main.addon.Base',
        /**
         * An identifier for core.Base to get handled like singletons for remote method access
         * @member {Boolean} isMainThreadAddon=true
         * @protected
         */
        isMainThreadAddon: true,
        /**
         * Will get set to true once all addon related files got loaded (if there is a need to load)
         * @member {Boolean} isReady_=false
         * @protected
         */
        isReady_: false,
        /**
         * Amount in ms to delay the loading of library files, unless remote method access happens
         * Change the value to false in case you don't want an automated preloading
         * @member {Boolean|Number} preloadFilesDelay=5000
         * @protected
         */
        preloadFilesDelay: 5000,
    }

    /**
     * @member {Object[]} cache=[]
     */
    cache = []
    /**
     * Will get set to true once we start loading Monaco related files
     * @member {Boolean} isLoading=false
     */
    isLoading = false
    /**
     * Internal flag to store the setTimeout() id for loading external files
     * @member {Number|null} loadingTimeoutId=null
     */
    loadingTimeoutId = null

    /**
     * @param {Object} config
     */
    construct(config) {
        super.construct(config);

        let me = this;

        if (me.loadFiles) {
            if (me.preloadFilesDelay === 0) {
                me.loadFiles()
            } else if (Neo.isNumber(me.preloadFilesDelay)) {
                me.loadingTimeoutId = setTimeout(() => {
                    me.loadFiles()
                }, me.preloadFilesDelay)
            }
        }
    }

    /**
     * Triggered after the isReady config got changed
     * @param {Boolean} value
     * @param {Boolean} oldValue
     * @protected
     */
    afterSetIsReady(value, oldValue) {
        if (value) {
            let me = this,
                returnValue;

            me.cache.forEach(item => {
                returnValue = me[item.fn](item.data);
                item.resolve(returnValue)
            });

            me.cache = []
        }
    }

    /**
     * Internally caches call when isReady===false
     * Loads the library files in case this is not already happening
     * @param item
     * @returns {Promise<unknown>}
     */
    cacheMethodCall(item) {
        let me = this;

        if (!me.isLoading) {
            me.loadingTimeoutId && clearTimeout(me.loadingTimeoutId);
            me.loadingTimeoutId = null;
            me.loadFiles()
        }

        return new Promise((resolve, reject) => {
            me.cache.push({...item, resolve})
        })
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(Base));


/***/ }),

/***/ "./src/main/addon/PrefixField.mjs":
/*!****************************************!*\
  !*** ./src/main/addon/PrefixField.mjs ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Base.mjs */ "./src/main/addon/Base.mjs");


/**
 * Experimental
 * @class Neo.main.addon.PrefixField
 * @extends Neo.main.addon.Base
 */
class PrefixField extends _Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.main.addon.PrefixField'
         * @protected
         */
        className: 'Neo.main.addon.PrefixField',
        /**
         * regex to calculate if entered value is acceptable
         * Preset to numbers only
         *
         * @member {regex|null} accept
         */
        accept_: null,
        /**
         * @member {String} pattern=null
         */
        pattern_: null,
        /**
         * Remote method access for other workers
         * @member {Object} remote
         * @protected
         */
        remote: {
            app: [
                'initialize',
                'destroy',
                'updateAccept',
                'updatePattern',
                'updateSlots',
            ]
        },
        /**
         * Only add a String. A Set will be automatically created
         * @member {String|Set|null} slots=null
         */
        slots_: null
    }

    elIds = new Map()

    prev

    back = false

    destroy() {

    }

    /**
     *
     * @param {Object} data
     * @param {String} data.elId
     * @param {String} data.pattern
     * @param {String} data.slots
     * @param {String} data.accept
     */
    initialize(data) {
        const me = this;

        me.elId     = data.elId;

        const el      = me.el = document.getElementById(data.elId),
              pattern = me.pattern = data.pattern,
              slots = me.slots = new Set(data.slots || "_");

        me.accept = data.accept;
        me.prev   = (j => Array.from(pattern, (c, i) => slots.has(c) ? j = i + 1 : j))(0);
        me.first  = [...pattern].findIndex(c => slots.has(c));

        me.addListeners();
        me.addCss();
    }

    addCss() {
        this.el.classList.add('tiny-prefix-field-input');
    }

    addListeners() {
        const me       = this,
              el       = me.el,
              formatFn = me.format.bind(me);

        el.addEventListener("keypress", me.onKeyDown.bind(me));
        el.addEventListener("input", formatFn);
        el.addEventListener("focusin", formatFn);
        el.addEventListener("focusout", me.onBlur.bind(me));
    }

    onBlur() {
        const pattern = this.pattern,
              el      = this.el;

        return el.value === pattern && (el.value = "");
    }

    onKeyDown(event) {
        this.back = (event.key === "Backspace");
    }

    clean(input) {
        const el      = this.el,
              accept  = new RegExp(this.accept || "\\d", "g"),
              pattern = this.pattern,
              slots   = this.slots;

        input = input.match(accept) || [];

        return Array.from(pattern, c =>
            input[0] === c || slots.has(c) ? input.shift() || c : c
        );
    }

    format() {
        const me    = this,
              el    = this.el,
              prev  = this.prev,
              clean = this.clean.bind(this);
        console.log(el.selectionStart, el.selectionEnd);
        const [i, j] = [el.selectionStart, el.selectionEnd].map(i => {
            i = clean(el.value.slice(0, i)).findIndex(c => me.slots.has(c));
            return i < 0 ? prev[prev.length - 1] : me.back ? prev[i - 1] || me.first : i;
        });

        el.value = clean(el.value).join``;
        el.setSelectionRange(i, j);

        this.back = false;
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(PrefixField));


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,