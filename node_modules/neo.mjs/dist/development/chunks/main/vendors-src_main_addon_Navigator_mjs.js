"use strict";
(self["webpackChunkneo_mjs"] = self["webpackChunkneo_mjs"] || []).push([["vendors-src_main_addon_Navigator_mjs"],{

/***/ "./src/main/addon/Base.mjs":
/*!*********************************!*\
  !*** ./src/main/addon/Base.mjs ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/Base.mjs */ "./src/core/Base.mjs");


/**
 * Base class for main thread addons
 * @class Neo.main.addon.Base
 * @extends Neo.core.Base
 */
class Base extends _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.main.addon.Base'
         * @protected
         */
        className: 'Neo.main.addon.Base',
        /**
         * An identifier for core.Base to get handled like singletons for remote method access
         * @member {Boolean} isMainThreadAddon=true
         * @protected
         */
        isMainThreadAddon: true,
        /**
         * Will get set to true once all addon related files got loaded (if there is a need to load)
         * @member {Boolean} isReady_=false
         * @protected
         */
        isReady_: false,
        /**
         * Amount in ms to delay the loading of library files, unless remote method access happens
         * Change the value to false in case you don't want an automated preloading
         * @member {Boolean|Number} preloadFilesDelay=5000
         * @protected
         */
        preloadFilesDelay: 5000,
    }

    /**
     * @member {Object[]} cache=[]
     */
    cache = []
    /**
     * Will get set to true once we start loading Monaco related files
     * @member {Boolean} isLoading=false
     */
    isLoading = false
    /**
     * Internal flag to store the setTimeout() id for loading external files
     * @member {Number|null} loadingTimeoutId=null
     */
    loadingTimeoutId = null

    /**
     * @param {Object} config
     */
    construct(config) {
        super.construct(config);

        let me = this;

        if (me.loadFiles) {
            if (me.preloadFilesDelay === 0) {
                me.loadFiles()
            } else if (Neo.isNumber(me.preloadFilesDelay)) {
                me.loadingTimeoutId = setTimeout(() => {
                    me.loadFiles()
                }, me.preloadFilesDelay)
            }
        }
    }

    /**
     * Triggered after the isReady config got changed
     * @param {Boolean} value
     * @param {Boolean} oldValue
     * @protected
     */
    afterSetIsReady(value, oldValue) {
        if (value) {
            let me = this,
                returnValue;

            me.cache.forEach(item => {
                returnValue = me[item.fn](item.data);
                item.resolve(returnValue)
            });

            me.cache = []
        }
    }

    /**
     * Internally caches call when isReady===false
     * Loads the library files in case this is not already happening
     * @param item
     * @returns {Promise<unknown>}
     */
    cacheMethodCall(item) {
        let me = this;

        if (!me.isLoading) {
            me.loadingTimeoutId && clearTimeout(me.loadingTimeoutId);
            me.loadingTimeoutId = null;
            me.loadFiles()
        }

        return new Promise((resolve, reject) => {
            me.cache.push({...item, resolve})
        })
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(Base));


/***/ }),

/***/ "./src/main/addon/Navigator.mjs":
/*!**************************************!*\
  !*** ./src/main/addon/Navigator.mjs ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Base.mjs */ "./src/main/addon/Base.mjs");
/* harmony import */ var _DomAccess_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../DomAccess.mjs */ "./src/main/DomAccess.mjs");
/* harmony import */ var _DomEvents_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../DomEvents.mjs */ "./src/main/DomEvents.mjs");
/* harmony import */ var _DomUtils_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../DomUtils.mjs */ "./src/main/DomUtils.mjs");





// We do not need to inject a synthesized "click" event when we detect an ENTER
// keypress on these element types.
const enterActivatedTags= {
    A      : 1,
    BUTTON : 1
};

/**
 * Addon for Navigator
 * @class Neo.main.addon.Navigator
 * @extends Neo.main.addon.Base
 */
class Navigator extends _Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.main.addon.Navigator'
         * @protected
         */
        className: 'Neo.main.addon.Navigator',
        /**
         * Remote method access for other workers
         * @member {Object} remote={app: [//...]}
         * @protected
         */
        remote: {
            app: [
                'navigateTo',
                'subscribe',
                'unsubscribe'
            ]
        }
    }

    /**
     * @param {HTMLElement} el
     */
    clickItem(el) {
        // The element knows how to click itself.
        if (typeof el.click === 'function') {
            el.click()
        }
        // It operates through a listener, so needs an event firing into it.
        else {
            const
                rect    = el.getBoundingClientRect(),
                clientX = rect.x + (rect.width / 2),
                clientY = rect.y + (rect.height / 2);

            el.dispatchEvent(new MouseEvent('click', {
                bubbles  : true,
                altKey   : Neo.altKeyDown,
                ctrlKey  : Neo.controlKeyDown,
                metaKey  : Neo.metaKeyDown,
                shiftKey : Neo.shiftKeyDown,
                clientX,
                clientY
            }))
        }
    }

    /**
     * The navigables we are dealing with, if they are focusable must *not* be tabbable.
     * Only *one* must be tabbable, so that tabbing into the subject element goes to the
     * one active element.
     *
     * Tabbing *from* that must exit the subject element.
     *
     * So we must ensure that all the focusable elements except the first are not tabbable.
     * @param {Object} data
     */
    fixItemFocusability(data) {
        // If the key events are being read from an external element, then that will always contain
        // focus, so we have nothing to do here. The navigable items wil be inert and not
        // focusable. Navigation will be "virtual". Select field navigates its dropdowns like this.
        if (!data.subject.contains(data.eventSource)) {
            return
        }

        const
            // Extract all our navigable items, and find the focusable within
            focusables = Array.from(data.subject.querySelectorAll(data.selector)).reduce((value,item ) => {
                const f = _DomUtils_mjs__WEBPACK_IMPORTED_MODULE_3__["default"].query(item, _DomUtils_mjs__WEBPACK_IMPORTED_MODULE_3__["default"].isFocusable);
                if (f){
                    value.push(f);
                }
                return value
            }, []),
            defaultActiveItem = focusables[0] || data.subject.querySelector(data.selector);

        // Ensure the items are not tabbable.
        // TAB navigates out of the subject.
        focusables.forEach(e => e !== defaultActiveItem && (e.tabIndex = -1));

        // Make at least one thing tabbable so focus can move into the subject element
        if (defaultActiveItem) {
            defaultActiveItem.tabIndex = 0
        }
    }

    /**
     * @param {MouseEvent} e
     * @param {Object} data
     */
    navigateClickHandler(e, data) {
        let target = e.target.closest(data.selector);

        // If there was a focusable under the mouse, mousedown will have focused it and and we
        // will have respond to that in navigateFocusInHandler.
        // If not, we navigate programmatically.
        if (target && !data.findFocusable(target)) {
            this.navigateTo(target, data);
        }
    }

    /**
     * @param {FocusEvent} e
     * @param {Object} data
     */
    navigateFocusInHandler(e, data) {
        let target          = e.target.closest(data.selector),
            {relatedTarget} = e,
            {subject}       = data;

        // If our targets are focusable and recieve focus, that is a navigation.
        if (target) {
            this.setActiveItem(target, data);

            // This was internal navigation.
            // The items must be focusable, but *not* tabbable.
            // So remove tabbability on the last active item
            if (subject.contains(relatedTarget)) {
                relatedTarget.tabIndex = -1
            }
        }
    }

    /**
     * @param {FocusEvent} e
     * @param {Object} data
     */
    navigateFocusOutHandler(e, data) {
        let {target} = e;

        // Clear active class from the item we are leaving from.
        target.closest(data.selector)?.classList.remove(data.activeCls);

        // On focusout, leave the last active item as tabbable so user can TAB back in here
        if (!_DomUtils_mjs__WEBPACK_IMPORTED_MODULE_3__["default"].isTabbable(target)) {
            target.tabIndex = 0
        }
    }

    /**
     * @param {Number} direction
     * @param {Object} data
     */
    navigateGetAdjacent(direction=1, data) {
        let {treeWalker} = data;

        // Walk forwards or backwards to the next or previous node which matches our selector
        treeWalker.currentNode = this.navigatorGetActiveItem(data) || data.subject;
        treeWalker[direction < 0 ? 'previousNode' : 'nextNode']();

        // Found a target in the requested direction
        if (treeWalker.currentNode) {
            if (treeWalker.currentNode !== data.activeItem) {
                return treeWalker.currentNode
            }
        }
        // Could not find target in requested direction, then wrap if configured to do so
        else if (data.wrap !== false) {
            const allItems = data.subject.querySelector(data.selector);

            return allItems[direction === 1 ? 0 : allItems.length - 1]
        }
    }

    /**
     * @param {KeyboardEvent} keyEvent
     * @param {Object} data
     */
    navigateKeyDownHandler(keyEvent, data) {
        const
            me              = this,
            {subject, wrap} = data,
            firstItem       = subject.querySelector(data.selector);

        if (!data.nextKey && firstItem) {
            const
                containerStyle = getComputedStyle(subject),
                itemStyle      = getComputedStyle(firstItem);

            // Detect what the next and prev keys should be.
            // Child elements layed out horizontally.
            if (containerStyle.display === 'flex' && containerStyle.flexDirection === 'row'
                || itemStyle.display === 'inline' || itemStyle.display === 'inline-block') {
                data.previousKey = 'ArrowLeft';
                data.nextKey     = 'ArrowRight'
            }
            // Child elements layed out vertically.
            else {
                data.previousKey = 'ArrowUp';
                data.nextKey     = 'ArrowDown'
            }
        }

        let {key, target} = keyEvent,
            newActiveElement;

        switch (key) {
            // Move to the previous navigable item
            case data.previousKey:
                newActiveElement = me.navigateGetAdjacent(-1, data);
                if (!newActiveElement && wrap) {
                    newActiveElement = subject.querySelector(`${data.selector}:last-of-type`)
                }
                break;
            // Move to the next navigable item
            case data.nextKey:
                newActiveElement = me.navigateGetAdjacent(1, data);
                if (!newActiveElement && wrap) {
                    newActiveElement = subject.querySelector(data.selector)
                }
                break;
            // Move to the first navigable item
            case 'Home':
                newActiveElement = subject.querySelector(data.selector);
                break;
            // Move to the last navigable item
            case 'End':
                newActiveElement = subject.querySelector(`${data.selector}:last-of-type`);
                break;
            // Click the currently active item if necessary
            case 'Enter':
                if (data.activeItem && !enterActivatedTags[target.tagName]) {
                    this.clickItem(data.activeItem)
                }
        }

        if (newActiveElement) {
            keyEvent.preventDefault();
            me.navigateTo(newActiveElement, data)
        }
    }

    /**
     * @param {MouseEvent} e
     * @param {Object} data
     */
    navigateMouseDownHandler(e, data) {
        const target = e.target.closest(data.selector);

        // If there is a focusable under the mouse, it will take focus, and we respond to that in navigateFocusInHandler.
        // If not, we have to programmatically activate on click, but we must not draw focus away from
        // where it is, so preventDefault
        if (target && !data.findFocusable(target)) {
            e.preventDefault()
        }
    }

    /**
     * @param {HTMLElement} node
     * @param {Object} data
     */
    navigateNodeFilter(node, data) {
        return node.offsetParent && node.matches?.(data.selector) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP
    }

    /**
     * This is called if mutations take place within the subject element.
     * We have to keep things in order if the list items change.
     * @param {MutationRecord[]} mutations
     * @param {Object} data
     */
    navigateTargetChildListChange(mutations, data) {
        this.fixItemFocusability(data);

        if (data.keepFocusIndex) {
            // Active item gone.
            // Try to activate the item at the same index;
            if (data.activeItem && !data.subject.contains(data.activeItem)) {
                const allItems = data.subject.querySelectorAll(data.selector);

                allItems.length && this.navigateTo(allItems[Math.max(Math.min(data.activeIndex, allItems.length - 1), 0)], data)
            }
        }
    }

    /**
     * Navigates to the passed
     * @param {String|Number} newActiveElement The id of the new active element in the subject
     * element, or the index of the item.
     * @param {Object} data The data block as passed to {@link #subscribe}
     */
    navigateTo(newActiveElement, data) {
        if (!data.subject) {
            // If subject has been unmounted, we cannot navigate
            if (!(data = _DomAccess_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].getElement(data.id)?.$navigator)) {
                return
            }
        }

        // Can navigate by index. This is useful if the active item is deleted.
        // We can navigate to the same index and preserve UI stability.
        if (typeof newActiveElement === 'number') {
            newActiveElement = data.subject.querySelectorAll(data.selector)?.[newActiveElement]
        }
        else if (typeof newActiveElement === 'string') {
            newActiveElement = _DomAccess_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].getElement(newActiveElement)
        }

        // Could not do what was asked because we could not find the requested item
        if (!newActiveElement) {
            return;
        }

        // Scroll the target into view smoothly before we focus it without triggering a scroll
        newActiveElement.scrollIntoView({
            behavior : 'smooth',
            block    : 'nearest'
        });

        // Find a focusable element which may be the item, or inside the item to draw focus to.
        // For example a Chip list in which .neo-list-items contain focusable Chips.
        const focusTarget = _DomUtils_mjs__WEBPACK_IMPORTED_MODULE_3__["default"].query(newActiveElement, _DomUtils_mjs__WEBPACK_IMPORTED_MODULE_3__["default"].isFocusable);

        // If the item contains a focusable, we focus it and then react in navigateFocusInHandler
        if (focusTarget) {
            focusTarget.focus({ preventScroll : true })
        }
        // If not, we programmatically navigate there
        else {
            this.setActiveItem(newActiveElement, data)
        }
    }

    /**
     * @param {Object} data
     * @returns {HTMLElement|null}
     */
    navigatorGetActiveItem(data) {
        let activeItem = data.activeItem && _DomAccess_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].getElement(data.activeItem.id) || null;

        if (!activeItem && ('activeIndex' in data)) {
            const allItems = data.subject.querySelectorAll(data.selector);

            activeItem = allItems[Math.max(Math.min(data.activeIndex, allItems.length - 1), 0)]
        }
        return activeItem
    }

    /**
     * @param {HTMLElement} newActiveElement
     * @param {Object} data
     */
    setActiveItem(newActiveElement, data) {
        const allItems = Array.from(data.subject.querySelectorAll(data.selector));

        // Can navigate by index. This is useful if the active item is deleted.
        // We can navigate to the same index and preserve UI stability.
        if (typeof newActiveElement === 'number') {
            newActiveElement = allItems[Math.max(Math.min(newActiveElement, allItems.length - 1), 0)]
        }

        data.previousActiveIndex = data.activeIndex;
        (data.previousActiveItem = data.activeItem)?.classList.remove(data.activeCls);
        (data.activeItem = newActiveElement)?.classList.add(data.activeCls);
        data.activeIndex = newActiveElement ? allItems.indexOf(newActiveElement) : -1;

        newActiveElement.scrollIntoView({
            behavior: 'smooth',
            block   : 'nearest',
            inline  : 'nearest'
        });

        // Link the event source or the encapsulating element to the active item for A11Y
        (data.eventSource || data.subject).setAttribute('aria-activedescendant', data.activeItem.id);

        // navigating to the same element should get ignored
        if (data.activeItem !== data.previousActiveItem) {
            _DomEvents_mjs__WEBPACK_IMPORTED_MODULE_2__["default"].sendMessageToApp({
                type                : 'neonavigate',
                target              : data.id,
                path                : [{
                    id : data.id
                }],
                activeItem          : data.activeItem.id,
                previousActiveItem  : data.previousActiveItem?.id,
                activeIndex         : data.activeIndex,
                previousActiveIndex : data.previousActiveIndex,
                altKey              : Neo.altKeyDown,
                ctrlKey             : Neo.controlKeyDown,
                metaKey             : Neo.metaKeyDown,
                shiftKey            : Neo.shiftKeyDown
            })
        }

        // Navigation causes click if autoClick set.
        // TabPanels work like this.
        if (data.autoClick) {
            this.clickItem(newActiveElement)
        }
    }

    /**
     * Sets up keyboard based navigation within the passed element id.
     *
     * When navigation occurs from one navigable element to another, the `navigate` event
     * will be fired.
     *
     * Note that if focus is expected to enter the subject, the navigable elements
     * designated by the `selector` must be focusable in some way. So if not using natively
     * focusable elements, they must have `tabIndex="-1"`.
     *
     * Upon navigation, the `aria-activedescendant` property is automatically updated
     * on the `eventSource` element (which defaults to the subject element, but may be external)
     *
     * Pressing `Enter` when an item is active clicks that item.
     *
     * if `autoClick` is set to `true` in the data, simply navigating to an element will click it.
     * @param {*} data
     * @param {String} data.id The element id to navigate in.
     * @param {String} [data.eventSource] Optional - the element id to read keystrokes from.
     * defaults to the main element id. Select field uses this. Focus remains in the field's
     * `<input>` element while navigating its dropdown.
     * @param {String} data.selector A CSS selector which identifies the navigable elements.
     * @param {String} data.activeCls A CSS class to add to the currently active navigable element.
     * @param {Boolean} data.wrap Pass as `true` to have navigation wrap from first to last and vice versa.
     * @param {Boolean} [data.autoClick=false] Pass as `true` to have navigation click the target navigated to.
     * TabPanels will use this on their tab toolbar.
     */
    subscribe(data) {
        const
            me          = this,
            subject     = data.subject = _DomAccess_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].getElement(data.id),
            eventSource = data.eventSource = data.eventSource ? _DomAccess_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].getElement(data.eventSource) : subject;

        if (subject) {
            subject.$navigator = data;

            if (!data.activeCls) {
                data.activeCls = 'neo-navigator-active-item'
            }

            // Ensure that only *one* of the child focusables is actually tabbable.
            // We use arrow keys for internal navigation. TAB must move out.
            me.fixItemFocusability(data);

            // Finds a focusable item starting from a descendant el within one of our selector items
            data.findFocusable = el => _DomUtils_mjs__WEBPACK_IMPORTED_MODULE_3__["default"].closest(el, el =>
                // We're looking for an element that is focusable
                _DomUtils_mjs__WEBPACK_IMPORTED_MODULE_3__["default"].isFocusable(el) &&
                // And within our subject element
                (subject.compareDocumentPosition(el) & Node.DOCUMENT_POSITION_CONTAINED_BY) &&
                // And within an element that matches our selector
                el.closest(data.selector)
            );

            // TreeWalker so that we can easily move between navigable elements within the target.
            data.treeWalker = document.createTreeWalker(subject, NodeFilter.SHOW_ELEMENT, node => me.navigateNodeFilter(node, data));

            // We have to know when the DOM mutates in case the active item is removed.
            (data.targetMutationMonitor = new MutationObserver(e => me.navigateTargetChildListChange(e, data))).observe(subject, {
                childList : true,
                subtree   : true
            });

            eventSource.addEventListener('keydown', data.l1 = e => me.navigateKeyDownHandler(e, data));
            subject.addEventListener('mousedown',   data.l2 = e => me.navigateMouseDownHandler(e, data));
            subject.addEventListener('click',       data.l3 = e => me.navigateClickHandler(e, data));
            subject.addEventListener('focusin',     data.l4 = e => me.navigateFocusInHandler(e, data));
            subject.addEventListener('focusout',    data.l5 = e => me.navigateFocusOutHandler(e, data))
        }
    }

    /**
     * @param {Object} data
     */
    unsubscribe(data) {
        const target = _DomAccess_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].getElement(data.id);

        data = target?.$navigator;

        if (data) {
            delete target.$navigator;
            data.targetMutationMonitor.disconnect();
            data.eventSource.removeEventListener('keydown', data.l1);
            target.removeEventListener('mousedown',    data.l2);
            target.removeEventListener('click',        data.l3);
            target.removeEventListener('focusin',      data.l4);
            target.removeEventListener('focusout',     data.l5)
        }
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(Navigator));


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2h1bmtzL21haW4vdmVuZG9ycy1zcmNfbWFpbl9hZGRvbl9OYXZpZ2F0b3JfbWpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQTJDOztBQUUzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHNEQUFRO0FBQzNCO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFNBQVM7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixTQUFTO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixnQkFBZ0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxnQkFBZ0IsVUFBVTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixTQUFTO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGFBQWE7QUFDN0I7QUFDQTs7QUFFQTtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxlQUFlLFNBQVM7QUFDeEIsZUFBZSxTQUFTO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhOztBQUViO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDJCQUEyQixpQkFBaUI7QUFDNUMsU0FBUztBQUNUO0FBQ0E7O0FBRUEsaUVBQWUsb0JBQW9CLEVBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUM5R0Q7QUFDTTtBQUNBO0FBQ0Q7O0FBRXhDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7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QUFnQixxREFBUTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQSx1QkFBdUIsc0RBQVM7O0FBRWhDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsaUVBQWUseUJBQXlCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZW8ubWpzLy4vc3JjL21haW4vYWRkb24vQmFzZS5tanMiLCJ3ZWJwYWNrOi8vbmVvLm1qcy8uL3NyYy9tYWluL2FkZG9uL05hdmlnYXRvci5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENvcmVCYXNlIGZyb20gJy4uLy4uL2NvcmUvQmFzZS5tanMnO1xuXG4vKipcbiAqIEJhc2UgY2xhc3MgZm9yIG1haW4gdGhyZWFkIGFkZG9uc1xuICogQGNsYXNzIE5lby5tYWluLmFkZG9uLkJhc2VcbiAqIEBleHRlbmRzIE5lby5jb3JlLkJhc2VcbiAqL1xuY2xhc3MgQmFzZSBleHRlbmRzIENvcmVCYXNlIHtcbiAgICBzdGF0aWMgY29uZmlnID0ge1xuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSBjbGFzc05hbWU9J05lby5tYWluLmFkZG9uLkJhc2UnXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIGNsYXNzTmFtZTogJ05lby5tYWluLmFkZG9uLkJhc2UnLFxuICAgICAgICAvKipcbiAgICAgICAgICogQW4gaWRlbnRpZmllciBmb3IgY29yZS5CYXNlIHRvIGdldCBoYW5kbGVkIGxpa2Ugc2luZ2xldG9ucyBmb3IgcmVtb3RlIG1ldGhvZCBhY2Nlc3NcbiAgICAgICAgICogQG1lbWJlciB7Qm9vbGVhbn0gaXNNYWluVGhyZWFkQWRkb249dHJ1ZVxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBpc01haW5UaHJlYWRBZGRvbjogdHJ1ZSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdpbGwgZ2V0IHNldCB0byB0cnVlIG9uY2UgYWxsIGFkZG9uIHJlbGF0ZWQgZmlsZXMgZ290IGxvYWRlZCAoaWYgdGhlcmUgaXMgYSBuZWVkIHRvIGxvYWQpXG4gICAgICAgICAqIEBtZW1iZXIge0Jvb2xlYW59IGlzUmVhZHlfPWZhbHNlXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIGlzUmVhZHlfOiBmYWxzZSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFtb3VudCBpbiBtcyB0byBkZWxheSB0aGUgbG9hZGluZyBvZiBsaWJyYXJ5IGZpbGVzLCB1bmxlc3MgcmVtb3RlIG1ldGhvZCBhY2Nlc3MgaGFwcGVuc1xuICAgICAgICAgKiBDaGFuZ2UgdGhlIHZhbHVlIHRvIGZhbHNlIGluIGNhc2UgeW91IGRvbid0IHdhbnQgYW4gYXV0b21hdGVkIHByZWxvYWRpbmdcbiAgICAgICAgICogQG1lbWJlciB7Qm9vbGVhbnxOdW1iZXJ9IHByZWxvYWRGaWxlc0RlbGF5PTUwMDBcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgcHJlbG9hZEZpbGVzRGVsYXk6IDUwMDAsXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG1lbWJlciB7T2JqZWN0W119IGNhY2hlPVtdXG4gICAgICovXG4gICAgY2FjaGUgPSBbXVxuICAgIC8qKlxuICAgICAqIFdpbGwgZ2V0IHNldCB0byB0cnVlIG9uY2Ugd2Ugc3RhcnQgbG9hZGluZyBNb25hY28gcmVsYXRlZCBmaWxlc1xuICAgICAqIEBtZW1iZXIge0Jvb2xlYW59IGlzTG9hZGluZz1mYWxzZVxuICAgICAqL1xuICAgIGlzTG9hZGluZyA9IGZhbHNlXG4gICAgLyoqXG4gICAgICogSW50ZXJuYWwgZmxhZyB0byBzdG9yZSB0aGUgc2V0VGltZW91dCgpIGlkIGZvciBsb2FkaW5nIGV4dGVybmFsIGZpbGVzXG4gICAgICogQG1lbWJlciB7TnVtYmVyfG51bGx9IGxvYWRpbmdUaW1lb3V0SWQ9bnVsbFxuICAgICAqL1xuICAgIGxvYWRpbmdUaW1lb3V0SWQgPSBudWxsXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnXG4gICAgICovXG4gICAgY29uc3RydWN0KGNvbmZpZykge1xuICAgICAgICBzdXBlci5jb25zdHJ1Y3QoY29uZmlnKTtcblxuICAgICAgICBsZXQgbWUgPSB0aGlzO1xuXG4gICAgICAgIGlmIChtZS5sb2FkRmlsZXMpIHtcbiAgICAgICAgICAgIGlmIChtZS5wcmVsb2FkRmlsZXNEZWxheSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIG1lLmxvYWRGaWxlcygpXG4gICAgICAgICAgICB9IGVsc2UgaWYgKE5lby5pc051bWJlcihtZS5wcmVsb2FkRmlsZXNEZWxheSkpIHtcbiAgICAgICAgICAgICAgICBtZS5sb2FkaW5nVGltZW91dElkID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIG1lLmxvYWRGaWxlcygpXG4gICAgICAgICAgICAgICAgfSwgbWUucHJlbG9hZEZpbGVzRGVsYXkpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgYWZ0ZXIgdGhlIGlzUmVhZHkgY29uZmlnIGdvdCBjaGFuZ2VkXG4gICAgICogQHBhcmFtIHtCb29sZWFufSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gb2xkVmFsdWVcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgYWZ0ZXJTZXRJc1JlYWR5KHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIGxldCBtZSA9IHRoaXMsXG4gICAgICAgICAgICAgICAgcmV0dXJuVmFsdWU7XG5cbiAgICAgICAgICAgIG1lLmNhY2hlLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuVmFsdWUgPSBtZVtpdGVtLmZuXShpdGVtLmRhdGEpO1xuICAgICAgICAgICAgICAgIGl0ZW0ucmVzb2x2ZShyZXR1cm5WYWx1ZSlcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBtZS5jYWNoZSA9IFtdXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnRlcm5hbGx5IGNhY2hlcyBjYWxsIHdoZW4gaXNSZWFkeT09PWZhbHNlXG4gICAgICogTG9hZHMgdGhlIGxpYnJhcnkgZmlsZXMgaW4gY2FzZSB0aGlzIGlzIG5vdCBhbHJlYWR5IGhhcHBlbmluZ1xuICAgICAqIEBwYXJhbSBpdGVtXG4gICAgICogQHJldHVybnMge1Byb21pc2U8dW5rbm93bj59XG4gICAgICovXG4gICAgY2FjaGVNZXRob2RDYWxsKGl0ZW0pIHtcbiAgICAgICAgbGV0IG1lID0gdGhpcztcblxuICAgICAgICBpZiAoIW1lLmlzTG9hZGluZykge1xuICAgICAgICAgICAgbWUubG9hZGluZ1RpbWVvdXRJZCAmJiBjbGVhclRpbWVvdXQobWUubG9hZGluZ1RpbWVvdXRJZCk7XG4gICAgICAgICAgICBtZS5sb2FkaW5nVGltZW91dElkID0gbnVsbDtcbiAgICAgICAgICAgIG1lLmxvYWRGaWxlcygpXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgbWUuY2FjaGUucHVzaCh7Li4uaXRlbSwgcmVzb2x2ZX0pXG4gICAgICAgIH0pXG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBOZW8uc2V0dXBDbGFzcyhCYXNlKTtcbiIsImltcG9ydCBCYXNlICAgICAgZnJvbSAnLi9CYXNlLm1qcyc7XG5pbXBvcnQgRG9tQWNjZXNzIGZyb20gJy4uL0RvbUFjY2Vzcy5tanMnO1xuaW1wb3J0IERvbUV2ZW50cyBmcm9tICcuLi9Eb21FdmVudHMubWpzJztcbmltcG9ydCBEb21VdGlscyAgZnJvbSAnLi4vRG9tVXRpbHMubWpzJztcblxuLy8gV2UgZG8gbm90IG5lZWQgdG8gaW5qZWN0IGEgc3ludGhlc2l6ZWQgXCJjbGlja1wiIGV2ZW50IHdoZW4gd2UgZGV0ZWN0IGFuIEVOVEVSXG4vLyBrZXlwcmVzcyBvbiB0aGVzZSBlbGVtZW50IHR5cGVzLlxuY29uc3QgZW50ZXJBY3RpdmF0ZWRUYWdzPSB7XG4gICAgQSAgICAgIDogMSxcbiAgICBCVVRUT04gOiAxXG59O1xuXG4vKipcbiAqIEFkZG9uIGZvciBOYXZpZ2F0b3JcbiAqIEBjbGFzcyBOZW8ubWFpbi5hZGRvbi5OYXZpZ2F0b3JcbiAqIEBleHRlbmRzIE5lby5tYWluLmFkZG9uLkJhc2VcbiAqL1xuY2xhc3MgTmF2aWdhdG9yIGV4dGVuZHMgQmFzZSB7XG4gICAgc3RhdGljIGNvbmZpZyA9IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gY2xhc3NOYW1lPSdOZW8ubWFpbi5hZGRvbi5OYXZpZ2F0b3InXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIGNsYXNzTmFtZTogJ05lby5tYWluLmFkZG9uLk5hdmlnYXRvcicsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZW1vdGUgbWV0aG9kIGFjY2VzcyBmb3Igb3RoZXIgd29ya2Vyc1xuICAgICAgICAgKiBAbWVtYmVyIHtPYmplY3R9IHJlbW90ZT17YXBwOiBbLy8uLi5dfVxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICByZW1vdGU6IHtcbiAgICAgICAgICAgIGFwcDogW1xuICAgICAgICAgICAgICAgICduYXZpZ2F0ZVRvJyxcbiAgICAgICAgICAgICAgICAnc3Vic2NyaWJlJyxcbiAgICAgICAgICAgICAgICAndW5zdWJzY3JpYmUnXG4gICAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbFxuICAgICAqL1xuICAgIGNsaWNrSXRlbShlbCkge1xuICAgICAgICAvLyBUaGUgZWxlbWVudCBrbm93cyBob3cgdG8gY2xpY2sgaXRzZWxmLlxuICAgICAgICBpZiAodHlwZW9mIGVsLmNsaWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBlbC5jbGljaygpXG4gICAgICAgIH1cbiAgICAgICAgLy8gSXQgb3BlcmF0ZXMgdGhyb3VnaCBhIGxpc3RlbmVyLCBzbyBuZWVkcyBhbiBldmVudCBmaXJpbmcgaW50byBpdC5cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdFxuICAgICAgICAgICAgICAgIHJlY3QgICAgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgICAgICAgICBjbGllbnRYID0gcmVjdC54ICsgKHJlY3Qud2lkdGggLyAyKSxcbiAgICAgICAgICAgICAgICBjbGllbnRZID0gcmVjdC55ICsgKHJlY3QuaGVpZ2h0IC8gMik7XG5cbiAgICAgICAgICAgIGVsLmRpc3BhdGNoRXZlbnQobmV3IE1vdXNlRXZlbnQoJ2NsaWNrJywge1xuICAgICAgICAgICAgICAgIGJ1YmJsZXMgIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhbHRLZXkgICA6IE5lby5hbHRLZXlEb3duLFxuICAgICAgICAgICAgICAgIGN0cmxLZXkgIDogTmVvLmNvbnRyb2xLZXlEb3duLFxuICAgICAgICAgICAgICAgIG1ldGFLZXkgIDogTmVvLm1ldGFLZXlEb3duLFxuICAgICAgICAgICAgICAgIHNoaWZ0S2V5IDogTmVvLnNoaWZ0S2V5RG93bixcbiAgICAgICAgICAgICAgICBjbGllbnRYLFxuICAgICAgICAgICAgICAgIGNsaWVudFlcbiAgICAgICAgICAgIH0pKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG5hdmlnYWJsZXMgd2UgYXJlIGRlYWxpbmcgd2l0aCwgaWYgdGhleSBhcmUgZm9jdXNhYmxlIG11c3QgKm5vdCogYmUgdGFiYmFibGUuXG4gICAgICogT25seSAqb25lKiBtdXN0IGJlIHRhYmJhYmxlLCBzbyB0aGF0IHRhYmJpbmcgaW50byB0aGUgc3ViamVjdCBlbGVtZW50IGdvZXMgdG8gdGhlXG4gICAgICogb25lIGFjdGl2ZSBlbGVtZW50LlxuICAgICAqXG4gICAgICogVGFiYmluZyAqZnJvbSogdGhhdCBtdXN0IGV4aXQgdGhlIHN1YmplY3QgZWxlbWVudC5cbiAgICAgKlxuICAgICAqIFNvIHdlIG11c3QgZW5zdXJlIHRoYXQgYWxsIHRoZSBmb2N1c2FibGUgZWxlbWVudHMgZXhjZXB0IHRoZSBmaXJzdCBhcmUgbm90IHRhYmJhYmxlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAgICovXG4gICAgZml4SXRlbUZvY3VzYWJpbGl0eShkYXRhKSB7XG4gICAgICAgIC8vIElmIHRoZSBrZXkgZXZlbnRzIGFyZSBiZWluZyByZWFkIGZyb20gYW4gZXh0ZXJuYWwgZWxlbWVudCwgdGhlbiB0aGF0IHdpbGwgYWx3YXlzIGNvbnRhaW5cbiAgICAgICAgLy8gZm9jdXMsIHNvIHdlIGhhdmUgbm90aGluZyB0byBkbyBoZXJlLiBUaGUgbmF2aWdhYmxlIGl0ZW1zIHdpbCBiZSBpbmVydCBhbmQgbm90XG4gICAgICAgIC8vIGZvY3VzYWJsZS4gTmF2aWdhdGlvbiB3aWxsIGJlIFwidmlydHVhbFwiLiBTZWxlY3QgZmllbGQgbmF2aWdhdGVzIGl0cyBkcm9wZG93bnMgbGlrZSB0aGlzLlxuICAgICAgICBpZiAoIWRhdGEuc3ViamVjdC5jb250YWlucyhkYXRhLmV2ZW50U291cmNlKSkge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdFxuICAgICAgICAgICAgLy8gRXh0cmFjdCBhbGwgb3VyIG5hdmlnYWJsZSBpdGVtcywgYW5kIGZpbmQgdGhlIGZvY3VzYWJsZSB3aXRoaW5cbiAgICAgICAgICAgIGZvY3VzYWJsZXMgPSBBcnJheS5mcm9tKGRhdGEuc3ViamVjdC5xdWVyeVNlbGVjdG9yQWxsKGRhdGEuc2VsZWN0b3IpKS5yZWR1Y2UoKHZhbHVlLGl0ZW0gKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZiA9IERvbVV0aWxzLnF1ZXJ5KGl0ZW0sIERvbVV0aWxzLmlzRm9jdXNhYmxlKTtcbiAgICAgICAgICAgICAgICBpZiAoZil7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlLnB1c2goZik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZVxuICAgICAgICAgICAgfSwgW10pLFxuICAgICAgICAgICAgZGVmYXVsdEFjdGl2ZUl0ZW0gPSBmb2N1c2FibGVzWzBdIHx8IGRhdGEuc3ViamVjdC5xdWVyeVNlbGVjdG9yKGRhdGEuc2VsZWN0b3IpO1xuXG4gICAgICAgIC8vIEVuc3VyZSB0aGUgaXRlbXMgYXJlIG5vdCB0YWJiYWJsZS5cbiAgICAgICAgLy8gVEFCIG5hdmlnYXRlcyBvdXQgb2YgdGhlIHN1YmplY3QuXG4gICAgICAgIGZvY3VzYWJsZXMuZm9yRWFjaChlID0+IGUgIT09IGRlZmF1bHRBY3RpdmVJdGVtICYmIChlLnRhYkluZGV4ID0gLTEpKTtcblxuICAgICAgICAvLyBNYWtlIGF0IGxlYXN0IG9uZSB0aGluZyB0YWJiYWJsZSBzbyBmb2N1cyBjYW4gbW92ZSBpbnRvIHRoZSBzdWJqZWN0IGVsZW1lbnRcbiAgICAgICAgaWYgKGRlZmF1bHRBY3RpdmVJdGVtKSB7XG4gICAgICAgICAgICBkZWZhdWx0QWN0aXZlSXRlbS50YWJJbmRleCA9IDBcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7TW91c2VFdmVudH0gZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAgICovXG4gICAgbmF2aWdhdGVDbGlja0hhbmRsZXIoZSwgZGF0YSkge1xuICAgICAgICBsZXQgdGFyZ2V0ID0gZS50YXJnZXQuY2xvc2VzdChkYXRhLnNlbGVjdG9yKTtcblxuICAgICAgICAvLyBJZiB0aGVyZSB3YXMgYSBmb2N1c2FibGUgdW5kZXIgdGhlIG1vdXNlLCBtb3VzZWRvd24gd2lsbCBoYXZlIGZvY3VzZWQgaXQgYW5kIGFuZCB3ZVxuICAgICAgICAvLyB3aWxsIGhhdmUgcmVzcG9uZCB0byB0aGF0IGluIG5hdmlnYXRlRm9jdXNJbkhhbmRsZXIuXG4gICAgICAgIC8vIElmIG5vdCwgd2UgbmF2aWdhdGUgcHJvZ3JhbW1hdGljYWxseS5cbiAgICAgICAgaWYgKHRhcmdldCAmJiAhZGF0YS5maW5kRm9jdXNhYmxlKHRhcmdldCkpIHtcbiAgICAgICAgICAgIHRoaXMubmF2aWdhdGVUbyh0YXJnZXQsIGRhdGEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtGb2N1c0V2ZW50fSBlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICAgKi9cbiAgICBuYXZpZ2F0ZUZvY3VzSW5IYW5kbGVyKGUsIGRhdGEpIHtcbiAgICAgICAgbGV0IHRhcmdldCAgICAgICAgICA9IGUudGFyZ2V0LmNsb3Nlc3QoZGF0YS5zZWxlY3RvciksXG4gICAgICAgICAgICB7cmVsYXRlZFRhcmdldH0gPSBlLFxuICAgICAgICAgICAge3N1YmplY3R9ICAgICAgID0gZGF0YTtcblxuICAgICAgICAvLyBJZiBvdXIgdGFyZ2V0cyBhcmUgZm9jdXNhYmxlIGFuZCByZWNpZXZlIGZvY3VzLCB0aGF0IGlzIGEgbmF2aWdhdGlvbi5cbiAgICAgICAgaWYgKHRhcmdldCkge1xuICAgICAgICAgICAgdGhpcy5zZXRBY3RpdmVJdGVtKHRhcmdldCwgZGF0YSk7XG5cbiAgICAgICAgICAgIC8vIFRoaXMgd2FzIGludGVybmFsIG5hdmlnYXRpb24uXG4gICAgICAgICAgICAvLyBUaGUgaXRlbXMgbXVzdCBiZSBmb2N1c2FibGUsIGJ1dCAqbm90KiB0YWJiYWJsZS5cbiAgICAgICAgICAgIC8vIFNvIHJlbW92ZSB0YWJiYWJpbGl0eSBvbiB0aGUgbGFzdCBhY3RpdmUgaXRlbVxuICAgICAgICAgICAgaWYgKHN1YmplY3QuY29udGFpbnMocmVsYXRlZFRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICByZWxhdGVkVGFyZ2V0LnRhYkluZGV4ID0gLTFcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Rm9jdXNFdmVudH0gZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAgICovXG4gICAgbmF2aWdhdGVGb2N1c091dEhhbmRsZXIoZSwgZGF0YSkge1xuICAgICAgICBsZXQge3RhcmdldH0gPSBlO1xuXG4gICAgICAgIC8vIENsZWFyIGFjdGl2ZSBjbGFzcyBmcm9tIHRoZSBpdGVtIHdlIGFyZSBsZWF2aW5nIGZyb20uXG4gICAgICAgIHRhcmdldC5jbG9zZXN0KGRhdGEuc2VsZWN0b3IpPy5jbGFzc0xpc3QucmVtb3ZlKGRhdGEuYWN0aXZlQ2xzKTtcblxuICAgICAgICAvLyBPbiBmb2N1c291dCwgbGVhdmUgdGhlIGxhc3QgYWN0aXZlIGl0ZW0gYXMgdGFiYmFibGUgc28gdXNlciBjYW4gVEFCIGJhY2sgaW4gaGVyZVxuICAgICAgICBpZiAoIURvbVV0aWxzLmlzVGFiYmFibGUodGFyZ2V0KSkge1xuICAgICAgICAgICAgdGFyZ2V0LnRhYkluZGV4ID0gMFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGRpcmVjdGlvblxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAgICovXG4gICAgbmF2aWdhdGVHZXRBZGphY2VudChkaXJlY3Rpb249MSwgZGF0YSkge1xuICAgICAgICBsZXQge3RyZWVXYWxrZXJ9ID0gZGF0YTtcblxuICAgICAgICAvLyBXYWxrIGZvcndhcmRzIG9yIGJhY2t3YXJkcyB0byB0aGUgbmV4dCBvciBwcmV2aW91cyBub2RlIHdoaWNoIG1hdGNoZXMgb3VyIHNlbGVjdG9yXG4gICAgICAgIHRyZWVXYWxrZXIuY3VycmVudE5vZGUgPSB0aGlzLm5hdmlnYXRvckdldEFjdGl2ZUl0ZW0oZGF0YSkgfHwgZGF0YS5zdWJqZWN0O1xuICAgICAgICB0cmVlV2Fsa2VyW2RpcmVjdGlvbiA8IDAgPyAncHJldmlvdXNOb2RlJyA6ICduZXh0Tm9kZSddKCk7XG5cbiAgICAgICAgLy8gRm91bmQgYSB0YXJnZXQgaW4gdGhlIHJlcXVlc3RlZCBkaXJlY3Rpb25cbiAgICAgICAgaWYgKHRyZWVXYWxrZXIuY3VycmVudE5vZGUpIHtcbiAgICAgICAgICAgIGlmICh0cmVlV2Fsa2VyLmN1cnJlbnROb2RlICE9PSBkYXRhLmFjdGl2ZUl0ZW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJlZVdhbGtlci5jdXJyZW50Tm9kZVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIENvdWxkIG5vdCBmaW5kIHRhcmdldCBpbiByZXF1ZXN0ZWQgZGlyZWN0aW9uLCB0aGVuIHdyYXAgaWYgY29uZmlndXJlZCB0byBkbyBzb1xuICAgICAgICBlbHNlIGlmIChkYXRhLndyYXAgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICBjb25zdCBhbGxJdGVtcyA9IGRhdGEuc3ViamVjdC5xdWVyeVNlbGVjdG9yKGRhdGEuc2VsZWN0b3IpO1xuXG4gICAgICAgICAgICByZXR1cm4gYWxsSXRlbXNbZGlyZWN0aW9uID09PSAxID8gMCA6IGFsbEl0ZW1zLmxlbmd0aCAtIDFdXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0tleWJvYXJkRXZlbnR9IGtleUV2ZW50XG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICAgKi9cbiAgICBuYXZpZ2F0ZUtleURvd25IYW5kbGVyKGtleUV2ZW50LCBkYXRhKSB7XG4gICAgICAgIGNvbnN0XG4gICAgICAgICAgICBtZSAgICAgICAgICAgICAgPSB0aGlzLFxuICAgICAgICAgICAge3N1YmplY3QsIHdyYXB9ID0gZGF0YSxcbiAgICAgICAgICAgIGZpcnN0SXRlbSAgICAgICA9IHN1YmplY3QucXVlcnlTZWxlY3RvcihkYXRhLnNlbGVjdG9yKTtcblxuICAgICAgICBpZiAoIWRhdGEubmV4dEtleSAmJiBmaXJzdEl0ZW0pIHtcbiAgICAgICAgICAgIGNvbnN0XG4gICAgICAgICAgICAgICAgY29udGFpbmVyU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKHN1YmplY3QpLFxuICAgICAgICAgICAgICAgIGl0ZW1TdHlsZSAgICAgID0gZ2V0Q29tcHV0ZWRTdHlsZShmaXJzdEl0ZW0pO1xuXG4gICAgICAgICAgICAvLyBEZXRlY3Qgd2hhdCB0aGUgbmV4dCBhbmQgcHJldiBrZXlzIHNob3VsZCBiZS5cbiAgICAgICAgICAgIC8vIENoaWxkIGVsZW1lbnRzIGxheWVkIG91dCBob3Jpem9udGFsbHkuXG4gICAgICAgICAgICBpZiAoY29udGFpbmVyU3R5bGUuZGlzcGxheSA9PT0gJ2ZsZXgnICYmIGNvbnRhaW5lclN0eWxlLmZsZXhEaXJlY3Rpb24gPT09ICdyb3cnXG4gICAgICAgICAgICAgICAgfHwgaXRlbVN0eWxlLmRpc3BsYXkgPT09ICdpbmxpbmUnIHx8IGl0ZW1TdHlsZS5kaXNwbGF5ID09PSAnaW5saW5lLWJsb2NrJykge1xuICAgICAgICAgICAgICAgIGRhdGEucHJldmlvdXNLZXkgPSAnQXJyb3dMZWZ0JztcbiAgICAgICAgICAgICAgICBkYXRhLm5leHRLZXkgICAgID0gJ0Fycm93UmlnaHQnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBDaGlsZCBlbGVtZW50cyBsYXllZCBvdXQgdmVydGljYWxseS5cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGRhdGEucHJldmlvdXNLZXkgPSAnQXJyb3dVcCc7XG4gICAgICAgICAgICAgICAgZGF0YS5uZXh0S2V5ICAgICA9ICdBcnJvd0Rvd24nXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsZXQge2tleSwgdGFyZ2V0fSA9IGtleUV2ZW50LFxuICAgICAgICAgICAgbmV3QWN0aXZlRWxlbWVudDtcblxuICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgICAgLy8gTW92ZSB0byB0aGUgcHJldmlvdXMgbmF2aWdhYmxlIGl0ZW1cbiAgICAgICAgICAgIGNhc2UgZGF0YS5wcmV2aW91c0tleTpcbiAgICAgICAgICAgICAgICBuZXdBY3RpdmVFbGVtZW50ID0gbWUubmF2aWdhdGVHZXRBZGphY2VudCgtMSwgZGF0YSk7XG4gICAgICAgICAgICAgICAgaWYgKCFuZXdBY3RpdmVFbGVtZW50ICYmIHdyYXApIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3QWN0aXZlRWxlbWVudCA9IHN1YmplY3QucXVlcnlTZWxlY3RvcihgJHtkYXRhLnNlbGVjdG9yfTpsYXN0LW9mLXR5cGVgKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIC8vIE1vdmUgdG8gdGhlIG5leHQgbmF2aWdhYmxlIGl0ZW1cbiAgICAgICAgICAgIGNhc2UgZGF0YS5uZXh0S2V5OlxuICAgICAgICAgICAgICAgIG5ld0FjdGl2ZUVsZW1lbnQgPSBtZS5uYXZpZ2F0ZUdldEFkamFjZW50KDEsIGRhdGEpO1xuICAgICAgICAgICAgICAgIGlmICghbmV3QWN0aXZlRWxlbWVudCAmJiB3cmFwKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld0FjdGl2ZUVsZW1lbnQgPSBzdWJqZWN0LnF1ZXJ5U2VsZWN0b3IoZGF0YS5zZWxlY3RvcilcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAvLyBNb3ZlIHRvIHRoZSBmaXJzdCBuYXZpZ2FibGUgaXRlbVxuICAgICAgICAgICAgY2FzZSAnSG9tZSc6XG4gICAgICAgICAgICAgICAgbmV3QWN0aXZlRWxlbWVudCA9IHN1YmplY3QucXVlcnlTZWxlY3RvcihkYXRhLnNlbGVjdG9yKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIC8vIE1vdmUgdG8gdGhlIGxhc3QgbmF2aWdhYmxlIGl0ZW1cbiAgICAgICAgICAgIGNhc2UgJ0VuZCc6XG4gICAgICAgICAgICAgICAgbmV3QWN0aXZlRWxlbWVudCA9IHN1YmplY3QucXVlcnlTZWxlY3RvcihgJHtkYXRhLnNlbGVjdG9yfTpsYXN0LW9mLXR5cGVgKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIC8vIENsaWNrIHRoZSBjdXJyZW50bHkgYWN0aXZlIGl0ZW0gaWYgbmVjZXNzYXJ5XG4gICAgICAgICAgICBjYXNlICdFbnRlcic6XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuYWN0aXZlSXRlbSAmJiAhZW50ZXJBY3RpdmF0ZWRUYWdzW3RhcmdldC50YWdOYW1lXSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsaWNrSXRlbShkYXRhLmFjdGl2ZUl0ZW0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5ld0FjdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgICAgIGtleUV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBtZS5uYXZpZ2F0ZVRvKG5ld0FjdGl2ZUVsZW1lbnQsIGRhdGEpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge01vdXNlRXZlbnR9IGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICAgICAqL1xuICAgIG5hdmlnYXRlTW91c2VEb3duSGFuZGxlcihlLCBkYXRhKSB7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0LmNsb3Nlc3QoZGF0YS5zZWxlY3Rvcik7XG5cbiAgICAgICAgLy8gSWYgdGhlcmUgaXMgYSBmb2N1c2FibGUgdW5kZXIgdGhlIG1vdXNlLCBpdCB3aWxsIHRha2UgZm9jdXMsIGFuZCB3ZSByZXNwb25kIHRvIHRoYXQgaW4gbmF2aWdhdGVGb2N1c0luSGFuZGxlci5cbiAgICAgICAgLy8gSWYgbm90LCB3ZSBoYXZlIHRvIHByb2dyYW1tYXRpY2FsbHkgYWN0aXZhdGUgb24gY2xpY2ssIGJ1dCB3ZSBtdXN0IG5vdCBkcmF3IGZvY3VzIGF3YXkgZnJvbVxuICAgICAgICAvLyB3aGVyZSBpdCBpcywgc28gcHJldmVudERlZmF1bHRcbiAgICAgICAgaWYgKHRhcmdldCAmJiAhZGF0YS5maW5kRm9jdXNhYmxlKHRhcmdldCkpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gbm9kZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAgICovXG4gICAgbmF2aWdhdGVOb2RlRmlsdGVyKG5vZGUsIGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIG5vZGUub2Zmc2V0UGFyZW50ICYmIG5vZGUubWF0Y2hlcz8uKGRhdGEuc2VsZWN0b3IpID8gTm9kZUZpbHRlci5GSUxURVJfQUNDRVBUIDogTm9kZUZpbHRlci5GSUxURVJfU0tJUFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgaXMgY2FsbGVkIGlmIG11dGF0aW9ucyB0YWtlIHBsYWNlIHdpdGhpbiB0aGUgc3ViamVjdCBlbGVtZW50LlxuICAgICAqIFdlIGhhdmUgdG8ga2VlcCB0aGluZ3MgaW4gb3JkZXIgaWYgdGhlIGxpc3QgaXRlbXMgY2hhbmdlLlxuICAgICAqIEBwYXJhbSB7TXV0YXRpb25SZWNvcmRbXX0gbXV0YXRpb25zXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICAgKi9cbiAgICBuYXZpZ2F0ZVRhcmdldENoaWxkTGlzdENoYW5nZShtdXRhdGlvbnMsIGRhdGEpIHtcbiAgICAgICAgdGhpcy5maXhJdGVtRm9jdXNhYmlsaXR5KGRhdGEpO1xuXG4gICAgICAgIGlmIChkYXRhLmtlZXBGb2N1c0luZGV4KSB7XG4gICAgICAgICAgICAvLyBBY3RpdmUgaXRlbSBnb25lLlxuICAgICAgICAgICAgLy8gVHJ5IHRvIGFjdGl2YXRlIHRoZSBpdGVtIGF0IHRoZSBzYW1lIGluZGV4O1xuICAgICAgICAgICAgaWYgKGRhdGEuYWN0aXZlSXRlbSAmJiAhZGF0YS5zdWJqZWN0LmNvbnRhaW5zKGRhdGEuYWN0aXZlSXRlbSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhbGxJdGVtcyA9IGRhdGEuc3ViamVjdC5xdWVyeVNlbGVjdG9yQWxsKGRhdGEuc2VsZWN0b3IpO1xuXG4gICAgICAgICAgICAgICAgYWxsSXRlbXMubGVuZ3RoICYmIHRoaXMubmF2aWdhdGVUbyhhbGxJdGVtc1tNYXRoLm1heChNYXRoLm1pbihkYXRhLmFjdGl2ZUluZGV4LCBhbGxJdGVtcy5sZW5ndGggLSAxKSwgMCldLCBkYXRhKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTmF2aWdhdGVzIHRvIHRoZSBwYXNzZWRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IG5ld0FjdGl2ZUVsZW1lbnQgVGhlIGlkIG9mIHRoZSBuZXcgYWN0aXZlIGVsZW1lbnQgaW4gdGhlIHN1YmplY3RcbiAgICAgKiBlbGVtZW50LCBvciB0aGUgaW5kZXggb2YgdGhlIGl0ZW0uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGEgVGhlIGRhdGEgYmxvY2sgYXMgcGFzc2VkIHRvIHtAbGluayAjc3Vic2NyaWJlfVxuICAgICAqL1xuICAgIG5hdmlnYXRlVG8obmV3QWN0aXZlRWxlbWVudCwgZGF0YSkge1xuICAgICAgICBpZiAoIWRhdGEuc3ViamVjdCkge1xuICAgICAgICAgICAgLy8gSWYgc3ViamVjdCBoYXMgYmVlbiB1bm1vdW50ZWQsIHdlIGNhbm5vdCBuYXZpZ2F0ZVxuICAgICAgICAgICAgaWYgKCEoZGF0YSA9IERvbUFjY2Vzcy5nZXRFbGVtZW50KGRhdGEuaWQpPy4kbmF2aWdhdG9yKSkge1xuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2FuIG5hdmlnYXRlIGJ5IGluZGV4LiBUaGlzIGlzIHVzZWZ1bCBpZiB0aGUgYWN0aXZlIGl0ZW0gaXMgZGVsZXRlZC5cbiAgICAgICAgLy8gV2UgY2FuIG5hdmlnYXRlIHRvIHRoZSBzYW1lIGluZGV4IGFuZCBwcmVzZXJ2ZSBVSSBzdGFiaWxpdHkuXG4gICAgICAgIGlmICh0eXBlb2YgbmV3QWN0aXZlRWxlbWVudCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIG5ld0FjdGl2ZUVsZW1lbnQgPSBkYXRhLnN1YmplY3QucXVlcnlTZWxlY3RvckFsbChkYXRhLnNlbGVjdG9yKT8uW25ld0FjdGl2ZUVsZW1lbnRdXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIG5ld0FjdGl2ZUVsZW1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBuZXdBY3RpdmVFbGVtZW50ID0gRG9tQWNjZXNzLmdldEVsZW1lbnQobmV3QWN0aXZlRWxlbWVudClcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENvdWxkIG5vdCBkbyB3aGF0IHdhcyBhc2tlZCBiZWNhdXNlIHdlIGNvdWxkIG5vdCBmaW5kIHRoZSByZXF1ZXN0ZWQgaXRlbVxuICAgICAgICBpZiAoIW5ld0FjdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNjcm9sbCB0aGUgdGFyZ2V0IGludG8gdmlldyBzbW9vdGhseSBiZWZvcmUgd2UgZm9jdXMgaXQgd2l0aG91dCB0cmlnZ2VyaW5nIGEgc2Nyb2xsXG4gICAgICAgIG5ld0FjdGl2ZUVsZW1lbnQuc2Nyb2xsSW50b1ZpZXcoe1xuICAgICAgICAgICAgYmVoYXZpb3IgOiAnc21vb3RoJyxcbiAgICAgICAgICAgIGJsb2NrICAgIDogJ25lYXJlc3QnXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEZpbmQgYSBmb2N1c2FibGUgZWxlbWVudCB3aGljaCBtYXkgYmUgdGhlIGl0ZW0sIG9yIGluc2lkZSB0aGUgaXRlbSB0byBkcmF3IGZvY3VzIHRvLlxuICAgICAgICAvLyBGb3IgZXhhbXBsZSBhIENoaXAgbGlzdCBpbiB3aGljaCAubmVvLWxpc3QtaXRlbXMgY29udGFpbiBmb2N1c2FibGUgQ2hpcHMuXG4gICAgICAgIGNvbnN0IGZvY3VzVGFyZ2V0ID0gRG9tVXRpbHMucXVlcnkobmV3QWN0aXZlRWxlbWVudCwgRG9tVXRpbHMuaXNGb2N1c2FibGUpO1xuXG4gICAgICAgIC8vIElmIHRoZSBpdGVtIGNvbnRhaW5zIGEgZm9jdXNhYmxlLCB3ZSBmb2N1cyBpdCBhbmQgdGhlbiByZWFjdCBpbiBuYXZpZ2F0ZUZvY3VzSW5IYW5kbGVyXG4gICAgICAgIGlmIChmb2N1c1RhcmdldCkge1xuICAgICAgICAgICAgZm9jdXNUYXJnZXQuZm9jdXMoeyBwcmV2ZW50U2Nyb2xsIDogdHJ1ZSB9KVxuICAgICAgICB9XG4gICAgICAgIC8vIElmIG5vdCwgd2UgcHJvZ3JhbW1hdGljYWxseSBuYXZpZ2F0ZSB0aGVyZVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2V0QWN0aXZlSXRlbShuZXdBY3RpdmVFbGVtZW50LCBkYXRhKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR8bnVsbH1cbiAgICAgKi9cbiAgICBuYXZpZ2F0b3JHZXRBY3RpdmVJdGVtKGRhdGEpIHtcbiAgICAgICAgbGV0IGFjdGl2ZUl0ZW0gPSBkYXRhLmFjdGl2ZUl0ZW0gJiYgRG9tQWNjZXNzLmdldEVsZW1lbnQoZGF0YS5hY3RpdmVJdGVtLmlkKSB8fCBudWxsO1xuXG4gICAgICAgIGlmICghYWN0aXZlSXRlbSAmJiAoJ2FjdGl2ZUluZGV4JyBpbiBkYXRhKSkge1xuICAgICAgICAgICAgY29uc3QgYWxsSXRlbXMgPSBkYXRhLnN1YmplY3QucXVlcnlTZWxlY3RvckFsbChkYXRhLnNlbGVjdG9yKTtcblxuICAgICAgICAgICAgYWN0aXZlSXRlbSA9IGFsbEl0ZW1zW01hdGgubWF4KE1hdGgubWluKGRhdGEuYWN0aXZlSW5kZXgsIGFsbEl0ZW1zLmxlbmd0aCAtIDEpLCAwKV1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWN0aXZlSXRlbVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IG5ld0FjdGl2ZUVsZW1lbnRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICAgICAqL1xuICAgIHNldEFjdGl2ZUl0ZW0obmV3QWN0aXZlRWxlbWVudCwgZGF0YSkge1xuICAgICAgICBjb25zdCBhbGxJdGVtcyA9IEFycmF5LmZyb20oZGF0YS5zdWJqZWN0LnF1ZXJ5U2VsZWN0b3JBbGwoZGF0YS5zZWxlY3RvcikpO1xuXG4gICAgICAgIC8vIENhbiBuYXZpZ2F0ZSBieSBpbmRleC4gVGhpcyBpcyB1c2VmdWwgaWYgdGhlIGFjdGl2ZSBpdGVtIGlzIGRlbGV0ZWQuXG4gICAgICAgIC8vIFdlIGNhbiBuYXZpZ2F0ZSB0byB0aGUgc2FtZSBpbmRleCBhbmQgcHJlc2VydmUgVUkgc3RhYmlsaXR5LlxuICAgICAgICBpZiAodHlwZW9mIG5ld0FjdGl2ZUVsZW1lbnQgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBuZXdBY3RpdmVFbGVtZW50ID0gYWxsSXRlbXNbTWF0aC5tYXgoTWF0aC5taW4obmV3QWN0aXZlRWxlbWVudCwgYWxsSXRlbXMubGVuZ3RoIC0gMSksIDApXVxuICAgICAgICB9XG5cbiAgICAgICAgZGF0YS5wcmV2aW91c0FjdGl2ZUluZGV4ID0gZGF0YS5hY3RpdmVJbmRleDtcbiAgICAgICAgKGRhdGEucHJldmlvdXNBY3RpdmVJdGVtID0gZGF0YS5hY3RpdmVJdGVtKT8uY2xhc3NMaXN0LnJlbW92ZShkYXRhLmFjdGl2ZUNscyk7XG4gICAgICAgIChkYXRhLmFjdGl2ZUl0ZW0gPSBuZXdBY3RpdmVFbGVtZW50KT8uY2xhc3NMaXN0LmFkZChkYXRhLmFjdGl2ZUNscyk7XG4gICAgICAgIGRhdGEuYWN0aXZlSW5kZXggPSBuZXdBY3RpdmVFbGVtZW50ID8gYWxsSXRlbXMuaW5kZXhPZihuZXdBY3RpdmVFbGVtZW50KSA6IC0xO1xuXG4gICAgICAgIG5ld0FjdGl2ZUVsZW1lbnQuc2Nyb2xsSW50b1ZpZXcoe1xuICAgICAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnLFxuICAgICAgICAgICAgYmxvY2sgICA6ICduZWFyZXN0JyxcbiAgICAgICAgICAgIGlubGluZSAgOiAnbmVhcmVzdCdcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gTGluayB0aGUgZXZlbnQgc291cmNlIG9yIHRoZSBlbmNhcHN1bGF0aW5nIGVsZW1lbnQgdG8gdGhlIGFjdGl2ZSBpdGVtIGZvciBBMTFZXG4gICAgICAgIChkYXRhLmV2ZW50U291cmNlIHx8IGRhdGEuc3ViamVjdCkuc2V0QXR0cmlidXRlKCdhcmlhLWFjdGl2ZWRlc2NlbmRhbnQnLCBkYXRhLmFjdGl2ZUl0ZW0uaWQpO1xuXG4gICAgICAgIC8vIG5hdmlnYXRpbmcgdG8gdGhlIHNhbWUgZWxlbWVudCBzaG91bGQgZ2V0IGlnbm9yZWRcbiAgICAgICAgaWYgKGRhdGEuYWN0aXZlSXRlbSAhPT0gZGF0YS5wcmV2aW91c0FjdGl2ZUl0ZW0pIHtcbiAgICAgICAgICAgIERvbUV2ZW50cy5zZW5kTWVzc2FnZVRvQXBwKHtcbiAgICAgICAgICAgICAgICB0eXBlICAgICAgICAgICAgICAgIDogJ25lb25hdmlnYXRlJyxcbiAgICAgICAgICAgICAgICB0YXJnZXQgICAgICAgICAgICAgIDogZGF0YS5pZCxcbiAgICAgICAgICAgICAgICBwYXRoICAgICAgICAgICAgICAgIDogW3tcbiAgICAgICAgICAgICAgICAgICAgaWQgOiBkYXRhLmlkXG4gICAgICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICAgICAgYWN0aXZlSXRlbSAgICAgICAgICA6IGRhdGEuYWN0aXZlSXRlbS5pZCxcbiAgICAgICAgICAgICAgICBwcmV2aW91c0FjdGl2ZUl0ZW0gIDogZGF0YS5wcmV2aW91c0FjdGl2ZUl0ZW0/LmlkLFxuICAgICAgICAgICAgICAgIGFjdGl2ZUluZGV4ICAgICAgICAgOiBkYXRhLmFjdGl2ZUluZGV4LFxuICAgICAgICAgICAgICAgIHByZXZpb3VzQWN0aXZlSW5kZXggOiBkYXRhLnByZXZpb3VzQWN0aXZlSW5kZXgsXG4gICAgICAgICAgICAgICAgYWx0S2V5ICAgICAgICAgICAgICA6IE5lby5hbHRLZXlEb3duLFxuICAgICAgICAgICAgICAgIGN0cmxLZXkgICAgICAgICAgICAgOiBOZW8uY29udHJvbEtleURvd24sXG4gICAgICAgICAgICAgICAgbWV0YUtleSAgICAgICAgICAgICA6IE5lby5tZXRhS2V5RG93bixcbiAgICAgICAgICAgICAgICBzaGlmdEtleSAgICAgICAgICAgIDogTmVvLnNoaWZ0S2V5RG93blxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE5hdmlnYXRpb24gY2F1c2VzIGNsaWNrIGlmIGF1dG9DbGljayBzZXQuXG4gICAgICAgIC8vIFRhYlBhbmVscyB3b3JrIGxpa2UgdGhpcy5cbiAgICAgICAgaWYgKGRhdGEuYXV0b0NsaWNrKSB7XG4gICAgICAgICAgICB0aGlzLmNsaWNrSXRlbShuZXdBY3RpdmVFbGVtZW50KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB1cCBrZXlib2FyZCBiYXNlZCBuYXZpZ2F0aW9uIHdpdGhpbiB0aGUgcGFzc2VkIGVsZW1lbnQgaWQuXG4gICAgICpcbiAgICAgKiBXaGVuIG5hdmlnYXRpb24gb2NjdXJzIGZyb20gb25lIG5hdmlnYWJsZSBlbGVtZW50IHRvIGFub3RoZXIsIHRoZSBgbmF2aWdhdGVgIGV2ZW50XG4gICAgICogd2lsbCBiZSBmaXJlZC5cbiAgICAgKlxuICAgICAqIE5vdGUgdGhhdCBpZiBmb2N1cyBpcyBleHBlY3RlZCB0byBlbnRlciB0aGUgc3ViamVjdCwgdGhlIG5hdmlnYWJsZSBlbGVtZW50c1xuICAgICAqIGRlc2lnbmF0ZWQgYnkgdGhlIGBzZWxlY3RvcmAgbXVzdCBiZSBmb2N1c2FibGUgaW4gc29tZSB3YXkuIFNvIGlmIG5vdCB1c2luZyBuYXRpdmVseVxuICAgICAqIGZvY3VzYWJsZSBlbGVtZW50cywgdGhleSBtdXN0IGhhdmUgYHRhYkluZGV4PVwiLTFcImAuXG4gICAgICpcbiAgICAgKiBVcG9uIG5hdmlnYXRpb24sIHRoZSBgYXJpYS1hY3RpdmVkZXNjZW5kYW50YCBwcm9wZXJ0eSBpcyBhdXRvbWF0aWNhbGx5IHVwZGF0ZWRcbiAgICAgKiBvbiB0aGUgYGV2ZW50U291cmNlYCBlbGVtZW50ICh3aGljaCBkZWZhdWx0cyB0byB0aGUgc3ViamVjdCBlbGVtZW50LCBidXQgbWF5IGJlIGV4dGVybmFsKVxuICAgICAqXG4gICAgICogUHJlc3NpbmcgYEVudGVyYCB3aGVuIGFuIGl0ZW0gaXMgYWN0aXZlIGNsaWNrcyB0aGF0IGl0ZW0uXG4gICAgICpcbiAgICAgKiBpZiBgYXV0b0NsaWNrYCBpcyBzZXQgdG8gYHRydWVgIGluIHRoZSBkYXRhLCBzaW1wbHkgbmF2aWdhdGluZyB0byBhbiBlbGVtZW50IHdpbGwgY2xpY2sgaXQuXG4gICAgICogQHBhcmFtIHsqfSBkYXRhXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGEuaWQgVGhlIGVsZW1lbnQgaWQgdG8gbmF2aWdhdGUgaW4uXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtkYXRhLmV2ZW50U291cmNlXSBPcHRpb25hbCAtIHRoZSBlbGVtZW50IGlkIHRvIHJlYWQga2V5c3Ryb2tlcyBmcm9tLlxuICAgICAqIGRlZmF1bHRzIHRvIHRoZSBtYWluIGVsZW1lbnQgaWQuIFNlbGVjdCBmaWVsZCB1c2VzIHRoaXMuIEZvY3VzIHJlbWFpbnMgaW4gdGhlIGZpZWxkJ3NcbiAgICAgKiBgPGlucHV0PmAgZWxlbWVudCB3aGlsZSBuYXZpZ2F0aW5nIGl0cyBkcm9wZG93bi5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YS5zZWxlY3RvciBBIENTUyBzZWxlY3RvciB3aGljaCBpZGVudGlmaWVzIHRoZSBuYXZpZ2FibGUgZWxlbWVudHMuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGEuYWN0aXZlQ2xzIEEgQ1NTIGNsYXNzIHRvIGFkZCB0byB0aGUgY3VycmVudGx5IGFjdGl2ZSBuYXZpZ2FibGUgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGRhdGEud3JhcCBQYXNzIGFzIGB0cnVlYCB0byBoYXZlIG5hdmlnYXRpb24gd3JhcCBmcm9tIGZpcnN0IHRvIGxhc3QgYW5kIHZpY2UgdmVyc2EuXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbZGF0YS5hdXRvQ2xpY2s9ZmFsc2VdIFBhc3MgYXMgYHRydWVgIHRvIGhhdmUgbmF2aWdhdGlvbiBjbGljayB0aGUgdGFyZ2V0IG5hdmlnYXRlZCB0by5cbiAgICAgKiBUYWJQYW5lbHMgd2lsbCB1c2UgdGhpcyBvbiB0aGVpciB0YWIgdG9vbGJhci5cbiAgICAgKi9cbiAgICBzdWJzY3JpYmUoZGF0YSkge1xuICAgICAgICBjb25zdFxuICAgICAgICAgICAgbWUgICAgICAgICAgPSB0aGlzLFxuICAgICAgICAgICAgc3ViamVjdCAgICAgPSBkYXRhLnN1YmplY3QgPSBEb21BY2Nlc3MuZ2V0RWxlbWVudChkYXRhLmlkKSxcbiAgICAgICAgICAgIGV2ZW50U291cmNlID0gZGF0YS5ldmVudFNvdXJjZSA9IGRhdGEuZXZlbnRTb3VyY2UgPyBEb21BY2Nlc3MuZ2V0RWxlbWVudChkYXRhLmV2ZW50U291cmNlKSA6IHN1YmplY3Q7XG5cbiAgICAgICAgaWYgKHN1YmplY3QpIHtcbiAgICAgICAgICAgIHN1YmplY3QuJG5hdmlnYXRvciA9IGRhdGE7XG5cbiAgICAgICAgICAgIGlmICghZGF0YS5hY3RpdmVDbHMpIHtcbiAgICAgICAgICAgICAgICBkYXRhLmFjdGl2ZUNscyA9ICduZW8tbmF2aWdhdG9yLWFjdGl2ZS1pdGVtJ1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBFbnN1cmUgdGhhdCBvbmx5ICpvbmUqIG9mIHRoZSBjaGlsZCBmb2N1c2FibGVzIGlzIGFjdHVhbGx5IHRhYmJhYmxlLlxuICAgICAgICAgICAgLy8gV2UgdXNlIGFycm93IGtleXMgZm9yIGludGVybmFsIG5hdmlnYXRpb24uIFRBQiBtdXN0IG1vdmUgb3V0LlxuICAgICAgICAgICAgbWUuZml4SXRlbUZvY3VzYWJpbGl0eShkYXRhKTtcblxuICAgICAgICAgICAgLy8gRmluZHMgYSBmb2N1c2FibGUgaXRlbSBzdGFydGluZyBmcm9tIGEgZGVzY2VuZGFudCBlbCB3aXRoaW4gb25lIG9mIG91ciBzZWxlY3RvciBpdGVtc1xuICAgICAgICAgICAgZGF0YS5maW5kRm9jdXNhYmxlID0gZWwgPT4gRG9tVXRpbHMuY2xvc2VzdChlbCwgZWwgPT5cbiAgICAgICAgICAgICAgICAvLyBXZSdyZSBsb29raW5nIGZvciBhbiBlbGVtZW50IHRoYXQgaXMgZm9jdXNhYmxlXG4gICAgICAgICAgICAgICAgRG9tVXRpbHMuaXNGb2N1c2FibGUoZWwpICYmXG4gICAgICAgICAgICAgICAgLy8gQW5kIHdpdGhpbiBvdXIgc3ViamVjdCBlbGVtZW50XG4gICAgICAgICAgICAgICAgKHN1YmplY3QuY29tcGFyZURvY3VtZW50UG9zaXRpb24oZWwpICYgTm9kZS5ET0NVTUVOVF9QT1NJVElPTl9DT05UQUlORURfQlkpICYmXG4gICAgICAgICAgICAgICAgLy8gQW5kIHdpdGhpbiBhbiBlbGVtZW50IHRoYXQgbWF0Y2hlcyBvdXIgc2VsZWN0b3JcbiAgICAgICAgICAgICAgICBlbC5jbG9zZXN0KGRhdGEuc2VsZWN0b3IpXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAvLyBUcmVlV2Fsa2VyIHNvIHRoYXQgd2UgY2FuIGVhc2lseSBtb3ZlIGJldHdlZW4gbmF2aWdhYmxlIGVsZW1lbnRzIHdpdGhpbiB0aGUgdGFyZ2V0LlxuICAgICAgICAgICAgZGF0YS50cmVlV2Fsa2VyID0gZG9jdW1lbnQuY3JlYXRlVHJlZVdhbGtlcihzdWJqZWN0LCBOb2RlRmlsdGVyLlNIT1dfRUxFTUVOVCwgbm9kZSA9PiBtZS5uYXZpZ2F0ZU5vZGVGaWx0ZXIobm9kZSwgZGF0YSkpO1xuXG4gICAgICAgICAgICAvLyBXZSBoYXZlIHRvIGtub3cgd2hlbiB0aGUgRE9NIG11dGF0ZXMgaW4gY2FzZSB0aGUgYWN0aXZlIGl0ZW0gaXMgcmVtb3ZlZC5cbiAgICAgICAgICAgIChkYXRhLnRhcmdldE11dGF0aW9uTW9uaXRvciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGUgPT4gbWUubmF2aWdhdGVUYXJnZXRDaGlsZExpc3RDaGFuZ2UoZSwgZGF0YSkpKS5vYnNlcnZlKHN1YmplY3QsIHtcbiAgICAgICAgICAgICAgICBjaGlsZExpc3QgOiB0cnVlLFxuICAgICAgICAgICAgICAgIHN1YnRyZWUgICA6IHRydWVcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBldmVudFNvdXJjZS5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZGF0YS5sMSA9IGUgPT4gbWUubmF2aWdhdGVLZXlEb3duSGFuZGxlcihlLCBkYXRhKSk7XG4gICAgICAgICAgICBzdWJqZWN0LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsICAgZGF0YS5sMiA9IGUgPT4gbWUubmF2aWdhdGVNb3VzZURvd25IYW5kbGVyKGUsIGRhdGEpKTtcbiAgICAgICAgICAgIHN1YmplY3QuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAgICAgICBkYXRhLmwzID0gZSA9PiBtZS5uYXZpZ2F0ZUNsaWNrSGFuZGxlcihlLCBkYXRhKSk7XG4gICAgICAgICAgICBzdWJqZWN0LmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzaW4nLCAgICAgZGF0YS5sNCA9IGUgPT4gbWUubmF2aWdhdGVGb2N1c0luSGFuZGxlcihlLCBkYXRhKSk7XG4gICAgICAgICAgICBzdWJqZWN0LmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3Vzb3V0JywgICAgZGF0YS5sNSA9IGUgPT4gbWUubmF2aWdhdGVGb2N1c091dEhhbmRsZXIoZSwgZGF0YSkpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICAgICAqL1xuICAgIHVuc3Vic2NyaWJlKGRhdGEpIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gRG9tQWNjZXNzLmdldEVsZW1lbnQoZGF0YS5pZCk7XG5cbiAgICAgICAgZGF0YSA9IHRhcmdldD8uJG5hdmlnYXRvcjtcblxuICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgZGVsZXRlIHRhcmdldC4kbmF2aWdhdG9yO1xuICAgICAgICAgICAgZGF0YS50YXJnZXRNdXRhdGlvbk1vbml0b3IuZGlzY29ubmVjdCgpO1xuICAgICAgICAgICAgZGF0YS5ldmVudFNvdXJjZS5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZGF0YS5sMSk7XG4gICAgICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgICAgZGF0YS5sMik7XG4gICAgICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCAgICAgICAgZGF0YS5sMyk7XG4gICAgICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignZm9jdXNpbicsICAgICAgZGF0YS5sNCk7XG4gICAgICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignZm9jdXNvdXQnLCAgICAgZGF0YS5sNSlcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTmVvLnNldHVwQ2xhc3MoTmF2aWdhdG9yKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==