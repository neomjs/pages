"use strict";
(self["webpackChunkneo_mjs"] = self["webpackChunkneo_mjs"] || []).push([["vendors-src_main_addon_OpenStreetMaps_mjs"],{

/***/ "./src/main/addon/Base.mjs":
/*!*********************************!*\
  !*** ./src/main/addon/Base.mjs ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/Base.mjs */ "./src/core/Base.mjs");


/**
 * Base class for main thread addons
 * @class Neo.main.addon.Base
 * @extends Neo.core.Base
 *
 * This version aligns the file loading and readiness state according to the rule:
 * `initAsync()` MUST await for `loadFiles()` to be completed before the addon is considered `isReady`.
 * `preloadFilesDelay` controls when `loadFiles()` is initiated in the background, but can be
 * overridden by `cacheMethodCall()`.
 */
class Base extends _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.main.addon.Base'
         * @protected
         */
        className: 'Neo.main.addon.Base',
        /**
         * An identifier for core.Base to get handled like singletons for remote method access
         * @member {Boolean} isMainThreadAddon=true
         * @protected
         */
        isMainThreadAddon: true,
        /**
         * Amount in ms to delay the background loading of library files.
         * Set to `false` to disable automated preloading and rely solely on lazy loading
         * via `cacheMethodCall()`. Set to `0` for immediate background preload.
         * @member {Boolean|Number} preloadFilesDelay=5000
         * @protected
         */
        preloadFilesDelay: 5000
    }

    /**
     * Internal cache for remote method calls received when `isReady` is false.
     * @member {Object[]} cache=[]
     */
    cache = []
    /**
     * Returns true if `loadFiles()` has been initiated and is currently in progress.
     * @member {Boolean} isLoading
     */
    get isLoading() {
        // isLoading is true if the promise exists and its resolver is still available (meaning it's pending).
        return !!this.#loadFilesPromise && !!this.#loadFilesPromiseResolver
    }
    /**
     * A private promise that tracks the completion of `loadFiles()`.
     * This ensures `loadFiles()` is called only once and can be awaited by multiple consumers.
     * @member {Promise<void>|null} #loadFilesPromise=null
     */
    #loadFilesPromise = null
    /**
     * The `resolve` function for `#loadFilesPromise`, allowing external control over its resolution.
     * @member {Function|null} #loadFilesPromiseResolver=null
     */
    #loadFilesPromiseResolver = null

    /**
     * @param {Object} config
     */
    construct(config) {
        super.construct(config);

        let me = this;

        // Initialize #loadFilesPromise as a controllable promise.
        // This promise will be awaited by initAsync and resolved by executeLoadFiles.
        me.#loadFilesPromise = new Promise(resolve => {
            me.#loadFilesPromiseResolver = resolve
        });

        if (me.preloadFilesDelay === false) {
            // No automated preload: resolve #loadFilesPromise immediately as it won't be triggered by delay.
            // It will only be triggered by cacheMethodCall or initAsync if needed.
            me.#loadFilesPromiseResolver();
            me.#loadFilesPromiseResolver = null // Mark as resolved/no longer pending
        } else {
            const delay = Neo.isNumber(me.preloadFilesDelay) ? me.preloadFilesDelay : 0;

            if (delay === 0) {
                // Immediate preload: Directly execute loadFiles and resolve the promise.
                me.#executeLoadFiles()
            } else {
                // Delayed preload: Set up a timer to execute loadFiles later.
                me.timeout(delay).then(() => {
                    // This callback checks if #loadFilesPromise is still pending (resolver is available).
                    if (me.#loadFilesPromiseResolver) {
                        me.#executeLoadFiles()
                    }
                })
            }
        }
    }

    /**
     * Executes the actual `loadFiles()` method and resolves `#loadFilesPromise`.
     * This method is called internally to manage the single execution of `loadFiles()`.
     * It ensures `loadFiles()` is only truly called once.
     * @private
     */
    async #executeLoadFiles() {
        let me = this;

        // Only execute if the promise is still pending (resolver is available).
        if (me.#loadFilesPromiseResolver) {
            const resolver = me.#loadFilesPromiseResolver;
            me.#loadFilesPromiseResolver = null; // Mark as no longer pending/resolved

            await me.loadFiles();
            resolver() // Resolve the main #loadFilesPromise
        }
    }

    /**
     * Async initialization hook for instances.
     * `initAsync` MUST await for `loadFiles()` to be completed. Only then the addon is ready.
     * @returns {Promise<void>}
     */
    async initAsync() {
        await super.initAsync();

        let me = this;

        // `initAsync` must always wait for `me.#loadFilesPromise` to complete its resolution,
        // regardless of how it was triggered (immediate, delayed, or by cacheMethodCall).
        // `me.#loadFilesPromise` is always initialized in `construct()`.
        await me.#loadFilesPromise
    }

    /**
     * Triggered after the `isReady` config got changed.
     * When `isReady` becomes true, any cached remote method calls are executed.
     * At this point, `initAsync` has already ensured that `me.#loadFilesPromise` is resolved.
     *
     * This method is kept synchronous, delegating the async cache processing to a private method.
     *
     * @param {Boolean} value
     * @param {Boolean} oldValue
     * @protected
     */
    afterSetIsReady(value, oldValue) { // Keep this synchronous
        if (value) {
            // Initiate the asynchronous processing of cached method calls.
            // This method itself does not need to be awaited here.
            this.#processCachedMethodCalls();
        }
    }

    /**
     * Internally caches remote method calls if `isReady` is false.
     * It also ensures that `loadFiles()` is initiated immediately, bypassing `preloadFilesDelay`.
     * @param {Object} item - Contains method name (`fn`) and data (`data`).
     * @returns {Promise<unknown>} A promise that resolves with the method's return value.
     */
    cacheMethodCall(item) {
        let me = this;

        // If loadFiles is defined, and it hasn't started yet (i.e., #loadFilesPromiseResolver is still available),
        // execute it now, bypassing any pending preloadFilesDelay timer.
        if (me.#loadFilesPromiseResolver) {
            me.#executeLoadFiles() // This will resolve #loadFilesPromise immediately
        }

        return new Promise((resolve, reject) => {
            me.cache.push({...item, reject, resolve})
        })
    }

    /**
     * Placeholder method for loading external files.
     * Subclasses (e.g., `Neo.main.addon.AmCharts`) must implement this.
     * It **must** return a Promise that resolves when all necessary files are loaded.
     * If `loadFiles()` is called multiple times, it should return the same pending promise
     * or a resolved promise if files are already loaded.
     * @returns {Promise<void>}
     */
    async loadFiles() {}

    /**
     * Handles intercepted remote method calls.
     * If the addon is not ready, the call is cached using `cacheMethodCall()`.
     * Otherwise, the original method is executed.
     * @param {Object} msg The remote message object.
     * @returns {Promise<any>} A promise that resolves with the method's return value.
     */
    onInterceptRemotes(msg) {
        return this.cacheMethodCall({fn: msg.remoteMethod, data: msg.data})
    }

    /**
     * Sequentially processes any method calls that were cached while the addon was not ready.
     * This method is asynchronous to allow awaiting the execution of individual cached methods.
     * @returns {Promise<void>} A promise that resolves when all cached methods have been processed.
     * @private
     */
    async #processCachedMethodCalls() {
        let me = this;

        // Iterate over the cache items and await each one in sequence
        for (const item of me.cache) {
            let returnValue;

            try {
                returnValue = me[item.fn](item.data);

                if (Neo.isPromise(returnValue)) {
                    returnValue = await returnValue;
                }

                item.resolve(returnValue)
            } catch (e) {
                // If an error occurs (either synchronous or a promise rejection),
                // reject the promise associated with the current cached item.
                item.reject(e)

                // *** FAIL-FAST STRATEGY ***
                // If any cached method call fails, we assume subsequent cached calls
                // (especially for the same addon instance) are likely to also fail.
                break
            }
        }

        me.cache = []
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(Base));


/***/ }),

/***/ "./src/main/addon/OpenStreetMaps.mjs":
/*!*******************************************!*\
  !*** ./src/main/addon/OpenStreetMaps.mjs ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Base.mjs */ "./src/main/addon/Base.mjs");
/* harmony import */ var _DomAccess_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../DomAccess.mjs */ "./src/main/DomAccess.mjs");
/* harmony import */ var _DomEvents_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../DomEvents.mjs */ "./src/main/DomEvents.mjs");
/* harmony import */ var _core_Observable_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/Observable.mjs */ "./src/core/Observable.mjs");





/**
 * @class Neo.main.addon.OpenStreetMaps
 * @extends Neo.main.addon.Base
 * @mixes Neo.core.Observable
 */
class OpenStreetMaps extends _Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    /**
     * True automatically applies the core.Observable mixin
     * @member {Boolean} observable=true
     * @static
     */
    static observable = true

    static config = {
        /**
         * @member {String} className='Neo.main.addon.OpenStreetMaps'
         * @protected
         */
        className: 'Neo.main.addon.OpenStreetMaps',

        interceptRemotes: ['create'],
        /**
         * @member {Object} remote
         * @protected
         */
        remote: {
            app: [
                'addMarker',
                'create',
                'destroyMarkers',
                'geocode',
                'hideMarker',
                'panTo',
                'removeMap',
                'removeMarker',
                'setCenter',
                'setZoom',
                'showMarker'
            ]
        }
    }

    /**
     * @member {Object} maps={}
     */
    maps = {}
    /**
     * @member {Object} markers={}
     */
    markers = {}
    /**
     * @member {Object} vectorLayers={}
     */
    vectorLayers = {}
    /**
     * @member {Object} vectorSources={}
     */
    vectorSources = {}

    /**
     * @param {Object} data
     * @param {Object} [data.anchorPoint] x & y
     * @param {String} [data.icon]
     * @param {String} data.id
     * @param {String} [data.label]
     * @param {String} data.mapId
     * @param {Object} data.position
     * @param {String} [data.title]
     */
    addMarker(data) {
        // TODO: Implement OpenLayers marker creation
    }

    /**
     * @param {Object} data
     * @param {Object} data.center
     * @param {Boolean} data.fullscreenControl
     * @param {String} data.id
     * @param {Object} data.mapOptions
     * @param {Number} data.maxZoom
     * @param {Number} data.minZoom
     * @param {Number} data.zoom
     * @param {Boolean} data.zoomControl
     */
    async create(data) {
        let me = this,
            {id: mapId} = data,
            map;

        // Ensure OpenLayers is loaded first (Remote Method Interception pattern)
        if (!globalThis.ol) {
            await me.loadFiles();
        }
        // Verify mapId is provided
        if (!mapId) {
            console.error(`Map ID is not provided`);
            return;
        }

        // Before creating the map, verify element dimensions:
        let mapElement = document.getElementById(mapId);
        let styles = window.getComputedStyle(mapElement);

        if (!mapElement) {
            console.error(`Map container element with id "${mapId}" not found`);
            return;
        }
        try {
            const center = [data.center.lng, data.center.lat];

            // Create the view configuration - no projection needed due to useGeographic()
            let viewConfig = {
                center: center,
                zoom: data.zoom || 10,
                minZoom: data.minZoom != undefined ? data.minZoom : 0,
                maxZoom: data.maxZoom != undefined ? data.maxZoom : 28
            };

            // Create the view using CDN global object
            let view = new ol.View(viewConfig);

            // Create base tile layer (OpenStreetMap) using CDN global object
            let tileLayer = new ol.layer.Tile({
                source: new ol.source.OSM()
            });

            // Create controls array
            let controls =[];
            if (data.fullscreenControl) {
                controls.push(new ol.control.FullScreen());
            }

            // // Create vector source and layer for markers using CDN global object
            // let vectorSource = new ol.source.Vector();
            // let vectorLayer = new ol.layer.Vector({
            //     source: vectorSource,
            //     style: me.getDefaultMarkerStyle()
            // });

            // Store vector source and layer for later use
            // me.vectorSources[mapId] = vectorSource;
            // me.vectorLayers[mapId] = vectorLayer;

            // Create the map using CDN global object
            let map = new ol.Map({
                controls: controls,
                target: mapElement,
                layers: [tileLayer],
                view: view
            });

            // Add fullscreen control if requested
            if (data.fullscreenControl) {
                map.addControl(new ol.control.FullScreen());
            }

            // Store the map instance
            me.maps[mapId] = map;
            
            // // Initialize markers object for this map
            // Neo.ns(`${mapId}`, true, me.markers);

            // Set up zoom change event listener
            view.on('change:zoom', () => {
                me.onMapZoomChange(map, mapId);
            });

            // Set up click event listener for markers
            map.on('click', (event) => {
                map.forEachFeatureAtPixel(event.pixel, (feature) => {
                    if (feature.get('neoId')) {
                        me.onMarkerClick(feature, event);
                    }
                });
            });

            // // Fire mapCreated event (similar to GoogleMaps addon)
            // me.fire('mapCreated', mapId);

            return {
                success: true,
                mapId: mapId
            };

        } catch (error) {
            console.error(`Failed to create OpenStreetMaps map "${mapId}":`, error);
            return {
                success: false,
                error: error.message,
                mapId: mapId
            };
        }
    }

    /**
     * @param {Object} data
     * @param {String} data.mapId
     */
    destroyMarkers(data) {
        // TODO: Implement marker destruction
    }

    /**
     * @param {Object} data
     * @param {String} data.address
     * @param {Object} data.location
     * @param {String} data.placeId
     * @returns {Object}
     */
    async geocode(data) {
        // TODO: Implement geocoding (likely using Nominatim or other service)
    }

    /**
     * @param {Object} data
     * @param {String} data.id
     * @param {String} data.mapId
     */
    hideMarker(data) {
        // TODO: Implement marker hiding
    }

    /**
     * @protected
     */
    async loadFiles() {
        await super.loadFiles();

        let version  = Neo.config.openLayersVersion || '10.6.1',
            basePath = Neo.config.openLayersBasePath || `https://cdn.jsdelivr.net/npm/ol@${version}`,
            cssUrl   = `${basePath}/ol.css`,
            jsUrl    = `${basePath}/dist/ol.js`;

        try {
            await Promise.all([
                _DomAccess_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].loadStylesheet(cssUrl),
                _DomAccess_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].loadScript(jsUrl)
            ]);
            
            // Verify OpenLayers loaded successfully
            if (typeof ol === 'undefined' || !ol.Map || !ol.source || !ol.source.OSM) {
                throw new Error('OpenLayers failed to load completely');
            }
            
            // Configure OpenLayers to use geographic coordinates (WGS84) in all API methods
            // This allows us to work with lat/lng directly without manual transformations
            ol.proj.useGeographic();
            
        } catch (error) {
            console.error('Failed to load OpenLayers:', error);
            throw error;
        }
    }

    /**
     * @param {ol.Map} map
     * @param {String} mapId
     */
    onMapZoomChange(map, mapId) {
        let me = this,
            view = map.getView(),
            currentZoom = view.getZoom(),
            center = view.getCenter();
        
        // Center coordinates are already in WGS84 format due to useGeographic()
        let centerLatLng = {
            lng: center[0],
            lat: center[1]
        };

        // Fire zoom change event that apps can listen to
        me.fire('zoomChanged', {
            mapId: mapId,
            zoom: currentZoom,
            center: centerLatLng
        });

        // Store current zoom level for reference
        if (!me.maps[mapId].neoData) {
            me.maps[mapId].neoData = {};
        }
        me.maps[mapId].neoData.currentZoom = currentZoom;
        me.maps[mapId].neoData.currentCenter = centerLatLng;
    }

    /**
     * @param {ol.Feature} feature
     * @param {Object} event
     */
    onMarkerClick(feature, event) {
        // TODO: Handle marker click events
    }

    /**
     * @param {Object} data
     * @param {String} data.mapId
     * @param {Object} data.position - Position object with lat/lng
     * @param {Number} data.position.lat - Latitude
     * @param {Number} data.position.lng - Longitude
     * @param {Number} [data.duration] - Animation duration in milliseconds (default: 1000)
     */
    panTo(data) {
        let me = this,
            {mapId, position, duration = 1000} = data;

        if (!mapId || !me.maps[mapId]) {
            console.error(`Map with id "${mapId}" not found`);
            return {
                success: false,
                error: `Map with id "${mapId}" not found`
            };
        }

        if (!position || (position.lat === undefined || position.lng === undefined )) {
            console.error('Invalid position data. Expected object with lat and lng properties');
            return {
                success: false,
                error: 'Invalid position data'
            };
        }

        try {
            let map = me.maps[mapId],
                view = map.getView();

            // Use position coordinates directly in [lng, lat] format
            // we configured the projection to useGeographic() so that it expects lat/lng instead of the default mercator projection
            let center = [position.lng, position.lat];

            // Animate the pan
            view.animate({
                center: center,
                duration: duration,
                easing: ol.easing.easeOut
            });

            return {
                success: true,
                mapId: mapId,
                position: position
            };

        } catch (error) {
            console.error(`Failed to pan map "${mapId}":`, error);
            return {
                success: false,
                error: error.message,
                mapId: mapId
            };
        }
    }

    /**
     * @param {Object} data
     * @param {String} data.mapId
     */
    removeMap(data) {
        // TODO: Implement map removal
    }

    /**
     * @param {Object} data
     * @param {String} data.id
     * @param {String} data.mapId
     */
    removeMarker(data) {
        // TODO: Implement marker removal
    }

    /**
     * @param {Object} data
     * @param {String} data.id
     * @param {Object} data.value
     */
    setCenter(data) {
        // TODO: Implement set center
    }

    /**
     * @param {Object} data
     * @param {String} data.id - Map ID (mapId)
     * @param {Number} data.value - The zoom level to set
     * @param {Number} [data.duration] - Animation duration in milliseconds (default: 1000)
     */
    setZoom(data) {
        let me = this,
            {id: mapId, value: zoomLevel, duration = 1000} = data;

        if (!mapId || !me.maps[mapId]) {
            console.error(`Map with id "${mapId}" not found`);
            return {
                success: false,
                error: `Map with id "${mapId}" not found`
            };
        }

        if (zoomLevel === undefined || typeof zoomLevel !== 'number') {
            console.error('Invalid zoom level. Expected a number');
            return {
                success: false,
                error: 'Invalid zoom level'
            };
        }

        try {
            let map = me.maps[mapId],
                view = map.getView(),
                minZoom = view.getMinZoom(),
                maxZoom = view.getMaxZoom();

            // Validate zoom level is within bounds
            if (minZoom !== undefined && zoomLevel < minZoom) {
                console.warn(`Zoom level ${zoomLevel} is below minimum ${minZoom}, setting to minimum`);
                zoomLevel = minZoom;
            }
            if (maxZoom !== undefined && zoomLevel > maxZoom) {
                console.warn(`Zoom level ${zoomLevel} is above maximum ${maxZoom}, setting to maximum`);
                zoomLevel = maxZoom;
            }

            // Animate the zoom change
            view.animate({
                zoom: zoomLevel,
                duration: duration,
                easing: ol.easing.easeOut
            });

            return {
                success: true,
                mapId: mapId,
                zoom: zoomLevel
            };

        } catch (error) {
            console.error(`Failed to set zoom for map "${mapId}":`, error);
            return {
                success: false,
                error: error.message,
                mapId: mapId
            };
        }
    }

    /**
     * @param {Object} data
     * @param {String} data.id
     * @param {String} data.mapId
     */
    showMarker(data) {
        // TODO: Implement marker showing
    }

    /**
     * Get default marker style for OpenLayers
     * @returns {ol.style.Style}
     * @protected
     */
    getDefaultMarkerStyle() {
        return new ol.style.Style({
            image: new ol.style.Icon({
                anchor: [0.5, 1],
                anchorXUnits: 'fraction',
                anchorYUnits: 'fraction',
                src: 'data:image/svg+xml;base64,' + btoa(`
                    <svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path fill="#FF0000" stroke="#FFFFFF" stroke-width="2" 
                              d="M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7z"/>
                        <circle fill="#FFFFFF" cx="12" cy="9" r="3"/>
                    </svg>
                `)
            })
        });
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(OpenStreetMaps));

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,