"use strict";
(self["webpackChunkneo_mjs"] = self["webpackChunkneo_mjs"] || []).push([["vendors-src_main_addon_ResizeObserver_mjs"],{

/***/ "./src/main/addon/Base.mjs":
/*!*********************************!*\
  !*** ./src/main/addon/Base.mjs ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/Base.mjs */ "./src/core/Base.mjs");


/**
 * Base class for main thread addons
 * @class Neo.main.addon.Base
 * @extends Neo.core.Base
 *
 * This version aligns the file loading and readiness state according to the rule:
 * `initAsync()` MUST await for `loadFiles()` to be completed before the addon is considered `isReady`.
 * `preloadFilesDelay` controls when `loadFiles()` is initiated in the background, but can be
 * overridden by `cacheMethodCall()`.
 */
class Base extends _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.main.addon.Base'
         * @protected
         */
        className: 'Neo.main.addon.Base',
        /**
         * An identifier for core.Base to get handled like singletons for remote method access
         * @member {Boolean} isMainThreadAddon=true
         * @protected
         */
        isMainThreadAddon: true,
        /**
         * Amount in ms to delay the background loading of library files.
         * Set to `false` to disable automated preloading and rely solely on lazy loading
         * via `cacheMethodCall()`. Set to `0` for immediate background preload.
         * @member {Boolean|Number} preloadFilesDelay=5000
         * @protected
         */
        preloadFilesDelay: 5000
    }

    /**
     * Internal cache for remote method calls received when `isReady` is false.
     * @member {Object[]} cache=[]
     */
    cache = []
    /**
     * Returns true if `loadFiles()` has been initiated and is currently in progress.
     * @member {Boolean} isLoading
     */
    get isLoading() {
        // isLoading is true if the promise exists and its resolver is still available (meaning it's pending).
        return !!this.#loadFilesPromise && !!this.#loadFilesPromiseResolver
    }
    /**
     * A private promise that tracks the completion of `loadFiles()`.
     * This ensures `loadFiles()` is called only once and can be awaited by multiple consumers.
     * @member {Promise<void>|null} #loadFilesPromise=null
     */
    #loadFilesPromise = null
    /**
     * The `resolve` function for `#loadFilesPromise`, allowing external control over its resolution.
     * @member {Function|null} #loadFilesPromiseResolver=null
     */
    #loadFilesPromiseResolver = null

    /**
     * @param {Object} config
     */
    construct(config) {
        super.construct(config);

        let me = this;

        // Initialize #loadFilesPromise as a controllable promise.
        // This promise will be awaited by initAsync and resolved by executeLoadFiles.
        me.#loadFilesPromise = new Promise(resolve => {
            me.#loadFilesPromiseResolver = resolve
        });

        if (me.preloadFilesDelay === false) {
            // No automated preload: resolve #loadFilesPromise immediately as it won't be triggered by delay.
            // It will only be triggered by cacheMethodCall or initAsync if needed.
            me.#loadFilesPromiseResolver();
            me.#loadFilesPromiseResolver = null // Mark as resolved/no longer pending
        } else {
            const delay = Neo.isNumber(me.preloadFilesDelay) ? me.preloadFilesDelay : 0;

            if (delay === 0) {
                // Immediate preload: Directly execute loadFiles and resolve the promise.
                me.#executeLoadFiles()
            } else {
                // Delayed preload: Set up a timer to execute loadFiles later.
                me.timeout(delay).then(() => {
                    // This callback checks if #loadFilesPromise is still pending (resolver is available).
                    if (me.#loadFilesPromiseResolver) {
                        me.#executeLoadFiles()
                    }
                })
            }
        }
    }

    /**
     * Executes the actual `loadFiles()` method and resolves `#loadFilesPromise`.
     * This method is called internally to manage the single execution of `loadFiles()`.
     * It ensures `loadFiles()` is only truly called once.
     * @private
     */
    async #executeLoadFiles() {
        let me = this;

        // Only execute if the promise is still pending (resolver is available).
        if (me.#loadFilesPromiseResolver) {
            const resolver = me.#loadFilesPromiseResolver;
            me.#loadFilesPromiseResolver = null; // Mark as no longer pending/resolved

            await me.loadFiles();
            resolver() // Resolve the main #loadFilesPromise
        }
    }

    /**
     * Async initialization hook for instances.
     * `initAsync` MUST await for `loadFiles()` to be completed. Only then the addon is ready.
     * @returns {Promise<void>}
     */
    async initAsync() {
        await super.initAsync();

        let me = this;

        // `initAsync` must always wait for `me.#loadFilesPromise` to complete its resolution,
        // regardless of how it was triggered (immediate, delayed, or by cacheMethodCall).
        // `me.#loadFilesPromise` is always initialized in `construct()`.
        await me.#loadFilesPromise
    }

    /**
     * Triggered after the `isReady` config got changed.
     * When `isReady` becomes true, any cached remote method calls are executed.
     * At this point, `initAsync` has already ensured that `me.#loadFilesPromise` is resolved.
     *
     * This method is kept synchronous, delegating the async cache processing to a private method.
     *
     * @param {Boolean} value
     * @param {Boolean} oldValue
     * @protected
     */
    afterSetIsReady(value, oldValue) { // Keep this synchronous
        if (value) {
            // Initiate the asynchronous processing of cached method calls.
            // This method itself does not need to be awaited here.
            this.#processCachedMethodCalls();
        }
    }

    /**
     * Internally caches remote method calls if `isReady` is false.
     * It also ensures that `loadFiles()` is initiated immediately, bypassing `preloadFilesDelay`.
     * @param {Object} item - Contains method name (`fn`) and data (`data`).
     * @returns {Promise<unknown>} A promise that resolves with the method's return value.
     */
    cacheMethodCall(item) {
        let me = this;

        // If loadFiles is defined, and it hasn't started yet (i.e., #loadFilesPromiseResolver is still available),
        // execute it now, bypassing any pending preloadFilesDelay timer.
        if (me.#loadFilesPromiseResolver) {
            me.#executeLoadFiles() // This will resolve #loadFilesPromise immediately
        }

        return new Promise((resolve, reject) => {
            me.cache.push({...item, reject, resolve})
        })
    }

    /**
     * Placeholder method for loading external files.
     * Subclasses (e.g., `Neo.main.addon.AmCharts`) must implement this.
     * It **must** return a Promise that resolves when all necessary files are loaded.
     * If `loadFiles()` is called multiple times, it should return the same pending promise
     * or a resolved promise if files are already loaded.
     * @returns {Promise<void>}
     */
    async loadFiles() {}

    /**
     * Sequentially processes any method calls that were cached while the addon was not ready.
     * This method is asynchronous to allow awaiting the execution of individual cached methods.
     * @returns {Promise<void>} A promise that resolves when all cached methods have been processed.
     * @private
     */
    async #processCachedMethodCalls() {
        let me = this;

        // Iterate over the cache items and await each one in sequence
        for (const item of me.cache) {
            let returnValue;

            try {
                returnValue = me[item.fn](item.data);

                if (Neo.isPromise(returnValue)) {
                    returnValue = await returnValue;
                }

                item.resolve(returnValue)
            } catch (e) {
                // If an error occurs (either synchronous or a promise rejection),
                // reject the promise associated with the current cached item.
                item.reject(e)

                // *** FAIL-FAST STRATEGY ***
                // If any cached method call fails, we assume subsequent cached calls
                // (especially for the same addon instance) are likely to also fail.
                break
            }
        }

        me.cache = []
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(Base));


/***/ }),

/***/ "./src/main/addon/ResizeObserver.mjs":
/*!*******************************************!*\
  !*** ./src/main/addon/ResizeObserver.mjs ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Base.mjs */ "./src/main/addon/Base.mjs");
/* harmony import */ var _DomAccess_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../DomAccess.mjs */ "./src/main/DomAccess.mjs");
/* harmony import */ var _DomEvents_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../DomEvents.mjs */ "./src/main/DomEvents.mjs");




/**
 * @class Neo.main.addon.ResizeObserver
 * @extends Neo.main.addon.Base
 * @singleton
 */
class NeoResizeObserver extends _Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.main.addon.ResizeObserver'
         * @protected
         */
        className: 'Neo.main.addon.ResizeObserver',
        /**
         * @member {ResizeObserver|null} instance=null
         * @protected
         */
        instance: null,
        /**
         * If a target node is not found when calling register(),
         * we can specify the amount of retries with a 100ms delay.
         * @member {Number} registerAttempts=3
         */
        registerAttempts: 3,
        /**
         * Remote method access for other workers
         * @member {Object} remote
         * @protected
         */
        remote: {
            app: [
                'register',
                'unregister'
            ]
        }
    }

    /**
     * @param {Object} config
     */
    construct(config) {
        super.construct(config);

        let me = this;

        me.instance = new ResizeObserver(me.onResize.bind(me))
    }

    /**
     * Internal callback for the ResizeObserver instance.
     * See: https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserverEntry
     * @param {HTMLElement[]} entries
     * @param {ResizeObserver} observer
     * @protected
     */
    onResize(entries, observer) {
        entries.forEach(entry => {
            // the content of entry is not spreadable, so we need to manually convert it
            // structuredClone(entry) throws a JS error => ResizeObserverEntry object could not be cloned.

            let borderBoxSize             = entry.borderBoxSize[0],
                contentBoxSize            = entry.contentBoxSize[0],
                devicePixelContentBoxSize = entry.devicePixelContentBoxSize?.[0] || {}, // Not supported in Safari yet
                path                      = _DomEvents_mjs__WEBPACK_IMPORTED_MODULE_2__["default"].getPathFromElement(entry.target).map(e => _DomEvents_mjs__WEBPACK_IMPORTED_MODULE_2__["default"].getTargetData(e));

            Neo.worker.Manager.sendMessage('app', {
                action   : 'domEvent',
                eventName: 'resize',

                data: {
                    contentRect: _DomEvents_mjs__WEBPACK_IMPORTED_MODULE_2__["default"].parseDomRect(entry.contentRect),
                    id         : entry.target.id,
                    path,
                    rect       : path[0].rect,

                    borderBoxSize: {
                        blockSize : borderBoxSize.blockSize,
                        inlineSize: borderBoxSize.inlineSize
                    },

                    contentBoxSize: {
                        blockSize : contentBoxSize.blockSize,
                        inlineSize: contentBoxSize.inlineSize
                    },

                    devicePixelContentBoxSize: {
                        blockSize : devicePixelContentBoxSize.blockSize,
                        inlineSize: devicePixelContentBoxSize.inlineSize
                    }
                }
            })
        })
    }

    /**
     * @param {Object} data
     * @param {String} data.id
     * @param {Number} count=0
     */
    async register(data, count=0) {
        let me   = this,
            node = _DomAccess_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].getElement(data.id);

        if (node) {
            me.instance.observe(node)
        } else if (count < me.registerAttempts) {
            await me.timeout(100);
            count++;
            me.register(data, count)
        }
    }

    /**
     * @param {Object} data
     * @param {String} data.id
     */
    unregister(data) {
        let node = _DomAccess_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].getElement(data.id);
        node && this.instance.unobserve(node)
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(NeoResizeObserver));


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2h1bmtzL21haW4vdmVuZG9ycy1zcmNfbWFpbl9hZGRvbl9SZXNpemVPYnNlcnZlcl9tanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBMkM7O0FBRTNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHNEQUFRO0FBQzNCO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFNBQVM7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsZ0JBQWdCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQkFBZ0IsVUFBVTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixTQUFTO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isb0JBQW9CO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGVBQWU7QUFDL0I7QUFDQTs7QUFFQTtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQ7O0FBRWpEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsU0FBUztBQUN4QixlQUFlLFNBQVM7QUFDeEI7QUFDQTtBQUNBLHVDQUF1QztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGlCQUFpQixrQkFBa0I7QUFDbkM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwyQkFBMkIseUJBQXlCO0FBQ3BELFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsZUFBZTtBQUNoQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsaUVBQWUsb0JBQW9CLEVBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzFORDtBQUNNO0FBQ0E7O0FBRXpDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsaURBQUk7QUFDcEM7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHFCQUFxQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGVBQWU7QUFDOUIsZUFBZSxnQkFBZ0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxzRkFBc0Y7QUFDdEYsNENBQTRDLHNEQUFTLDJDQUEyQyxzREFBUzs7QUFFekc7QUFDQTtBQUNBOztBQUVBO0FBQ0EsaUNBQWlDLHNEQUFTO0FBQzFDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7O0FBRXJCO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjs7QUFFckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7O0FBRUE7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsc0RBQVM7O0FBRTVCO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBLG1CQUFtQixzREFBUztBQUM1QjtBQUNBO0FBQ0E7O0FBRUEsaUVBQWUsaUNBQWlDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZW8ubWpzLy4vc3JjL21haW4vYWRkb24vQmFzZS5tanMiLCJ3ZWJwYWNrOi8vbmVvLm1qcy8uL3NyYy9tYWluL2FkZG9uL1Jlc2l6ZU9ic2VydmVyLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ29yZUJhc2UgZnJvbSAnLi4vLi4vY29yZS9CYXNlLm1qcyc7XG5cbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgbWFpbiB0aHJlYWQgYWRkb25zXG4gKiBAY2xhc3MgTmVvLm1haW4uYWRkb24uQmFzZVxuICogQGV4dGVuZHMgTmVvLmNvcmUuQmFzZVxuICpcbiAqIFRoaXMgdmVyc2lvbiBhbGlnbnMgdGhlIGZpbGUgbG9hZGluZyBhbmQgcmVhZGluZXNzIHN0YXRlIGFjY29yZGluZyB0byB0aGUgcnVsZTpcbiAqIGBpbml0QXN5bmMoKWAgTVVTVCBhd2FpdCBmb3IgYGxvYWRGaWxlcygpYCB0byBiZSBjb21wbGV0ZWQgYmVmb3JlIHRoZSBhZGRvbiBpcyBjb25zaWRlcmVkIGBpc1JlYWR5YC5cbiAqIGBwcmVsb2FkRmlsZXNEZWxheWAgY29udHJvbHMgd2hlbiBgbG9hZEZpbGVzKClgIGlzIGluaXRpYXRlZCBpbiB0aGUgYmFja2dyb3VuZCwgYnV0IGNhbiBiZVxuICogb3ZlcnJpZGRlbiBieSBgY2FjaGVNZXRob2RDYWxsKClgLlxuICovXG5jbGFzcyBCYXNlIGV4dGVuZHMgQ29yZUJhc2Uge1xuICAgIHN0YXRpYyBjb25maWcgPSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IGNsYXNzTmFtZT0nTmVvLm1haW4uYWRkb24uQmFzZSdcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgY2xhc3NOYW1lOiAnTmVvLm1haW4uYWRkb24uQmFzZScsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbiBpZGVudGlmaWVyIGZvciBjb3JlLkJhc2UgdG8gZ2V0IGhhbmRsZWQgbGlrZSBzaW5nbGV0b25zIGZvciByZW1vdGUgbWV0aG9kIGFjY2Vzc1xuICAgICAgICAgKiBAbWVtYmVyIHtCb29sZWFufSBpc01haW5UaHJlYWRBZGRvbj10cnVlXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIGlzTWFpblRocmVhZEFkZG9uOiB0cnVlLFxuICAgICAgICAvKipcbiAgICAgICAgICogQW1vdW50IGluIG1zIHRvIGRlbGF5IHRoZSBiYWNrZ3JvdW5kIGxvYWRpbmcgb2YgbGlicmFyeSBmaWxlcy5cbiAgICAgICAgICogU2V0IHRvIGBmYWxzZWAgdG8gZGlzYWJsZSBhdXRvbWF0ZWQgcHJlbG9hZGluZyBhbmQgcmVseSBzb2xlbHkgb24gbGF6eSBsb2FkaW5nXG4gICAgICAgICAqIHZpYSBgY2FjaGVNZXRob2RDYWxsKClgLiBTZXQgdG8gYDBgIGZvciBpbW1lZGlhdGUgYmFja2dyb3VuZCBwcmVsb2FkLlxuICAgICAgICAgKiBAbWVtYmVyIHtCb29sZWFufE51bWJlcn0gcHJlbG9hZEZpbGVzRGVsYXk9NTAwMFxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBwcmVsb2FkRmlsZXNEZWxheTogNTAwMFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEludGVybmFsIGNhY2hlIGZvciByZW1vdGUgbWV0aG9kIGNhbGxzIHJlY2VpdmVkIHdoZW4gYGlzUmVhZHlgIGlzIGZhbHNlLlxuICAgICAqIEBtZW1iZXIge09iamVjdFtdfSBjYWNoZT1bXVxuICAgICAqL1xuICAgIGNhY2hlID0gW11cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgYGxvYWRGaWxlcygpYCBoYXMgYmVlbiBpbml0aWF0ZWQgYW5kIGlzIGN1cnJlbnRseSBpbiBwcm9ncmVzcy5cbiAgICAgKiBAbWVtYmVyIHtCb29sZWFufSBpc0xvYWRpbmdcbiAgICAgKi9cbiAgICBnZXQgaXNMb2FkaW5nKCkge1xuICAgICAgICAvLyBpc0xvYWRpbmcgaXMgdHJ1ZSBpZiB0aGUgcHJvbWlzZSBleGlzdHMgYW5kIGl0cyByZXNvbHZlciBpcyBzdGlsbCBhdmFpbGFibGUgKG1lYW5pbmcgaXQncyBwZW5kaW5nKS5cbiAgICAgICAgcmV0dXJuICEhdGhpcy4jbG9hZEZpbGVzUHJvbWlzZSAmJiAhIXRoaXMuI2xvYWRGaWxlc1Byb21pc2VSZXNvbHZlclxuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIHByaXZhdGUgcHJvbWlzZSB0aGF0IHRyYWNrcyB0aGUgY29tcGxldGlvbiBvZiBgbG9hZEZpbGVzKClgLlxuICAgICAqIFRoaXMgZW5zdXJlcyBgbG9hZEZpbGVzKClgIGlzIGNhbGxlZCBvbmx5IG9uY2UgYW5kIGNhbiBiZSBhd2FpdGVkIGJ5IG11bHRpcGxlIGNvbnN1bWVycy5cbiAgICAgKiBAbWVtYmVyIHtQcm9taXNlPHZvaWQ+fG51bGx9ICNsb2FkRmlsZXNQcm9taXNlPW51bGxcbiAgICAgKi9cbiAgICAjbG9hZEZpbGVzUHJvbWlzZSA9IG51bGxcbiAgICAvKipcbiAgICAgKiBUaGUgYHJlc29sdmVgIGZ1bmN0aW9uIGZvciBgI2xvYWRGaWxlc1Byb21pc2VgLCBhbGxvd2luZyBleHRlcm5hbCBjb250cm9sIG92ZXIgaXRzIHJlc29sdXRpb24uXG4gICAgICogQG1lbWJlciB7RnVuY3Rpb258bnVsbH0gI2xvYWRGaWxlc1Byb21pc2VSZXNvbHZlcj1udWxsXG4gICAgICovXG4gICAgI2xvYWRGaWxlc1Byb21pc2VSZXNvbHZlciA9IG51bGxcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3QoY29uZmlnKSB7XG4gICAgICAgIHN1cGVyLmNvbnN0cnVjdChjb25maWcpO1xuXG4gICAgICAgIGxldCBtZSA9IHRoaXM7XG5cbiAgICAgICAgLy8gSW5pdGlhbGl6ZSAjbG9hZEZpbGVzUHJvbWlzZSBhcyBhIGNvbnRyb2xsYWJsZSBwcm9taXNlLlxuICAgICAgICAvLyBUaGlzIHByb21pc2Ugd2lsbCBiZSBhd2FpdGVkIGJ5IGluaXRBc3luYyBhbmQgcmVzb2x2ZWQgYnkgZXhlY3V0ZUxvYWRGaWxlcy5cbiAgICAgICAgbWUuI2xvYWRGaWxlc1Byb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgICAgIG1lLiNsb2FkRmlsZXNQcm9taXNlUmVzb2x2ZXIgPSByZXNvbHZlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChtZS5wcmVsb2FkRmlsZXNEZWxheSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIC8vIE5vIGF1dG9tYXRlZCBwcmVsb2FkOiByZXNvbHZlICNsb2FkRmlsZXNQcm9taXNlIGltbWVkaWF0ZWx5IGFzIGl0IHdvbid0IGJlIHRyaWdnZXJlZCBieSBkZWxheS5cbiAgICAgICAgICAgIC8vIEl0IHdpbGwgb25seSBiZSB0cmlnZ2VyZWQgYnkgY2FjaGVNZXRob2RDYWxsIG9yIGluaXRBc3luYyBpZiBuZWVkZWQuXG4gICAgICAgICAgICBtZS4jbG9hZEZpbGVzUHJvbWlzZVJlc29sdmVyKCk7XG4gICAgICAgICAgICBtZS4jbG9hZEZpbGVzUHJvbWlzZVJlc29sdmVyID0gbnVsbCAvLyBNYXJrIGFzIHJlc29sdmVkL25vIGxvbmdlciBwZW5kaW5nXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBkZWxheSA9IE5lby5pc051bWJlcihtZS5wcmVsb2FkRmlsZXNEZWxheSkgPyBtZS5wcmVsb2FkRmlsZXNEZWxheSA6IDA7XG5cbiAgICAgICAgICAgIGlmIChkZWxheSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIC8vIEltbWVkaWF0ZSBwcmVsb2FkOiBEaXJlY3RseSBleGVjdXRlIGxvYWRGaWxlcyBhbmQgcmVzb2x2ZSB0aGUgcHJvbWlzZS5cbiAgICAgICAgICAgICAgICBtZS4jZXhlY3V0ZUxvYWRGaWxlcygpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIERlbGF5ZWQgcHJlbG9hZDogU2V0IHVwIGEgdGltZXIgdG8gZXhlY3V0ZSBsb2FkRmlsZXMgbGF0ZXIuXG4gICAgICAgICAgICAgICAgbWUudGltZW91dChkZWxheSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgY2FsbGJhY2sgY2hlY2tzIGlmICNsb2FkRmlsZXNQcm9taXNlIGlzIHN0aWxsIHBlbmRpbmcgKHJlc29sdmVyIGlzIGF2YWlsYWJsZSkuXG4gICAgICAgICAgICAgICAgICAgIGlmIChtZS4jbG9hZEZpbGVzUHJvbWlzZVJlc29sdmVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZS4jZXhlY3V0ZUxvYWRGaWxlcygpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZXMgdGhlIGFjdHVhbCBgbG9hZEZpbGVzKClgIG1ldGhvZCBhbmQgcmVzb2x2ZXMgYCNsb2FkRmlsZXNQcm9taXNlYC5cbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgaW50ZXJuYWxseSB0byBtYW5hZ2UgdGhlIHNpbmdsZSBleGVjdXRpb24gb2YgYGxvYWRGaWxlcygpYC5cbiAgICAgKiBJdCBlbnN1cmVzIGBsb2FkRmlsZXMoKWAgaXMgb25seSB0cnVseSBjYWxsZWQgb25jZS5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGFzeW5jICNleGVjdXRlTG9hZEZpbGVzKCkge1xuICAgICAgICBsZXQgbWUgPSB0aGlzO1xuXG4gICAgICAgIC8vIE9ubHkgZXhlY3V0ZSBpZiB0aGUgcHJvbWlzZSBpcyBzdGlsbCBwZW5kaW5nIChyZXNvbHZlciBpcyBhdmFpbGFibGUpLlxuICAgICAgICBpZiAobWUuI2xvYWRGaWxlc1Byb21pc2VSZXNvbHZlcikge1xuICAgICAgICAgICAgY29uc3QgcmVzb2x2ZXIgPSBtZS4jbG9hZEZpbGVzUHJvbWlzZVJlc29sdmVyO1xuICAgICAgICAgICAgbWUuI2xvYWRGaWxlc1Byb21pc2VSZXNvbHZlciA9IG51bGw7IC8vIE1hcmsgYXMgbm8gbG9uZ2VyIHBlbmRpbmcvcmVzb2x2ZWRcblxuICAgICAgICAgICAgYXdhaXQgbWUubG9hZEZpbGVzKCk7XG4gICAgICAgICAgICByZXNvbHZlcigpIC8vIFJlc29sdmUgdGhlIG1haW4gI2xvYWRGaWxlc1Byb21pc2VcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFzeW5jIGluaXRpYWxpemF0aW9uIGhvb2sgZm9yIGluc3RhbmNlcy5cbiAgICAgKiBgaW5pdEFzeW5jYCBNVVNUIGF3YWl0IGZvciBgbG9hZEZpbGVzKClgIHRvIGJlIGNvbXBsZXRlZC4gT25seSB0aGVuIHRoZSBhZGRvbiBpcyByZWFkeS5cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cbiAgICAgKi9cbiAgICBhc3luYyBpbml0QXN5bmMoKSB7XG4gICAgICAgIGF3YWl0IHN1cGVyLmluaXRBc3luYygpO1xuXG4gICAgICAgIGxldCBtZSA9IHRoaXM7XG5cbiAgICAgICAgLy8gYGluaXRBc3luY2AgbXVzdCBhbHdheXMgd2FpdCBmb3IgYG1lLiNsb2FkRmlsZXNQcm9taXNlYCB0byBjb21wbGV0ZSBpdHMgcmVzb2x1dGlvbixcbiAgICAgICAgLy8gcmVnYXJkbGVzcyBvZiBob3cgaXQgd2FzIHRyaWdnZXJlZCAoaW1tZWRpYXRlLCBkZWxheWVkLCBvciBieSBjYWNoZU1ldGhvZENhbGwpLlxuICAgICAgICAvLyBgbWUuI2xvYWRGaWxlc1Byb21pc2VgIGlzIGFsd2F5cyBpbml0aWFsaXplZCBpbiBgY29uc3RydWN0KClgLlxuICAgICAgICBhd2FpdCBtZS4jbG9hZEZpbGVzUHJvbWlzZVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJlZCBhZnRlciB0aGUgYGlzUmVhZHlgIGNvbmZpZyBnb3QgY2hhbmdlZC5cbiAgICAgKiBXaGVuIGBpc1JlYWR5YCBiZWNvbWVzIHRydWUsIGFueSBjYWNoZWQgcmVtb3RlIG1ldGhvZCBjYWxscyBhcmUgZXhlY3V0ZWQuXG4gICAgICogQXQgdGhpcyBwb2ludCwgYGluaXRBc3luY2AgaGFzIGFscmVhZHkgZW5zdXJlZCB0aGF0IGBtZS4jbG9hZEZpbGVzUHJvbWlzZWAgaXMgcmVzb2x2ZWQuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBrZXB0IHN5bmNocm9ub3VzLCBkZWxlZ2F0aW5nIHRoZSBhc3luYyBjYWNoZSBwcm9jZXNzaW5nIHRvIGEgcHJpdmF0ZSBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHZhbHVlXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBvbGRWYWx1ZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBhZnRlclNldElzUmVhZHkodmFsdWUsIG9sZFZhbHVlKSB7IC8vIEtlZXAgdGhpcyBzeW5jaHJvbm91c1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIC8vIEluaXRpYXRlIHRoZSBhc3luY2hyb25vdXMgcHJvY2Vzc2luZyBvZiBjYWNoZWQgbWV0aG9kIGNhbGxzLlxuICAgICAgICAgICAgLy8gVGhpcyBtZXRob2QgaXRzZWxmIGRvZXMgbm90IG5lZWQgdG8gYmUgYXdhaXRlZCBoZXJlLlxuICAgICAgICAgICAgdGhpcy4jcHJvY2Vzc0NhY2hlZE1ldGhvZENhbGxzKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnRlcm5hbGx5IGNhY2hlcyByZW1vdGUgbWV0aG9kIGNhbGxzIGlmIGBpc1JlYWR5YCBpcyBmYWxzZS5cbiAgICAgKiBJdCBhbHNvIGVuc3VyZXMgdGhhdCBgbG9hZEZpbGVzKClgIGlzIGluaXRpYXRlZCBpbW1lZGlhdGVseSwgYnlwYXNzaW5nIGBwcmVsb2FkRmlsZXNEZWxheWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGl0ZW0gLSBDb250YWlucyBtZXRob2QgbmFtZSAoYGZuYCkgYW5kIGRhdGEgKGBkYXRhYCkuXG4gICAgICogQHJldHVybnMge1Byb21pc2U8dW5rbm93bj59IEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIG1ldGhvZCdzIHJldHVybiB2YWx1ZS5cbiAgICAgKi9cbiAgICBjYWNoZU1ldGhvZENhbGwoaXRlbSkge1xuICAgICAgICBsZXQgbWUgPSB0aGlzO1xuXG4gICAgICAgIC8vIElmIGxvYWRGaWxlcyBpcyBkZWZpbmVkLCBhbmQgaXQgaGFzbid0IHN0YXJ0ZWQgeWV0IChpLmUuLCAjbG9hZEZpbGVzUHJvbWlzZVJlc29sdmVyIGlzIHN0aWxsIGF2YWlsYWJsZSksXG4gICAgICAgIC8vIGV4ZWN1dGUgaXQgbm93LCBieXBhc3NpbmcgYW55IHBlbmRpbmcgcHJlbG9hZEZpbGVzRGVsYXkgdGltZXIuXG4gICAgICAgIGlmIChtZS4jbG9hZEZpbGVzUHJvbWlzZVJlc29sdmVyKSB7XG4gICAgICAgICAgICBtZS4jZXhlY3V0ZUxvYWRGaWxlcygpIC8vIFRoaXMgd2lsbCByZXNvbHZlICNsb2FkRmlsZXNQcm9taXNlIGltbWVkaWF0ZWx5XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgbWUuY2FjaGUucHVzaCh7Li4uaXRlbSwgcmVqZWN0LCByZXNvbHZlfSlcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQbGFjZWhvbGRlciBtZXRob2QgZm9yIGxvYWRpbmcgZXh0ZXJuYWwgZmlsZXMuXG4gICAgICogU3ViY2xhc3NlcyAoZS5nLiwgYE5lby5tYWluLmFkZG9uLkFtQ2hhcnRzYCkgbXVzdCBpbXBsZW1lbnQgdGhpcy5cbiAgICAgKiBJdCAqKm11c3QqKiByZXR1cm4gYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBhbGwgbmVjZXNzYXJ5IGZpbGVzIGFyZSBsb2FkZWQuXG4gICAgICogSWYgYGxvYWRGaWxlcygpYCBpcyBjYWxsZWQgbXVsdGlwbGUgdGltZXMsIGl0IHNob3VsZCByZXR1cm4gdGhlIHNhbWUgcGVuZGluZyBwcm9taXNlXG4gICAgICogb3IgYSByZXNvbHZlZCBwcm9taXNlIGlmIGZpbGVzIGFyZSBhbHJlYWR5IGxvYWRlZC5cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cbiAgICAgKi9cbiAgICBhc3luYyBsb2FkRmlsZXMoKSB7fVxuXG4gICAgLyoqXG4gICAgICogU2VxdWVudGlhbGx5IHByb2Nlc3NlcyBhbnkgbWV0aG9kIGNhbGxzIHRoYXQgd2VyZSBjYWNoZWQgd2hpbGUgdGhlIGFkZG9uIHdhcyBub3QgcmVhZHkuXG4gICAgICogVGhpcyBtZXRob2QgaXMgYXN5bmNocm9ub3VzIHRvIGFsbG93IGF3YWl0aW5nIHRoZSBleGVjdXRpb24gb2YgaW5kaXZpZHVhbCBjYWNoZWQgbWV0aG9kcy5cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn0gQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBhbGwgY2FjaGVkIG1ldGhvZHMgaGF2ZSBiZWVuIHByb2Nlc3NlZC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGFzeW5jICNwcm9jZXNzQ2FjaGVkTWV0aG9kQ2FsbHMoKSB7XG4gICAgICAgIGxldCBtZSA9IHRoaXM7XG5cbiAgICAgICAgLy8gSXRlcmF0ZSBvdmVyIHRoZSBjYWNoZSBpdGVtcyBhbmQgYXdhaXQgZWFjaCBvbmUgaW4gc2VxdWVuY2VcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIG1lLmNhY2hlKSB7XG4gICAgICAgICAgICBsZXQgcmV0dXJuVmFsdWU7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuVmFsdWUgPSBtZVtpdGVtLmZuXShpdGVtLmRhdGEpO1xuXG4gICAgICAgICAgICAgICAgaWYgKE5lby5pc1Byb21pc2UocmV0dXJuVmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVyblZhbHVlID0gYXdhaXQgcmV0dXJuVmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaXRlbS5yZXNvbHZlKHJldHVyblZhbHVlKVxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIC8vIElmIGFuIGVycm9yIG9jY3VycyAoZWl0aGVyIHN5bmNocm9ub3VzIG9yIGEgcHJvbWlzZSByZWplY3Rpb24pLFxuICAgICAgICAgICAgICAgIC8vIHJlamVjdCB0aGUgcHJvbWlzZSBhc3NvY2lhdGVkIHdpdGggdGhlIGN1cnJlbnQgY2FjaGVkIGl0ZW0uXG4gICAgICAgICAgICAgICAgaXRlbS5yZWplY3QoZSlcblxuICAgICAgICAgICAgICAgIC8vICoqKiBGQUlMLUZBU1QgU1RSQVRFR1kgKioqXG4gICAgICAgICAgICAgICAgLy8gSWYgYW55IGNhY2hlZCBtZXRob2QgY2FsbCBmYWlscywgd2UgYXNzdW1lIHN1YnNlcXVlbnQgY2FjaGVkIGNhbGxzXG4gICAgICAgICAgICAgICAgLy8gKGVzcGVjaWFsbHkgZm9yIHRoZSBzYW1lIGFkZG9uIGluc3RhbmNlKSBhcmUgbGlrZWx5IHRvIGFsc28gZmFpbC5cbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbWUuY2FjaGUgPSBbXVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTmVvLnNldHVwQ2xhc3MoQmFzZSk7XG4iLCJpbXBvcnQgQmFzZSAgICAgIGZyb20gJy4vQmFzZS5tanMnO1xuaW1wb3J0IERvbUFjY2VzcyBmcm9tICcuLi9Eb21BY2Nlc3MubWpzJztcbmltcG9ydCBEb21FdmVudHMgZnJvbSAnLi4vRG9tRXZlbnRzLm1qcyc7XG5cbi8qKlxuICogQGNsYXNzIE5lby5tYWluLmFkZG9uLlJlc2l6ZU9ic2VydmVyXG4gKiBAZXh0ZW5kcyBOZW8ubWFpbi5hZGRvbi5CYXNlXG4gKiBAc2luZ2xldG9uXG4gKi9cbmNsYXNzIE5lb1Jlc2l6ZU9ic2VydmVyIGV4dGVuZHMgQmFzZSB7XG4gICAgc3RhdGljIGNvbmZpZyA9IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gY2xhc3NOYW1lPSdOZW8ubWFpbi5hZGRvbi5SZXNpemVPYnNlcnZlcidcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgY2xhc3NOYW1lOiAnTmVvLm1haW4uYWRkb24uUmVzaXplT2JzZXJ2ZXInLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7UmVzaXplT2JzZXJ2ZXJ8bnVsbH0gaW5zdGFuY2U9bnVsbFxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBpbnN0YW5jZTogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIGEgdGFyZ2V0IG5vZGUgaXMgbm90IGZvdW5kIHdoZW4gY2FsbGluZyByZWdpc3RlcigpLFxuICAgICAgICAgKiB3ZSBjYW4gc3BlY2lmeSB0aGUgYW1vdW50IG9mIHJldHJpZXMgd2l0aCBhIDEwMG1zIGRlbGF5LlxuICAgICAgICAgKiBAbWVtYmVyIHtOdW1iZXJ9IHJlZ2lzdGVyQXR0ZW1wdHM9M1xuICAgICAgICAgKi9cbiAgICAgICAgcmVnaXN0ZXJBdHRlbXB0czogMyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlbW90ZSBtZXRob2QgYWNjZXNzIGZvciBvdGhlciB3b3JrZXJzXG4gICAgICAgICAqIEBtZW1iZXIge09iamVjdH0gcmVtb3RlXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIHJlbW90ZToge1xuICAgICAgICAgICAgYXBwOiBbXG4gICAgICAgICAgICAgICAgJ3JlZ2lzdGVyJyxcbiAgICAgICAgICAgICAgICAndW5yZWdpc3RlcidcbiAgICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3QoY29uZmlnKSB7XG4gICAgICAgIHN1cGVyLmNvbnN0cnVjdChjb25maWcpO1xuXG4gICAgICAgIGxldCBtZSA9IHRoaXM7XG5cbiAgICAgICAgbWUuaW5zdGFuY2UgPSBuZXcgUmVzaXplT2JzZXJ2ZXIobWUub25SZXNpemUuYmluZChtZSkpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW50ZXJuYWwgY2FsbGJhY2sgZm9yIHRoZSBSZXNpemVPYnNlcnZlciBpbnN0YW5jZS5cbiAgICAgKiBTZWU6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9SZXNpemVPYnNlcnZlckVudHJ5XG4gICAgICogQHBhcmFtIHtIVE1MRWxlbWVudFtdfSBlbnRyaWVzXG4gICAgICogQHBhcmFtIHtSZXNpemVPYnNlcnZlcn0gb2JzZXJ2ZXJcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgb25SZXNpemUoZW50cmllcywgb2JzZXJ2ZXIpIHtcbiAgICAgICAgZW50cmllcy5mb3JFYWNoKGVudHJ5ID0+IHtcbiAgICAgICAgICAgIC8vIHRoZSBjb250ZW50IG9mIGVudHJ5IGlzIG5vdCBzcHJlYWRhYmxlLCBzbyB3ZSBuZWVkIHRvIG1hbnVhbGx5IGNvbnZlcnQgaXRcbiAgICAgICAgICAgIC8vIHN0cnVjdHVyZWRDbG9uZShlbnRyeSkgdGhyb3dzIGEgSlMgZXJyb3IgPT4gUmVzaXplT2JzZXJ2ZXJFbnRyeSBvYmplY3QgY291bGQgbm90IGJlIGNsb25lZC5cblxuICAgICAgICAgICAgbGV0IGJvcmRlckJveFNpemUgICAgICAgICAgICAgPSBlbnRyeS5ib3JkZXJCb3hTaXplWzBdLFxuICAgICAgICAgICAgICAgIGNvbnRlbnRCb3hTaXplICAgICAgICAgICAgPSBlbnRyeS5jb250ZW50Qm94U2l6ZVswXSxcbiAgICAgICAgICAgICAgICBkZXZpY2VQaXhlbENvbnRlbnRCb3hTaXplID0gZW50cnkuZGV2aWNlUGl4ZWxDb250ZW50Qm94U2l6ZT8uWzBdIHx8IHt9LCAvLyBOb3Qgc3VwcG9ydGVkIGluIFNhZmFyaSB5ZXRcbiAgICAgICAgICAgICAgICBwYXRoICAgICAgICAgICAgICAgICAgICAgID0gRG9tRXZlbnRzLmdldFBhdGhGcm9tRWxlbWVudChlbnRyeS50YXJnZXQpLm1hcChlID0+IERvbUV2ZW50cy5nZXRUYXJnZXREYXRhKGUpKTtcblxuICAgICAgICAgICAgTmVvLndvcmtlci5NYW5hZ2VyLnNlbmRNZXNzYWdlKCdhcHAnLCB7XG4gICAgICAgICAgICAgICAgYWN0aW9uICAgOiAnZG9tRXZlbnQnLFxuICAgICAgICAgICAgICAgIGV2ZW50TmFtZTogJ3Jlc2l6ZScsXG5cbiAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnRSZWN0OiBEb21FdmVudHMucGFyc2VEb21SZWN0KGVudHJ5LmNvbnRlbnRSZWN0KSxcbiAgICAgICAgICAgICAgICAgICAgaWQgICAgICAgICA6IGVudHJ5LnRhcmdldC5pZCxcbiAgICAgICAgICAgICAgICAgICAgcGF0aCxcbiAgICAgICAgICAgICAgICAgICAgcmVjdCAgICAgICA6IHBhdGhbMF0ucmVjdCxcblxuICAgICAgICAgICAgICAgICAgICBib3JkZXJCb3hTaXplOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBibG9ja1NpemUgOiBib3JkZXJCb3hTaXplLmJsb2NrU2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlubGluZVNpemU6IGJvcmRlckJveFNpemUuaW5saW5lU2l6ZVxuICAgICAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnRCb3hTaXplOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBibG9ja1NpemUgOiBjb250ZW50Qm94U2l6ZS5ibG9ja1NpemUsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmxpbmVTaXplOiBjb250ZW50Qm94U2l6ZS5pbmxpbmVTaXplXG4gICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgZGV2aWNlUGl4ZWxDb250ZW50Qm94U2l6ZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2tTaXplIDogZGV2aWNlUGl4ZWxDb250ZW50Qm94U2l6ZS5ibG9ja1NpemUsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmxpbmVTaXplOiBkZXZpY2VQaXhlbENvbnRlbnRCb3hTaXplLmlubGluZVNpemVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YS5pZFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjb3VudD0wXG4gICAgICovXG4gICAgYXN5bmMgcmVnaXN0ZXIoZGF0YSwgY291bnQ9MCkge1xuICAgICAgICBsZXQgbWUgICA9IHRoaXMsXG4gICAgICAgICAgICBub2RlID0gRG9tQWNjZXNzLmdldEVsZW1lbnQoZGF0YS5pZCk7XG5cbiAgICAgICAgaWYgKG5vZGUpIHtcbiAgICAgICAgICAgIG1lLmluc3RhbmNlLm9ic2VydmUobm9kZSlcbiAgICAgICAgfSBlbHNlIGlmIChjb3VudCA8IG1lLnJlZ2lzdGVyQXR0ZW1wdHMpIHtcbiAgICAgICAgICAgIGF3YWl0IG1lLnRpbWVvdXQoMTAwKTtcbiAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgICBtZS5yZWdpc3RlcihkYXRhLCBjb3VudClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGEuaWRcbiAgICAgKi9cbiAgICB1bnJlZ2lzdGVyKGRhdGEpIHtcbiAgICAgICAgbGV0IG5vZGUgPSBEb21BY2Nlc3MuZ2V0RWxlbWVudChkYXRhLmlkKTtcbiAgICAgICAgbm9kZSAmJiB0aGlzLmluc3RhbmNlLnVub2JzZXJ2ZShub2RlKVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTmVvLnNldHVwQ2xhc3MoTmVvUmVzaXplT2JzZXJ2ZXIpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9