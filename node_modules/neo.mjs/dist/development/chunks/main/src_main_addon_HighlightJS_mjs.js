"use strict";
(self["webpackChunkneo_mjs"] = self["webpackChunkneo_mjs"] || []).push([["src_main_addon_HighlightJS_mjs"],{

/***/ "./src/main/addon/Base.mjs":
/*!*********************************!*\
  !*** ./src/main/addon/Base.mjs ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/Base.mjs */ "./src/core/Base.mjs");


/**
 * Base class for main thread addons
 * @class Neo.main.addon.Base
 * @extends Neo.core.Base
 */
class Base extends _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.main.addon.Base'
         * @protected
         */
        className: 'Neo.main.addon.Base',
        /**
         * An identifier for core.Base to get handled like singletons for remote method access
         * @member {Boolean} isMainThreadAddon=true
         * @protected
         */
        isMainThreadAddon: true,
        /**
         * Will get set to true once all addon related files got loaded (if there is a need to load)
         * @member {Boolean} isReady_=false
         * @protected
         */
        isReady_: false,
        /**
         * Amount in ms to delay the loading of library files, unless remote method access happens
         * Change the value to false in case you don't want an automated preloading
         * @member {Boolean|Number} preloadFilesDelay=5000
         * @protected
         */
        preloadFilesDelay: 5000,
    }

    /**
     * @member {Object[]} cache=[]
     */
    cache = []
    /**
     * Will get set to true once we start loading Monaco related files
     * @member {Boolean} isLoading=false
     */
    isLoading = false
    /**
     * Internal flag to store the setTimeout() id for loading external files
     * @member {Number|null} loadingTimeoutId=null
     */
    loadingTimeoutId = null

    /**
     * @param {Object} config
     */
    construct(config) {
        super.construct(config);

        let me = this;

        if (me.loadFiles) {
            if (me.preloadFilesDelay === 0) {
                me.loadFiles()
            } else if (Neo.isNumber(me.preloadFilesDelay)) {
                me.loadingTimeoutId = setTimeout(() => {
                    me.loadFiles()
                }, me.preloadFilesDelay)
            }
        }
    }

    /**
     * Triggered after the isReady config got changed
     * @param {Boolean} value
     * @param {Boolean} oldValue
     * @protected
     */
    afterSetIsReady(value, oldValue) {
        if (value) {
            let me = this,
                returnValue;

            me.cache.forEach(item => {
                returnValue = me[item.fn](item.data);
                item.resolve(returnValue)
            });

            me.cache = []
        }
    }

    /**
     * Internally caches call when isReady===false
     * Loads the library files in case this is not already happening
     * @param item
     * @returns {Promise<unknown>}
     */
    cacheMethodCall(item) {
        let me = this;

        if (!me.isLoading) {
            me.loadingTimeoutId && clearTimeout(me.loadingTimeoutId);
            me.loadingTimeoutId = null;
            me.loadFiles()
        }

        return new Promise((resolve, reject) => {
            me.cache.push({...item, resolve})
        })
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(Base));


/***/ }),

/***/ "./src/main/addon/HighlightJS.mjs":
/*!****************************************!*\
  !*** ./src/main/addon/HighlightJS.mjs ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Base.mjs */ "./src/main/addon/Base.mjs");
/* harmony import */ var _DomAccess_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../DomAccess.mjs */ "./src/main/DomAccess.mjs");



/**
 * Required for the docs app which uses highlight.js for the source views
 * @class Neo.main.addon.HighlightJS
 * @extends Neo.main.addon.Base
 */
class HighlightJS extends _Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.main.addon.HighlightJS'
         * @protected
         */
        className: 'Neo.main.addon.HighlightJS',
        /**
         * @member {String} highlightJsPath='./resources/highlight/highlight.pack.js'
         * @protected
         */
        highlightJsPath: './resources/lib/highlight/highlight.pack.js',
        /**
         * @member {String} highlightJsLineNumbersPath=Neo.config.basePath + 'node_modules/highlightjs-line-numbers.js/dist/highlightjs-line-numbers.min.js'
         * @protected
         */
        highlightJsLineNumbersPath: Neo.config.basePath + 'node_modules/highlightjs-line-numbers.js/dist/highlightjs-line-numbers.min.js',
        /**
         * Disabling the auto-preload to honor custom paths.
         * @member {Boolean|Number} preloadFilesDelay=false
         * @protected
         */
        preloadFilesDelay: false,
        /**
         * Remote method access for other workers
         * @member {Object} remote
         * @protected
         */
        remote: {
            app: [
                'highlightAuto',
                'loadFiles',
                'scrollIntoView',
                'syntaxHighlight',
                'switchTheme',
                'syntaxHighlightInit',
                'syntaxHighlightLine'
            ]
        },
        /**
         * @member {String} themePath='./resources/highlightjs-custom-github-theme.css'
         * @protected
         */
        themePath: './resources/lib/highlightjs-custom-github-theme.css'
    }

    /**
     * See: https://highlightjs.readthedocs.io/en/latest/api.html#highlightauto
     * @param {Object} data
     * @param {String} data.html
     * @returns {Object} value
     */
    highlightAuto(data) {
        if (!this.isReady) {
            return this.cacheMethodCall({fn: 'highlightAuto', data})
        }

        return hljs.highlightAuto(data.html).value
    }

    /**
     * @param {Object} data
     * @returns {Boolean}
     */
    async loadFiles(data) {
        let me = this;

        if (me.isLoading || me.isReady) {
            return true
        }

        me.isLoading = true;

        if (data) {
            delete data.appName;
            delete data.windowId;

            me.set(data);
        }

        await _DomAccess_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].loadScript(me.highlightJsPath);

        await Promise.all([
            _DomAccess_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].loadScript(me.highlightJsLineNumbersPath),
            Neo.main.addon.Stylesheet.createStyleSheet(null, 'hljs-theme', me.themePath)
        ]);

        me.isLoading = false;
        me.isReady   = true;

        return true
    }

    /**
     * @param {Object} data
     * @param {String} data.text
     * @param {String} data.vnodeId
     * @protected
     */
    scrollIntoView(data) {
        if (!this.isReady) {
            return this.cacheMethodCall({fn: 'scrollIntoView', data})
        }

        let parentEl = _DomAccess_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].getElement(data.vnodeId),
            el       = parentEl.querySelector('[data-list-header="' + data.text + '"]');

        el?.previousSibling.scrollIntoView({
            behavior: 'smooth',
            block   : 'start',
            inline  : 'nearest'
        })
    }

    /**
     * You can pass in 'light', 'dark', or a path for a custom theme
     * @param {String} theme
     */
    switchTheme(theme) {
        let definedThemes = {
                dark : './resources/lib/highlightjs-custom-dark-theme.css',
                light: './resources/lib/highlightjs-custom-github-theme.css'
            },
            switchToTheme = definedThemes[theme];

        switchToTheme ??= theme;
        this.themePath = switchToTheme;
        Neo.main.addon.Stylesheet.createStyleSheet(null, 'hljs-theme', switchToTheme)
    }

    /**
     * @param {Object} data
     * @param {String} data.vnodeId
     */
    syntaxHighlight(data) {
        if (!this.isReady) {
            return this.cacheMethodCall({fn: 'syntaxHighlight', data})
        }

        let node = document.getElementById(data.vnodeId);

        if (node) {
            hljs.highlightBlock(node);
            hljs.lineNumbersBlock(node)
        }
    }

    /**
     * @param {Object} data
     */
    syntaxHighlightInit(data) {
        if (!this.isReady) {
            return this.cacheMethodCall({fn: 'syntaxHighlightInit', data})
        }

        let blocks = document.querySelectorAll('pre code:not(.hljs)');
        Array.prototype.forEach.call(blocks, hljs.highlightBlock)
    }

    /**
     * @param {Object} data
     * @param {Number} data.addLine
     * @param {String} data.vnodeId
     * @param {Number} data.removeLine
     */
    syntaxHighlightLine(data) {
        if (!this.isReady) {
            return this.cacheMethodCall({fn: 'syntaxHighlightLine', data})
        }

        let parentEl = document.getElementById(data.vnodeId),
            cls      = 'neo-highlighted-line',
            el;

        if (Neo.isNumber(data.addLine)) {
            el = parentEl.querySelector('[data-line-number="' + data.addLine + '"]');

            if (el) {
                el.parentNode.classList.add(cls);

                el.parentNode.scrollIntoView({
                    behavior: 'smooth',
                    block   : 'start',
                    inline  : 'nearest'
                })
            }
        }

        if (Neo.isNumber(data.removeLine)) {
            el = parentEl.querySelector('[data-line-number="' + data.removeLine + '"]');
            el?.parentNode.classList.remove(cls)
        }
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(HighlightJS));


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,