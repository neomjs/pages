"use strict";
(self["webpackChunkneo_mjs"] = self["webpackChunkneo_mjs"] || []).push([["src_manager_rpc_Message_mjs"],{

/***/ "./src/manager/rpc/Message.mjs":
/*!*************************************!*\
  !*** ./src/manager/rpc/Message.mjs ***!
  \*************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Base.mjs */ "./src/manager/Base.mjs");
/* harmony import */ var _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/Array.mjs */ "./src/util/Array.mjs");



/**
 * @class Neo.manager.rpc.Message
 * @extends Neo.manager.Base
 * @singleton
 */
class Message extends _Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.manager.rpc.Message'
         * @protected
         */
        className: 'Neo.manager.rpc.Message',
        /**
         * @member {Boolean} singleton=true
         * @protected
         */
        singleton: true,
        /**
         * @member {Object[]} sorters
         */
        sorters: [{
            direction: 'ASC',
            property : 'id'
        }]
    }

    /**
     * Stores the urls of endpoints for which a setTimeout() call is in progress
     * @member {String[]} endPointTimeouts=[]
     */
    endPointTimeouts = []
    /**
     * internal incrementing flag
     * @member {Number} messageId=1
     * @protected
     */
    messageId = 1
    /**
     * Time window in ms for buffering incoming message requests
     * @member {Number} requestBuffer=20
     */
    requestBuffer = 20
    /**
     * @member {Object} socketConnections={}
     */
    socketConnections = {}
    /**
     * internal incrementing flag
     * @member {Number} transactionId=1
     * @protected
     */
    transactionId = 1

    /**
     *
     * @param {Object} msg
     * @returns {Promise<any>}
     */
    onMessage(msg) {
        let api = Neo.manager.rpc.Api.get(`${msg.service}.${msg.method}`);

        return this[`onMessage${Neo.capitalize(api.type)}`](msg, api);
    }

    /**
     *
     * @param {Object} msg
     * @param {Object} api
     * @protected
     * @returns {Promise<any>}
     */
    onMessageAjax(msg, api) {
        return new Promise((resolve, reject) => {
            let me    = this,
                {url} = api;

            me.register({
                id           : me.messageId,
                method       : msg.method,
                params       : msg.params,
                reject,
                resolve,
                service      : msg.service,
                transactionId: 0,
                url
            });

            me.messageId++;

            if (!me.endPointTimeouts.includes(url)) {
                me.endPointTimeouts.push(url);

                me.timeout(me.requestBuffer).then(() => {
                    me.resolveBufferTimeout(url)
                })
            }
        })
    }

    /**
     *
     * @param {Object} msg
     * @param {Object} api
     * @protected
     * @returns {Promise<any>}
     */
    async onMessageWebsocket(msg, api) {
        let me         = this,
            {url}      = api,
            connection = me.socketConnections[url];

        if (!connection) {
            let module = await __webpack_require__.e(/*! import() */ "src_data_connection_WebSocket_mjs").then(__webpack_require__.bind(__webpack_require__, /*! ../../data/connection/WebSocket.mjs */ "./src/data/connection/WebSocket.mjs"));

            me.socketConnections[url] = connection = Neo.create(module.default, {serverAddress: url})
        }

        return await connection.promiseMessage(msg)
    }

    /**
     * @param {String} url
     */
    async resolveBufferTimeout(url) {
        let me              = this,
            itemIds         = [],
            processItems    = me.find({transactionId: 0, url}),
            requests        = [],
            {transactionId} = me,
            response;

        processItems.forEach(item => {
            item.transactionId = transactionId;

            itemIds.push(item.id);

            requests.push({
                id     : item.id,
                method : item.method,
                params : item.params,
                service: item.service
            })
        });

        _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].remove(me.endPointTimeouts, url);

        me.transactionId++;

        response = await Neo.Fetch.request(url, {}, 'post', JSON.stringify({tid: transactionId, requests}));

        processItems.forEach(item => {
            // todo: pass the item which is included inside the response object
            // todo: reject the Promise in case the item is missing

            item.resolve()
        });

        // todo: remove only the items which are included inside the response
        me.remove(itemIds)
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(Message));


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2h1bmtzL2RhdGEvc3JjX21hbmFnZXJfcnBjX01lc3NhZ2VfbWpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFtQztBQUNTOztBQUU1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLGlEQUFJO0FBQzFCO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixTQUFTO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFVBQVU7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBLGdCQUFnQixVQUFVO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFFBQVE7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixRQUFRO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixRQUFRO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFFBQVE7QUFDeEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSw2Q0FBNkMsWUFBWSxHQUFHLFdBQVc7O0FBRXZFLGdDQUFnQyx5QkFBeUI7QUFDekQ7O0FBRUE7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkI7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsS0FBSzs7QUFFdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTs7QUFFYjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkI7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsYUFBYSxVQUFVO0FBQ3ZCOztBQUVBO0FBQ0EsK0JBQStCLGdOQUE2Qzs7QUFFNUUsaUZBQWlGLG1CQUFtQjtBQUNwRzs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLHNCQUFzQjtBQUM3RDtBQUNBLGFBQWEsZUFBZTtBQUM1Qjs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUzs7QUFFVCxRQUFRLHVEQUFROztBQUVoQjs7QUFFQSxrREFBa0QsMEJBQTBCLDZCQUE2Qjs7QUFFekc7QUFDQTtBQUNBOztBQUVBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpRUFBZSx1QkFBdUIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL25lby5tanMvLi9zcmMvbWFuYWdlci9ycGMvTWVzc2FnZS5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJhc2UgICAgIGZyb20gJy4uL0Jhc2UubWpzJztcbmltcG9ydCBOZW9BcnJheSBmcm9tICcuLi8uLi91dGlsL0FycmF5Lm1qcyc7XG5cbi8qKlxuICogQGNsYXNzIE5lby5tYW5hZ2VyLnJwYy5NZXNzYWdlXG4gKiBAZXh0ZW5kcyBOZW8ubWFuYWdlci5CYXNlXG4gKiBAc2luZ2xldG9uXG4gKi9cbmNsYXNzIE1lc3NhZ2UgZXh0ZW5kcyBCYXNlIHtcbiAgICBzdGF0aWMgY29uZmlnID0ge1xuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSBjbGFzc05hbWU9J05lby5tYW5hZ2VyLnJwYy5NZXNzYWdlJ1xuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBjbGFzc05hbWU6ICdOZW8ubWFuYWdlci5ycGMuTWVzc2FnZScsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtCb29sZWFufSBzaW5nbGV0b249dHJ1ZVxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBzaW5nbGV0b246IHRydWUsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtPYmplY3RbXX0gc29ydGVyc1xuICAgICAgICAgKi9cbiAgICAgICAgc29ydGVyczogW3tcbiAgICAgICAgICAgIGRpcmVjdGlvbjogJ0FTQycsXG4gICAgICAgICAgICBwcm9wZXJ0eSA6ICdpZCdcbiAgICAgICAgfV1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTdG9yZXMgdGhlIHVybHMgb2YgZW5kcG9pbnRzIGZvciB3aGljaCBhIHNldFRpbWVvdXQoKSBjYWxsIGlzIGluIHByb2dyZXNzXG4gICAgICogQG1lbWJlciB7U3RyaW5nW119IGVuZFBvaW50VGltZW91dHM9W11cbiAgICAgKi9cbiAgICBlbmRQb2ludFRpbWVvdXRzID0gW11cbiAgICAvKipcbiAgICAgKiBpbnRlcm5hbCBpbmNyZW1lbnRpbmcgZmxhZ1xuICAgICAqIEBtZW1iZXIge051bWJlcn0gbWVzc2FnZUlkPTFcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgbWVzc2FnZUlkID0gMVxuICAgIC8qKlxuICAgICAqIFRpbWUgd2luZG93IGluIG1zIGZvciBidWZmZXJpbmcgaW5jb21pbmcgbWVzc2FnZSByZXF1ZXN0c1xuICAgICAqIEBtZW1iZXIge051bWJlcn0gcmVxdWVzdEJ1ZmZlcj0yMFxuICAgICAqL1xuICAgIHJlcXVlc3RCdWZmZXIgPSAyMFxuICAgIC8qKlxuICAgICAqIEBtZW1iZXIge09iamVjdH0gc29ja2V0Q29ubmVjdGlvbnM9e31cbiAgICAgKi9cbiAgICBzb2NrZXRDb25uZWN0aW9ucyA9IHt9XG4gICAgLyoqXG4gICAgICogaW50ZXJuYWwgaW5jcmVtZW50aW5nIGZsYWdcbiAgICAgKiBAbWVtYmVyIHtOdW1iZXJ9IHRyYW5zYWN0aW9uSWQ9MVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICB0cmFuc2FjdGlvbklkID0gMVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gbXNnXG4gICAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICAgKi9cbiAgICBvbk1lc3NhZ2UobXNnKSB7XG4gICAgICAgIGxldCBhcGkgPSBOZW8ubWFuYWdlci5ycGMuQXBpLmdldChgJHttc2cuc2VydmljZX0uJHttc2cubWV0aG9kfWApO1xuXG4gICAgICAgIHJldHVybiB0aGlzW2Bvbk1lc3NhZ2Uke05lby5jYXBpdGFsaXplKGFwaS50eXBlKX1gXShtc2csIGFwaSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gbXNnXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGFwaVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgICAqL1xuICAgIG9uTWVzc2FnZUFqYXgobXNnLCBhcGkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGxldCBtZSAgICA9IHRoaXMsXG4gICAgICAgICAgICAgICAge3VybH0gPSBhcGk7XG5cbiAgICAgICAgICAgIG1lLnJlZ2lzdGVyKHtcbiAgICAgICAgICAgICAgICBpZCAgICAgICAgICAgOiBtZS5tZXNzYWdlSWQsXG4gICAgICAgICAgICAgICAgbWV0aG9kICAgICAgIDogbXNnLm1ldGhvZCxcbiAgICAgICAgICAgICAgICBwYXJhbXMgICAgICAgOiBtc2cucGFyYW1zLFxuICAgICAgICAgICAgICAgIHJlamVjdCxcbiAgICAgICAgICAgICAgICByZXNvbHZlLFxuICAgICAgICAgICAgICAgIHNlcnZpY2UgICAgICA6IG1zZy5zZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uSWQ6IDAsXG4gICAgICAgICAgICAgICAgdXJsXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgbWUubWVzc2FnZUlkKys7XG5cbiAgICAgICAgICAgIGlmICghbWUuZW5kUG9pbnRUaW1lb3V0cy5pbmNsdWRlcyh1cmwpKSB7XG4gICAgICAgICAgICAgICAgbWUuZW5kUG9pbnRUaW1lb3V0cy5wdXNoKHVybCk7XG5cbiAgICAgICAgICAgICAgICBtZS50aW1lb3V0KG1lLnJlcXVlc3RCdWZmZXIpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBtZS5yZXNvbHZlQnVmZmVyVGltZW91dCh1cmwpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBtc2dcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gYXBpXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAgICovXG4gICAgYXN5bmMgb25NZXNzYWdlV2Vic29ja2V0KG1zZywgYXBpKSB7XG4gICAgICAgIGxldCBtZSAgICAgICAgID0gdGhpcyxcbiAgICAgICAgICAgIHt1cmx9ICAgICAgPSBhcGksXG4gICAgICAgICAgICBjb25uZWN0aW9uID0gbWUuc29ja2V0Q29ubmVjdGlvbnNbdXJsXTtcblxuICAgICAgICBpZiAoIWNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgIGxldCBtb2R1bGUgPSBhd2FpdCBpbXBvcnQoJy4uLy4uL2RhdGEvY29ubmVjdGlvbi9XZWJTb2NrZXQubWpzJyk7XG5cbiAgICAgICAgICAgIG1lLnNvY2tldENvbm5lY3Rpb25zW3VybF0gPSBjb25uZWN0aW9uID0gTmVvLmNyZWF0ZShtb2R1bGUuZGVmYXVsdCwge3NlcnZlckFkZHJlc3M6IHVybH0pXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYXdhaXQgY29ubmVjdGlvbi5wcm9taXNlTWVzc2FnZShtc2cpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHVybFxuICAgICAqL1xuICAgIGFzeW5jIHJlc29sdmVCdWZmZXJUaW1lb3V0KHVybCkge1xuICAgICAgICBsZXQgbWUgICAgICAgICAgICAgID0gdGhpcyxcbiAgICAgICAgICAgIGl0ZW1JZHMgICAgICAgICA9IFtdLFxuICAgICAgICAgICAgcHJvY2Vzc0l0ZW1zICAgID0gbWUuZmluZCh7dHJhbnNhY3Rpb25JZDogMCwgdXJsfSksXG4gICAgICAgICAgICByZXF1ZXN0cyAgICAgICAgPSBbXSxcbiAgICAgICAgICAgIHt0cmFuc2FjdGlvbklkfSA9IG1lLFxuICAgICAgICAgICAgcmVzcG9uc2U7XG5cbiAgICAgICAgcHJvY2Vzc0l0ZW1zLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgICAgICBpdGVtLnRyYW5zYWN0aW9uSWQgPSB0cmFuc2FjdGlvbklkO1xuXG4gICAgICAgICAgICBpdGVtSWRzLnB1c2goaXRlbS5pZCk7XG5cbiAgICAgICAgICAgIHJlcXVlc3RzLnB1c2goe1xuICAgICAgICAgICAgICAgIGlkICAgICA6IGl0ZW0uaWQsXG4gICAgICAgICAgICAgICAgbWV0aG9kIDogaXRlbS5tZXRob2QsXG4gICAgICAgICAgICAgICAgcGFyYW1zIDogaXRlbS5wYXJhbXMsXG4gICAgICAgICAgICAgICAgc2VydmljZTogaXRlbS5zZXJ2aWNlXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KTtcblxuICAgICAgICBOZW9BcnJheS5yZW1vdmUobWUuZW5kUG9pbnRUaW1lb3V0cywgdXJsKTtcblxuICAgICAgICBtZS50cmFuc2FjdGlvbklkKys7XG5cbiAgICAgICAgcmVzcG9uc2UgPSBhd2FpdCBOZW8uRmV0Y2gucmVxdWVzdCh1cmwsIHt9LCAncG9zdCcsIEpTT04uc3RyaW5naWZ5KHt0aWQ6IHRyYW5zYWN0aW9uSWQsIHJlcXVlc3RzfSkpO1xuXG4gICAgICAgIHByb2Nlc3NJdGVtcy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgICAgICAgLy8gdG9kbzogcGFzcyB0aGUgaXRlbSB3aGljaCBpcyBpbmNsdWRlZCBpbnNpZGUgdGhlIHJlc3BvbnNlIG9iamVjdFxuICAgICAgICAgICAgLy8gdG9kbzogcmVqZWN0IHRoZSBQcm9taXNlIGluIGNhc2UgdGhlIGl0ZW0gaXMgbWlzc2luZ1xuXG4gICAgICAgICAgICBpdGVtLnJlc29sdmUoKVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyB0b2RvOiByZW1vdmUgb25seSB0aGUgaXRlbXMgd2hpY2ggYXJlIGluY2x1ZGVkIGluc2lkZSB0aGUgcmVzcG9uc2VcbiAgICAgICAgbWUucmVtb3ZlKGl0ZW1JZHMpXG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBOZW8uc2V0dXBDbGFzcyhNZXNzYWdlKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==