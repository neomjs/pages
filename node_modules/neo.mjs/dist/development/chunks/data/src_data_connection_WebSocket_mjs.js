"use strict";
(self["webpackChunkneo_mjs"] = self["webpackChunkneo_mjs"] || []).push([["src_data_connection_WebSocket_mjs"],{

/***/ "./src/data/connection/WebSocket.mjs":
/*!*******************************************!*\
  !*** ./src/data/connection/WebSocket.mjs ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/Base.mjs */ "./src/core/Base.mjs");
/* harmony import */ var _util_Function_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/Function.mjs */ "./src/util/Function.mjs");
/* harmony import */ var _core_Observable_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/Observable.mjs */ "./src/core/Observable.mjs");




/**
 * @class Neo.data.connection.WebSocket
 * @extends Neo.core.Base
 */
class Socket extends _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    /**
     * True automatically applies the core.Observable mixin
     * @member {Boolean} observable=true
     * @static
     */
    static observable = true

    static config = {
        /**
         * @member {String} className='Neo.data.connection.WebSocket'
         * @protected
         */
        className: 'Neo.data.connection.WebSocket',
        /**
         * @member {String} ntype='socket-connection'
         * @protected
         */
        ntype: 'socket-connection',
        /**
         * @member {WebSocket|null} socket_=null
         * @protected
         */
        socket_: null
    }

    /**
     * @member {String|null} channel=null
     */
    channel = null
    /**
     * @member {Number} maxReconnectAttempts=5
     */
    maxReconnectAttempts = 5
    /**
     * @member {Object} messageCallbacks={}
     * @protected
     */
    messageCallbacks = {}
    /**
     * @member {Number} messageId=1
     * @protected
     */
    messageId = 1
    /**
     * @member {Number} reconnectAttempts=0
     * @protected
     */
    reconnectAttempts = 0
    /**
     * @member {String|null} serverAddress=null
     */
    serverAddress = null

    /**
     * @param {Object} config
     */
    construct(config) {
        super.construct(config);
        this.createSocket()
    }

    /**
     * @param {Function} callback
     * @param {Object} scope
     */
    attemptReconnect(callback, scope) {
        let me = this;

        me.reconnectAttempts++;

        if (me.reconnectAttempts < me.maxReconnectAttempts) {
            me.createSocket();

            callback && me.on('open', {
                callback,
                scope : scope || me,
                single: true
            })
        }
    }

    /**
     * Intercepts the WebSocket send calls
     * @param {Object} data
     * @returns {String}
     */
    beforeSend(data) {
        let me        = this,
            {channel} = me;

        return JSON.stringify(channel ? {channel, data} : data)
    }

    /**
     * Triggered before the socket config gets changed.
     * @param {WebSocket|null} value
     * @param {WebSocket|null} oldValue
     * @returns {WebSocket|null}
     * @protected
     */
    beforeSetSocket(value, oldValue) {
        if (value) {
            let me = this;

            Object.assign(value, {
                onclose  : me.onClose  .bind(me),
                onerror  : me.onError  .bind(me),
                onmessage: me.onMessage.bind(me),
                onopen   : me.onOpen   .bind(me)
            });

            (0,_util_Function_mjs__WEBPACK_IMPORTED_MODULE_1__.createInterceptor)(value, 'send', me.beforeSend, me)
        }

        return value
    }

    /**
     * @param {Number} [code] defaults to 1000
     * @param {String} [reason]
     */
    close(code, reason) {
        this.socket.close(code, reason)
    }

    /**
     *
     */
    createSocket() {
        this.socket = new WebSocket(this.serverAddress)
    }

    /**
     *
     */
    destroy(...args) {
        this.close();
        super.destroy(...args)
    }

    /**
     * @param {CloseEvent} event The Websocket generated CloseEvent
     * @param {Number}     event.code The WebSocket connection close code provided by the server
     *
     *        Code        Name                  Description
     *        0-999                             Reserved and not used.
     *        1000        CLOSE_NORMAL          Normal closure; the connection successfully completed whatever purpose for which it was created.
     *        1001        CLOSE_GOING_AWAY      The endpoint is going away, either because of a server failure or because the browser is navigating away from the page that opened the connection.
     *        1002        CLOSE_PROTOCOL_ERROR  The endpoint is terminating the connection due to a protocol error.
     *        1003        CLOSE_UNSUPPORTED     The connection is being terminated because the endpoint received data of a type it cannot accept (for example, a text-only endpoint received binary data).
     *        1004        CLOSE_TOO_LARGE       The endpoint is terminating the connection because a data frame was received that is too large.
     *        1005        CLOSE_NO_STATUS       Reserved.  Indicates that no status code was provided even though one was expected.
     *        1006        CLOSE_ABNORMAL        Reserved. Used to indicate that a connection was closed abnormally (that is, with no close frame being sent) when a status code is expected.
     *        1007-1999                         Reserved for future use by the WebSocket standard.
     *        2000-2999                         Reserved for use by WebSocket extensions.
     *        3000-3999                         Available for use by libraries and frameworks. May not be used by applications.
     *        4000-4999                         Available for use by applications.
     *
     * @param {String}     reason A string indicating the reason the server closed the connection. This is specific to the particular server and sub-protocol.
     * @param {Boolean}    wasClean Indicates whether or not the connection was cleanly closed.
     */
    onClose(event, reason, wasClean) {
        console.log('onClose', event, reason, wasClean)
    }

    /**
     *
     */
    onError() {
        console.log('onError', arguments)
    }

    /**
     * @param {MessageEvent} event
     */
    onMessage(event) {
        let me   = this,
            data = JSON.parse(event.data);

        if (data.mId) {
            me.messageCallbacks[data.mId].resolve(data.data);
            delete me.messageCallbacks[data.mId]
        }
    }

    /**
     *
     */
    onOpen() {
        this.fire('open', {scope: this})
    }

    /**
     * @param {Object} data
     * @returns {Promise<any>}
     */
    promiseMessage(data) {
        let me = this;

        return new Promise((resolve, reject) => {
            me.messageCallbacks[me.messageId] = {reject, resolve};

            me.sendMessage({data, mId: me.messageId});
            me.messageId++
        })
    }

    /**
     * @param {Object} data
     */
    sendMessage(data) {
        let me       = this,
            {socket} = me,
            d        = data;

        // CONNECTING  0   The connection is not yet open.
        // OPEN        1   The connection is open and ready to communicate.
        // CLOSING     2   The connection is in the process of closing.
        // CLOSED      3   The connection is closed or couldn't be opened.

        // If socket is not yet ready let's defer to open then resend
        switch (socket.readyState) {
            case WebSocket.CLOSED:
            case WebSocket.CLOSING:
                me.attemptReconnect(function() {
                    me.sendMessage(d);
                });
                break;
            case WebSocket.CONNECTING:
                me.on('open', function() {
                    me.sendMessage(d)
                }, me, {once: true});
                break;
            case WebSocket.OPEN:
                socket.send(data);
                break;
        }
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(Socket));


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2h1bmtzL2RhdGEvc3JjX2RhdGFfY29ubmVjdGlvbl9XZWJTb2NrZXRfbWpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBc0Q7QUFDSTtBQUNFOztBQUU1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixzREFBSTtBQUN6QjtBQUNBO0FBQ0EsZ0JBQWdCLFNBQVM7QUFDekI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGdCQUFnQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGdCQUFnQixhQUFhO0FBQzdCO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixRQUFRO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixRQUFRO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFFBQVE7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixhQUFhO0FBQzdCO0FBQ0E7O0FBRUE7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGVBQWUsVUFBVTtBQUN6QixlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxhQUFhLFNBQVM7O0FBRXRCLHlDQUF5QyxlQUFlO0FBQ3hEOztBQUVBO0FBQ0E7QUFDQSxlQUFlLGdCQUFnQjtBQUMvQixlQUFlLGdCQUFnQjtBQUMvQixpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTs7QUFFYixZQUFZLHFFQUFpQjtBQUM3Qjs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxlQUFlLFlBQVk7QUFDM0IsZUFBZSxZQUFZO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLGdFQUFnRTtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxZQUFZO0FBQzNCLGVBQWUsWUFBWTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxlQUFlLGNBQWM7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixZQUFZO0FBQ3ZDOztBQUVBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpREFBaUQ7O0FBRWpELDRCQUE0Qix3QkFBd0I7QUFDcEQ7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixPQUFPLFdBQVc7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsaUVBQWUsc0JBQXNCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZW8ubWpzLy4vc3JjL2RhdGEvY29ubmVjdGlvbi9XZWJTb2NrZXQubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCYXNlICAgICAgICAgICAgICAgIGZyb20gJy4uLy4uL2NvcmUvQmFzZS5tanMnO1xuaW1wb3J0IHtjcmVhdGVJbnRlcmNlcHRvcn0gZnJvbSAnLi4vLi4vdXRpbC9GdW5jdGlvbi5tanMnO1xuaW1wb3J0IE9ic2VydmFibGUgICAgICAgICAgZnJvbSAnLi4vLi4vY29yZS9PYnNlcnZhYmxlLm1qcyc7XG5cbi8qKlxuICogQGNsYXNzIE5lby5kYXRhLmNvbm5lY3Rpb24uV2ViU29ja2V0XG4gKiBAZXh0ZW5kcyBOZW8uY29yZS5CYXNlXG4gKi9cbmNsYXNzIFNvY2tldCBleHRlbmRzIEJhc2Uge1xuICAgIC8qKlxuICAgICAqIFRydWUgYXV0b21hdGljYWxseSBhcHBsaWVzIHRoZSBjb3JlLk9ic2VydmFibGUgbWl4aW5cbiAgICAgKiBAbWVtYmVyIHtCb29sZWFufSBvYnNlcnZhYmxlPXRydWVcbiAgICAgKiBAc3RhdGljXG4gICAgICovXG4gICAgc3RhdGljIG9ic2VydmFibGUgPSB0cnVlXG5cbiAgICBzdGF0aWMgY29uZmlnID0ge1xuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSBjbGFzc05hbWU9J05lby5kYXRhLmNvbm5lY3Rpb24uV2ViU29ja2V0J1xuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBjbGFzc05hbWU6ICdOZW8uZGF0YS5jb25uZWN0aW9uLldlYlNvY2tldCcsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IG50eXBlPSdzb2NrZXQtY29ubmVjdGlvbidcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgbnR5cGU6ICdzb2NrZXQtY29ubmVjdGlvbicsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtXZWJTb2NrZXR8bnVsbH0gc29ja2V0Xz1udWxsXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIHNvY2tldF86IG51bGxcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyIHtTdHJpbmd8bnVsbH0gY2hhbm5lbD1udWxsXG4gICAgICovXG4gICAgY2hhbm5lbCA9IG51bGxcbiAgICAvKipcbiAgICAgKiBAbWVtYmVyIHtOdW1iZXJ9IG1heFJlY29ubmVjdEF0dGVtcHRzPTVcbiAgICAgKi9cbiAgICBtYXhSZWNvbm5lY3RBdHRlbXB0cyA9IDVcbiAgICAvKipcbiAgICAgKiBAbWVtYmVyIHtPYmplY3R9IG1lc3NhZ2VDYWxsYmFja3M9e31cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgbWVzc2FnZUNhbGxiYWNrcyA9IHt9XG4gICAgLyoqXG4gICAgICogQG1lbWJlciB7TnVtYmVyfSBtZXNzYWdlSWQ9MVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBtZXNzYWdlSWQgPSAxXG4gICAgLyoqXG4gICAgICogQG1lbWJlciB7TnVtYmVyfSByZWNvbm5lY3RBdHRlbXB0cz0wXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHJlY29ubmVjdEF0dGVtcHRzID0gMFxuICAgIC8qKlxuICAgICAqIEBtZW1iZXIge1N0cmluZ3xudWxsfSBzZXJ2ZXJBZGRyZXNzPW51bGxcbiAgICAgKi9cbiAgICBzZXJ2ZXJBZGRyZXNzID0gbnVsbFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZ1xuICAgICAqL1xuICAgIGNvbnN0cnVjdChjb25maWcpIHtcbiAgICAgICAgc3VwZXIuY29uc3RydWN0KGNvbmZpZyk7XG4gICAgICAgIHRoaXMuY3JlYXRlU29ja2V0KClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzY29wZVxuICAgICAqL1xuICAgIGF0dGVtcHRSZWNvbm5lY3QoY2FsbGJhY2ssIHNjb3BlKSB7XG4gICAgICAgIGxldCBtZSA9IHRoaXM7XG5cbiAgICAgICAgbWUucmVjb25uZWN0QXR0ZW1wdHMrKztcblxuICAgICAgICBpZiAobWUucmVjb25uZWN0QXR0ZW1wdHMgPCBtZS5tYXhSZWNvbm5lY3RBdHRlbXB0cykge1xuICAgICAgICAgICAgbWUuY3JlYXRlU29ja2V0KCk7XG5cbiAgICAgICAgICAgIGNhbGxiYWNrICYmIG1lLm9uKCdvcGVuJywge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrLFxuICAgICAgICAgICAgICAgIHNjb3BlIDogc2NvcGUgfHwgbWUsXG4gICAgICAgICAgICAgICAgc2luZ2xlOiB0cnVlXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW50ZXJjZXB0cyB0aGUgV2ViU29ja2V0IHNlbmQgY2FsbHNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9XG4gICAgICovXG4gICAgYmVmb3JlU2VuZChkYXRhKSB7XG4gICAgICAgIGxldCBtZSAgICAgICAgPSB0aGlzLFxuICAgICAgICAgICAge2NoYW5uZWx9ID0gbWU7XG5cbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGNoYW5uZWwgPyB7Y2hhbm5lbCwgZGF0YX0gOiBkYXRhKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJlZCBiZWZvcmUgdGhlIHNvY2tldCBjb25maWcgZ2V0cyBjaGFuZ2VkLlxuICAgICAqIEBwYXJhbSB7V2ViU29ja2V0fG51bGx9IHZhbHVlXG4gICAgICogQHBhcmFtIHtXZWJTb2NrZXR8bnVsbH0gb2xkVmFsdWVcbiAgICAgKiBAcmV0dXJucyB7V2ViU29ja2V0fG51bGx9XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGJlZm9yZVNldFNvY2tldCh2YWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICBsZXQgbWUgPSB0aGlzO1xuXG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHZhbHVlLCB7XG4gICAgICAgICAgICAgICAgb25jbG9zZSAgOiBtZS5vbkNsb3NlICAuYmluZChtZSksXG4gICAgICAgICAgICAgICAgb25lcnJvciAgOiBtZS5vbkVycm9yICAuYmluZChtZSksXG4gICAgICAgICAgICAgICAgb25tZXNzYWdlOiBtZS5vbk1lc3NhZ2UuYmluZChtZSksXG4gICAgICAgICAgICAgICAgb25vcGVuICAgOiBtZS5vbk9wZW4gICAuYmluZChtZSlcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjcmVhdGVJbnRlcmNlcHRvcih2YWx1ZSwgJ3NlbmQnLCBtZS5iZWZvcmVTZW5kLCBtZSlcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2YWx1ZVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY29kZV0gZGVmYXVsdHMgdG8gMTAwMFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbcmVhc29uXVxuICAgICAqL1xuICAgIGNsb3NlKGNvZGUsIHJlYXNvbikge1xuICAgICAgICB0aGlzLnNvY2tldC5jbG9zZShjb2RlLCByZWFzb24pXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICBjcmVhdGVTb2NrZXQoKSB7XG4gICAgICAgIHRoaXMuc29ja2V0ID0gbmV3IFdlYlNvY2tldCh0aGlzLnNlcnZlckFkZHJlc3MpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICBkZXN0cm95KC4uLmFyZ3MpIHtcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICBzdXBlci5kZXN0cm95KC4uLmFyZ3MpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtDbG9zZUV2ZW50fSBldmVudCBUaGUgV2Vic29ja2V0IGdlbmVyYXRlZCBDbG9zZUV2ZW50XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9ICAgICBldmVudC5jb2RlIFRoZSBXZWJTb2NrZXQgY29ubmVjdGlvbiBjbG9zZSBjb2RlIHByb3ZpZGVkIGJ5IHRoZSBzZXJ2ZXJcbiAgICAgKlxuICAgICAqICAgICAgICBDb2RlICAgICAgICBOYW1lICAgICAgICAgICAgICAgICAgRGVzY3JpcHRpb25cbiAgICAgKiAgICAgICAgMC05OTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlc2VydmVkIGFuZCBub3QgdXNlZC5cbiAgICAgKiAgICAgICAgMTAwMCAgICAgICAgQ0xPU0VfTk9STUFMICAgICAgICAgIE5vcm1hbCBjbG9zdXJlOyB0aGUgY29ubmVjdGlvbiBzdWNjZXNzZnVsbHkgY29tcGxldGVkIHdoYXRldmVyIHB1cnBvc2UgZm9yIHdoaWNoIGl0IHdhcyBjcmVhdGVkLlxuICAgICAqICAgICAgICAxMDAxICAgICAgICBDTE9TRV9HT0lOR19BV0FZICAgICAgVGhlIGVuZHBvaW50IGlzIGdvaW5nIGF3YXksIGVpdGhlciBiZWNhdXNlIG9mIGEgc2VydmVyIGZhaWx1cmUgb3IgYmVjYXVzZSB0aGUgYnJvd3NlciBpcyBuYXZpZ2F0aW5nIGF3YXkgZnJvbSB0aGUgcGFnZSB0aGF0IG9wZW5lZCB0aGUgY29ubmVjdGlvbi5cbiAgICAgKiAgICAgICAgMTAwMiAgICAgICAgQ0xPU0VfUFJPVE9DT0xfRVJST1IgIFRoZSBlbmRwb2ludCBpcyB0ZXJtaW5hdGluZyB0aGUgY29ubmVjdGlvbiBkdWUgdG8gYSBwcm90b2NvbCBlcnJvci5cbiAgICAgKiAgICAgICAgMTAwMyAgICAgICAgQ0xPU0VfVU5TVVBQT1JURUQgICAgIFRoZSBjb25uZWN0aW9uIGlzIGJlaW5nIHRlcm1pbmF0ZWQgYmVjYXVzZSB0aGUgZW5kcG9pbnQgcmVjZWl2ZWQgZGF0YSBvZiBhIHR5cGUgaXQgY2Fubm90IGFjY2VwdCAoZm9yIGV4YW1wbGUsIGEgdGV4dC1vbmx5IGVuZHBvaW50IHJlY2VpdmVkIGJpbmFyeSBkYXRhKS5cbiAgICAgKiAgICAgICAgMTAwNCAgICAgICAgQ0xPU0VfVE9PX0xBUkdFICAgICAgIFRoZSBlbmRwb2ludCBpcyB0ZXJtaW5hdGluZyB0aGUgY29ubmVjdGlvbiBiZWNhdXNlIGEgZGF0YSBmcmFtZSB3YXMgcmVjZWl2ZWQgdGhhdCBpcyB0b28gbGFyZ2UuXG4gICAgICogICAgICAgIDEwMDUgICAgICAgIENMT1NFX05PX1NUQVRVUyAgICAgICBSZXNlcnZlZC4gIEluZGljYXRlcyB0aGF0IG5vIHN0YXR1cyBjb2RlIHdhcyBwcm92aWRlZCBldmVuIHRob3VnaCBvbmUgd2FzIGV4cGVjdGVkLlxuICAgICAqICAgICAgICAxMDA2ICAgICAgICBDTE9TRV9BQk5PUk1BTCAgICAgICAgUmVzZXJ2ZWQuIFVzZWQgdG8gaW5kaWNhdGUgdGhhdCBhIGNvbm5lY3Rpb24gd2FzIGNsb3NlZCBhYm5vcm1hbGx5ICh0aGF0IGlzLCB3aXRoIG5vIGNsb3NlIGZyYW1lIGJlaW5nIHNlbnQpIHdoZW4gYSBzdGF0dXMgY29kZSBpcyBleHBlY3RlZC5cbiAgICAgKiAgICAgICAgMTAwNy0xOTk5ICAgICAgICAgICAgICAgICAgICAgICAgIFJlc2VydmVkIGZvciBmdXR1cmUgdXNlIGJ5IHRoZSBXZWJTb2NrZXQgc3RhbmRhcmQuXG4gICAgICogICAgICAgIDIwMDAtMjk5OSAgICAgICAgICAgICAgICAgICAgICAgICBSZXNlcnZlZCBmb3IgdXNlIGJ5IFdlYlNvY2tldCBleHRlbnNpb25zLlxuICAgICAqICAgICAgICAzMDAwLTM5OTkgICAgICAgICAgICAgICAgICAgICAgICAgQXZhaWxhYmxlIGZvciB1c2UgYnkgbGlicmFyaWVzIGFuZCBmcmFtZXdvcmtzLiBNYXkgbm90IGJlIHVzZWQgYnkgYXBwbGljYXRpb25zLlxuICAgICAqICAgICAgICA0MDAwLTQ5OTkgICAgICAgICAgICAgICAgICAgICAgICAgQXZhaWxhYmxlIGZvciB1c2UgYnkgYXBwbGljYXRpb25zLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9ICAgICByZWFzb24gQSBzdHJpbmcgaW5kaWNhdGluZyB0aGUgcmVhc29uIHRoZSBzZXJ2ZXIgY2xvc2VkIHRoZSBjb25uZWN0aW9uLiBUaGlzIGlzIHNwZWNpZmljIHRvIHRoZSBwYXJ0aWN1bGFyIHNlcnZlciBhbmQgc3ViLXByb3RvY29sLlxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gICAgd2FzQ2xlYW4gSW5kaWNhdGVzIHdoZXRoZXIgb3Igbm90IHRoZSBjb25uZWN0aW9uIHdhcyBjbGVhbmx5IGNsb3NlZC5cbiAgICAgKi9cbiAgICBvbkNsb3NlKGV2ZW50LCByZWFzb24sIHdhc0NsZWFuKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdvbkNsb3NlJywgZXZlbnQsIHJlYXNvbiwgd2FzQ2xlYW4pXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICBvbkVycm9yKCkge1xuICAgICAgICBjb25zb2xlLmxvZygnb25FcnJvcicsIGFyZ3VtZW50cylcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge01lc3NhZ2VFdmVudH0gZXZlbnRcbiAgICAgKi9cbiAgICBvbk1lc3NhZ2UoZXZlbnQpIHtcbiAgICAgICAgbGV0IG1lICAgPSB0aGlzLFxuICAgICAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZXZlbnQuZGF0YSk7XG5cbiAgICAgICAgaWYgKGRhdGEubUlkKSB7XG4gICAgICAgICAgICBtZS5tZXNzYWdlQ2FsbGJhY2tzW2RhdGEubUlkXS5yZXNvbHZlKGRhdGEuZGF0YSk7XG4gICAgICAgICAgICBkZWxldGUgbWUubWVzc2FnZUNhbGxiYWNrc1tkYXRhLm1JZF1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgb25PcGVuKCkge1xuICAgICAgICB0aGlzLmZpcmUoJ29wZW4nLCB7c2NvcGU6IHRoaXN9KVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICAgKi9cbiAgICBwcm9taXNlTWVzc2FnZShkYXRhKSB7XG4gICAgICAgIGxldCBtZSA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIG1lLm1lc3NhZ2VDYWxsYmFja3NbbWUubWVzc2FnZUlkXSA9IHtyZWplY3QsIHJlc29sdmV9O1xuXG4gICAgICAgICAgICBtZS5zZW5kTWVzc2FnZSh7ZGF0YSwgbUlkOiBtZS5tZXNzYWdlSWR9KTtcbiAgICAgICAgICAgIG1lLm1lc3NhZ2VJZCsrXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICAgKi9cbiAgICBzZW5kTWVzc2FnZShkYXRhKSB7XG4gICAgICAgIGxldCBtZSAgICAgICA9IHRoaXMsXG4gICAgICAgICAgICB7c29ja2V0fSA9IG1lLFxuICAgICAgICAgICAgZCAgICAgICAgPSBkYXRhO1xuXG4gICAgICAgIC8vIENPTk5FQ1RJTkcgIDAgICBUaGUgY29ubmVjdGlvbiBpcyBub3QgeWV0IG9wZW4uXG4gICAgICAgIC8vIE9QRU4gICAgICAgIDEgICBUaGUgY29ubmVjdGlvbiBpcyBvcGVuIGFuZCByZWFkeSB0byBjb21tdW5pY2F0ZS5cbiAgICAgICAgLy8gQ0xPU0lORyAgICAgMiAgIFRoZSBjb25uZWN0aW9uIGlzIGluIHRoZSBwcm9jZXNzIG9mIGNsb3NpbmcuXG4gICAgICAgIC8vIENMT1NFRCAgICAgIDMgICBUaGUgY29ubmVjdGlvbiBpcyBjbG9zZWQgb3IgY291bGRuJ3QgYmUgb3BlbmVkLlxuXG4gICAgICAgIC8vIElmIHNvY2tldCBpcyBub3QgeWV0IHJlYWR5IGxldCdzIGRlZmVyIHRvIG9wZW4gdGhlbiByZXNlbmRcbiAgICAgICAgc3dpdGNoIChzb2NrZXQucmVhZHlTdGF0ZSkge1xuICAgICAgICAgICAgY2FzZSBXZWJTb2NrZXQuQ0xPU0VEOlxuICAgICAgICAgICAgY2FzZSBXZWJTb2NrZXQuQ0xPU0lORzpcbiAgICAgICAgICAgICAgICBtZS5hdHRlbXB0UmVjb25uZWN0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBtZS5zZW5kTWVzc2FnZShkKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgV2ViU29ja2V0LkNPTk5FQ1RJTkc6XG4gICAgICAgICAgICAgICAgbWUub24oJ29wZW4nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgbWUuc2VuZE1lc3NhZ2UoZClcbiAgICAgICAgICAgICAgICB9LCBtZSwge29uY2U6IHRydWV9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgV2ViU29ja2V0Lk9QRU46XG4gICAgICAgICAgICAgICAgc29ja2V0LnNlbmQoZGF0YSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE5lby5zZXR1cENsYXNzKFNvY2tldCk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=