"use strict";
(self["webpackChunkneo_mjs"] = self["webpackChunkneo_mjs"] || []).push([["src_remotes_Api_mjs"],{

/***/ "./src/remotes/Api.mjs":
/*!*****************************!*\
  !*** ./src/remotes/Api.mjs ***!
  \*****************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/Base.mjs */ "./src/core/Base.mjs");


/**
 * @class Neo.remotes.Api
 * @extends Neo.core.Base
 * @singleton
 */
class Api extends _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.remotes.Api'
         * @protected
         */
        className: 'Neo.remotes.Api',
        /**
         * @member {Boolean} singleton=true
         * @protected
         */
        singleton: true
    }

    /**
     * @param {String} service
     * @param {String} method
     * @returns {function(*=, *=): Promise<any>}
     */
    generateRemote(service, method) {
        return function(...args) {
            return Neo.currentWorker.promiseMessage('data', {
                action: 'rpc',
                method,
                params: [...args],
                service
            })
        }
    }

    /**
     *
     */
    load() {
        let {config}     = Neo,
            hasJsModules = config.environment === 'development' || config.environment === 'dist/esm',
            path         = config.remotesApiUrl;

        // Relative paths need a special treatment
        if (!path.includes('http')) {
            path = config.appPath.split('/');
            path.pop();
            path = `${path.join('/')}/${config.remotesApiUrl}`;
            path = (hasJsModules ? '../../' : './') + path
        }

        fetch(path)
            .then(response => response.json())
            .then(data => {
                Neo.currentWorker.sendMessage('data', {action: 'registerApi', data});
                this.register(data)
            })
    }

    /**
     * @param {Object} api
     */
    register(api) {
        let ns;

        Object.entries(api.services).forEach(([service, serviceValue]) => {
            ns = Neo.ns(`${api.namespace}.${service}`, true);

            Object.entries(serviceValue.methods).forEach(([method, methodValue]) => {
                ns[method] = this.generateRemote(service, method)
            })
        })
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(Api));


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2h1bmtzL2FwcC9zcmNfcmVtb3Rlc19BcGlfbWpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQW9DOztBQUVwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHNEQUFJO0FBQ3RCO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixTQUFTO0FBQzdCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QixpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxZQUFZO0FBQ3pCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsZUFBZSxHQUFHLHFCQUFxQjtBQUM3RDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RCw0QkFBNEI7QUFDbkY7QUFDQSxhQUFhO0FBQ2I7O0FBRUE7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMkJBQTJCLGNBQWMsR0FBRyxRQUFROztBQUVwRDtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBOztBQUVBLGlFQUFlLG1CQUFtQixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmVvLm1qcy8uL3NyYy9yZW1vdGVzL0FwaS5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJhc2UgZnJvbSAnLi4vY29yZS9CYXNlLm1qcyc7XG5cbi8qKlxuICogQGNsYXNzIE5lby5yZW1vdGVzLkFwaVxuICogQGV4dGVuZHMgTmVvLmNvcmUuQmFzZVxuICogQHNpbmdsZXRvblxuICovXG5jbGFzcyBBcGkgZXh0ZW5kcyBCYXNlIHtcbiAgICBzdGF0aWMgY29uZmlnID0ge1xuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSBjbGFzc05hbWU9J05lby5yZW1vdGVzLkFwaSdcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgY2xhc3NOYW1lOiAnTmVvLnJlbW90ZXMuQXBpJyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge0Jvb2xlYW59IHNpbmdsZXRvbj10cnVlXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIHNpbmdsZXRvbjogdHJ1ZVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzZXJ2aWNlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZFxuICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbigqPSwgKj0pOiBQcm9taXNlPGFueT59XG4gICAgICovXG4gICAgZ2VuZXJhdGVSZW1vdGUoc2VydmljZSwgbWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiguLi5hcmdzKSB7XG4gICAgICAgICAgICByZXR1cm4gTmVvLmN1cnJlbnRXb3JrZXIucHJvbWlzZU1lc3NhZ2UoJ2RhdGEnLCB7XG4gICAgICAgICAgICAgICAgYWN0aW9uOiAncnBjJyxcbiAgICAgICAgICAgICAgICBtZXRob2QsXG4gICAgICAgICAgICAgICAgcGFyYW1zOiBbLi4uYXJnc10sXG4gICAgICAgICAgICAgICAgc2VydmljZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgbG9hZCgpIHtcbiAgICAgICAgbGV0IHtjb25maWd9ICAgICA9IE5lbyxcbiAgICAgICAgICAgIGhhc0pzTW9kdWxlcyA9IGNvbmZpZy5lbnZpcm9ubWVudCA9PT0gJ2RldmVsb3BtZW50JyB8fCBjb25maWcuZW52aXJvbm1lbnQgPT09ICdkaXN0L2VzbScsXG4gICAgICAgICAgICBwYXRoICAgICAgICAgPSBjb25maWcucmVtb3Rlc0FwaVVybDtcblxuICAgICAgICAvLyBSZWxhdGl2ZSBwYXRocyBuZWVkIGEgc3BlY2lhbCB0cmVhdG1lbnRcbiAgICAgICAgaWYgKCFwYXRoLmluY2x1ZGVzKCdodHRwJykpIHtcbiAgICAgICAgICAgIHBhdGggPSBjb25maWcuYXBwUGF0aC5zcGxpdCgnLycpO1xuICAgICAgICAgICAgcGF0aC5wb3AoKTtcbiAgICAgICAgICAgIHBhdGggPSBgJHtwYXRoLmpvaW4oJy8nKX0vJHtjb25maWcucmVtb3Rlc0FwaVVybH1gO1xuICAgICAgICAgICAgcGF0aCA9IChoYXNKc01vZHVsZXMgPyAnLi4vLi4vJyA6ICcuLycpICsgcGF0aFxuICAgICAgICB9XG5cbiAgICAgICAgZmV0Y2gocGF0aClcbiAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcbiAgICAgICAgICAgIC50aGVuKGRhdGEgPT4ge1xuICAgICAgICAgICAgICAgIE5lby5jdXJyZW50V29ya2VyLnNlbmRNZXNzYWdlKCdkYXRhJywge2FjdGlvbjogJ3JlZ2lzdGVyQXBpJywgZGF0YX0pO1xuICAgICAgICAgICAgICAgIHRoaXMucmVnaXN0ZXIoZGF0YSlcbiAgICAgICAgICAgIH0pXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGFwaVxuICAgICAqL1xuICAgIHJlZ2lzdGVyKGFwaSkge1xuICAgICAgICBsZXQgbnM7XG5cbiAgICAgICAgT2JqZWN0LmVudHJpZXMoYXBpLnNlcnZpY2VzKS5mb3JFYWNoKChbc2VydmljZSwgc2VydmljZVZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgbnMgPSBOZW8ubnMoYCR7YXBpLm5hbWVzcGFjZX0uJHtzZXJ2aWNlfWAsIHRydWUpO1xuXG4gICAgICAgICAgICBPYmplY3QuZW50cmllcyhzZXJ2aWNlVmFsdWUubWV0aG9kcykuZm9yRWFjaCgoW21ldGhvZCwgbWV0aG9kVmFsdWVdKSA9PiB7XG4gICAgICAgICAgICAgICAgbnNbbWV0aG9kXSA9IHRoaXMuZ2VuZXJhdGVSZW1vdGUoc2VydmljZSwgbWV0aG9kKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE5lby5zZXR1cENsYXNzKEFwaSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=