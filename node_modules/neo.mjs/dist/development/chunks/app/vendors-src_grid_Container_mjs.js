"use strict";
(self["webpackChunkneo_mjs"] = self["webpackChunkneo_mjs"] || []).push([["vendors-src_grid_Container_mjs"],{

/***/ "./src/component/Progress.mjs":
/*!************************************!*\
  !*** ./src/component/Progress.mjs ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _component_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../component/Base.mjs */ "./src/component/Base.mjs");


/**
 * @class Neo.component.Progress
 * @extends Neo.component.Base
 */
class Progress extends _component_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.component.Progress'
         * @protected
         */
        className: 'Neo.component.Progress',
        /**
         * @member {String} ntype='progress'
         * @protected
         */
        ntype: 'progress',
        /**
         * @member {String[]} baseCls=['neo-progress-label']
         * @protected
         */
        baseCls: ['neo-progress'],
        /**
         * @member {String|null} labelText_=null
         * @reactive
         */
        labelText_: null,
        /**
         * @member {Number} max_=100
         * @reactive
         */
        max_: 100,
        /**
         * @member {Number|null} value_=null
         * @reactive
         */
        value_: null,
        /**
         * @member {Object} _vdom
         */
        _vdom:
        {tag: 'div', cls: ['neo-progress-wrapper'], cn: [
            {tag: 'label'},
            {tag: 'progress'}
        ]}
    }

    /**
     * @member {Object} label
     */
    get label() {
        return this.vdom.cn[0]
    }
    /**
     * @member {Object} progress
     */
    get progress() {
        return this.vdom.cn[1]
    }

    /**
     * Triggered after the id config got changed
     * @param {String} value
     * @param {String} oldValue
     * @protected
     */
    afterSetId(value, oldValue) {
        super.afterSetId(value, oldValue);

        this.label.for = value;
        this.update()
    }

    /**
     * Triggered after the labelText config got changed
     * @param {String|null} value
     * @param {String|null} oldValue
     * @protected
     */
    afterSetLabelText(value, oldValue) {
        let {label} = this;

        if (!value) {
            label.removeDom = true
        } else {
            delete label.removeDom
        }

        label.text = value;
        this.update()
    }

    /**
     * Triggered after the max config got changed
     * @param {Number} value
     * @param {Number} oldValue
     * @protected
     */
    afterSetMax(value, oldValue) {
        this.progress.max = value;
        this.update()
    }

    /**
     * Triggered after the value config got changed
     * @param {Number|null} value
     * @param {Number|null} oldValue
     * @protected
     */
    afterSetValue(value, oldValue) {
        this.progress.value = value;
        this.update()
    }

    /**
     * Specify a different vdom root if needed to apply the top level style attributes on a different level.
     * Make sure to use getVnodeRoot() as well, to keep the vdom & vnode trees in sync.
     * @returns {Object} The new vdom root
     */
    getVdomRoot() {
        return this.vdom.cn[1]
    }

    /**
     * Specify a different vnode root if needed to apply the top level style attributes on a different level.
     * Make sure to use getVdomRoot() as well, to keep the vdom & vnode trees in sync.
     * @returns {Object} The new vnode root
     */
    getVnodeRoot() {
        return this.vnode.childNodes[1]
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(Progress));


/***/ }),

/***/ "./src/grid/Body.mjs":
/*!***************************!*\
  !*** ./src/grid/Body.mjs ***!
  \***************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _util_ClassSystem_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/ClassSystem.mjs */ "./src/util/ClassSystem.mjs");
/* harmony import */ var _collection_Base_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../collection/Base.mjs */ "./src/collection/Base.mjs");
/* harmony import */ var _component_Base_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../component/Base.mjs */ "./src/component/Base.mjs");
/* harmony import */ var _util_Array_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/Array.mjs */ "./src/util/Array.mjs");
/* harmony import */ var _selection_grid_RowModel_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../selection/grid/RowModel.mjs */ "./src/selection/grid/RowModel.mjs");
/* harmony import */ var _util_VDom_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/VDom.mjs */ "./src/util/VDom.mjs");







/**
 * @class Neo.grid.Body
 * @extends Neo.component.Base
 */
class GridBody extends _component_Base_mjs__WEBPACK_IMPORTED_MODULE_2__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.grid.Body'
         * @protected
         */
        className: 'Neo.grid.Body',
        /**
         * @member {String} ntype='grid-body'
         * @protected
         */
        ntype: 'grid-body',
        /**
         * @member {Boolean} animatedRowSorting_=false
         * @reactive
         */
        animatedRowSorting_: false,
        /**
         * Internal flag. Gets calculated when mounting the grid.Container
         * @member {Number} availableHeight_=0
         * @reactive
         */
        availableHeight_: 0,
        /**
         * Internal flag. Gets calculated when changing the availableHeight config
         * @member {Number} availableRows_=0
         * @reactive
         */
        availableRows_: 0,
        /**
         * Internal flag. Gets calculated after mounting grid.Body rows
         * @member {Number} availableWidth_=0
         * @reactive
         */
        availableWidth_: 0,
        /**
         * @member {String[]} baseCls=['neo-grid-body']
         * @protected
         */
        baseCls: ['neo-grid-body'],
        /**
         * The number of columns (cells) to paint before the first and after the last visible column,
         * to enhance the scrolling performance
         * @member {Number} bufferColumnRange_=0
         * @reactive
         */
        bufferColumnRange_: 0,
        /**
         * The number of rows to paint before the first and after the last visible row,
         * to enhance the scrolling performance
         * @member {Number} bufferRowRange_=3
         * @reactive
         */
        bufferRowRange_: 3,
        /**
         * Define which model field contains the value of colspan definitions
         * @member {String} colspanField='colspan'
         */
        colspanField: 'colspan',
        /**
         * Internal flag. Gets calculated after mounting grid.Body rows
         * @member {Number} containerWidth_=0
         * @reactive
         */
        containerWidth_: 0,
        /**
         * @member {Neo.collection.Base|null} columnPositions_=null
         * @protected
         * @reactive
         */
        columnPositions_: null,
        /**
         * @member {Boolean} highlightModifiedCells_=false
         * @reactive
         */
        highlightModifiedCells_: false,
        /**
         * @member {Boolean} isScrolling_=false
         * @reactive
         */
        isScrolling_: false,
        /**
         * Additional used keys for the selection model
         * @member {Object} keys
         */
        keys: {},
        /**
         * Stores the indexes of the first & last mounted columns, including bufferColumnRange
         * @member {Number[]} mountedColumns_=[0,0]
         * @protected
         * @reactive
         */
        mountedColumns_: [0, 0],
        /**
         * Stores the indexes of the first & last mounted rows, including bufferRowRange
         * @member {Number[]} mountedRows=[0,0]
         * @protected
         */
        mountedRows: [0, 0],
        /**
         * Optional config values for Neo.grid.plugin.AnimateRows
         * @member {Object} pluginAnimateRowsConfig=null
         */
        pluginAnimateRowsConfig: null,
        /**
         * @member {String} role='rowgroup'
         * @reactive
         */
        role: 'rowgroup',
        /**
         * Number in px
         * @member {Number} rowHeight_=0
         * @reactive
         */
        rowHeight_: 0,
        /**
         * @member {Number} scrollLeft_=0
         * @protected
         * @reactive
         */
        scrollLeft_: 0,
        /**
         * @member {Number} scrollTop_=0
         * @protected
         * @reactive
         */
        scrollTop_: 0,
        /**
         * @member {Neo.selection.Model} selectionModel_=null
         * @reactive
         */
        selectionModel_: null,
        /**
         * @member {String} selectedRecordField='annotations.selected'
         */
        selectedRecordField: 'annotations.selected',
        /**
         * @member {Number} startIndex_=0
         * @reactive
         */
        startIndex_: 0,
        /**
         * @member {Neo.data.Store|null} store_=null
         * @reactive
         */
        store_: null,
        /**
         * Stores the indexes of the first & last painted columns
         * @member {Number[]} visibleColumns=[0,0]
         * @protected
         */
        visibleColumns: [0, 0],
        /**
         * Stores the indexes of the first & last visible rows, excluding bufferRowRange
         * @member {Number[]} visibleRows=[0,0]
         * @protected
         */
        visibleRows: [0, 0],
        /**
         * @member {String[]} wrapperCls=['neo-grid-body-wrapper']
         * @reactive
         */
        wrapperCls: ['neo-grid-body-wrapper'],
        /**
         * @member {Object} _vdom
         */
        _vdom:
        {tabIndex: '-1', cn: [
            {cn: []}
        ]}
    }

    /**
     * Internal flag to adopt to store.add() passing an initial chunk.
     * @member {Number} #initialChunkSize=0
     */
    #initialChunkSize = 0
    /**
     * Internal flag to adopt to store.add() passing an initial chunk.
     * @member {Number} #initialChunkSize=0
     */
    #initialTotalSize = 0

    /**
     * @member {String[]} selectedCells
     */
    get selectedCells() {
        let {selectionModel} = this;

        if (selectionModel.ntype?.includes('cell')) {
            return selectionModel.items
        }

        return []
    }

    /**
     * @member {String[]} selectedRows
     */
    get selectedRows() {
        let {selectionModel} = this;

        if (selectionModel.ntype?.includes('row')) {
            return selectionModel.selectedRows
        }

        return []
    }

    /**
     * @param config
     */
    construct(config) {
        super.construct(config);

        let me = this;

        me.addDomListeners([{
            click   : me.onCellClick,
            dblclick: me.onCellDoubleClick,
            delegate: '.neo-grid-cell',
            scope   : me
        }, {
            click   : me.onRowClick,
            dblclick: me.onRowDoubleClick,
            delegate: '.neo-grid-row',
            scope   : me
        }])
    }

    /**
     * Triggered after the animatedRowSorting config got changed
     * @param {Boolean} value
     * @param {Boolean} oldValue
     * @protected
     */
    afterSetAnimatedRowSorting(value, oldValue) {
        if (value && !this.getPlugin('grid-animate-rows')) {
            __webpack_require__.e(/*! import() */ "src_grid_plugin_AnimateRows_mjs").then(__webpack_require__.bind(__webpack_require__, /*! ./plugin/AnimateRows.mjs */ "./src/grid/plugin/AnimateRows.mjs")).then(module => {
                let me      = this,
                    plugins = me.plugins || [];

                plugins.push({
                    module: module.default,
                    ...me.pluginAnimateRowsConfig
                });

                me.plugins = plugins
            })
        }
    }

    /**
     * Triggered after the availableHeight config got changed
     * @param {Number} value
     * @param {Number} oldValue
     * @protected
     */
    afterSetAvailableHeight(value, oldValue) {
        if (value > 0) {
            this.availableRows = Math.ceil(value / this.rowHeight) - 1
        }
    }

    /**
     * Triggered after the availableRows config got changed
     * @param {Number} value
     * @param {Number} oldValue
     * @protected
     */
    afterSetAvailableRows(value, oldValue) {
        value > 0 && this.createViewData()
    }

    /**
     * Triggered after the availableWidth config got changed
     * @param {Number} value
     * @param {Number} oldValue
     * @protected
     */
    afterSetAvailableWidth(value, oldValue) {
        if (value > 0) {
            let me = this;

            me.vdom.width = value + 'px';
            me.vdom.cn[0].width = value + 'px';
            me.update()
        }
    }

    /**
     * Triggered after the bufferColumnRange config got changed
     * @param {Number} value
     * @param {Number} oldValue
     * @protected
     */
    afterSetBufferColumnRange(value, oldValue) {
        oldValue !== undefined && this.createViewData()
    }

    /**
     * Triggered after the bufferRowRange config got changed
     * @param {Number} value
     * @param {Number} oldValue
     * @protected
     */
    afterSetBufferRowRange(value, oldValue) {
        oldValue !== undefined && this.createViewData()
    }

    /**
     * Triggered after the containerWidth config got changed
     * @param {Number} value
     * @param {Number} oldValue
     * @protected
     */
    afterSetContainerWidth(value, oldValue) {
        value > 0 && this.updateMountedAndVisibleColumns()
    }

    /**
     * Triggered after the id config got changed
     * @param {String} value
     * @param {String} oldValue
     * @protected
     */
    afterSetId(value, oldValue) {
        this.vdom.id = value + '__wrapper';

        // silent vdom update, the super call will trigger the engine
        super.afterSetId(value, oldValue);
    }

    /**
     * Triggered after the isScrolling config got changed
     * @param {Number} value
     * @param {Number} oldValue
     * @protected
     */
    afterSetIsScrolling(value, oldValue) {
        this.toggleCls('neo-is-scrolling', value)
    }

    /**
     * Triggered after the mountedColumns config got changed
     * @param {Number[]} value
     * @param {Number[]} oldValue
     * @protected
     */
    afterSetMountedColumns(value, oldValue) {
        oldValue && this.createViewData()
    }

    /**
     * Triggered after the rowHeight config got changed
     * @param {Number} value
     * @param {Number} oldValue
     * @protected
     */
    afterSetRowHeight(value, oldValue) {
        value > 0 && this.updateScrollHeight()
    }

    /**
     * Triggered after the scrollLeft config got changed
     * @param {Number} value
     * @param {Number} oldValue
     * @protected
     */
    afterSetScrollLeft(value, oldValue) {
        this.updateMountedAndVisibleColumns()
    }

    /**
     * Triggered after the scrollTop config got changed
     * @param {Number} value
     * @param {Number} oldValue
     * @protected
     */
    afterSetScrollTop(value, oldValue) {
        let me               = this,
            {bufferRowRange} = me,
            newStartIndex    = Math.floor(value / me.rowHeight);

        if (Math.abs(me.startIndex - newStartIndex) >= bufferRowRange) {
            me.startIndex = newStartIndex
        } else {
            me.visibleRows[0] = newStartIndex;
            me.visibleRows[1] = newStartIndex + me.availableRows
        }
    }

    /**
     * Triggered after the selectionModel config got changed
     * @param {Neo.selection.Model} value
     * @param {Neo.selection.Model} oldValue
     * @protected
     */
    afterSetSelectionModel(value, oldValue) {
        this.vnodeInitialized && value.register(this)
    }

    /**
     * Triggered after the startIndex config got changed
     * @param {Number} value
     * @param {Number} oldValue
     * @protected
     */
    afterSetStartIndex(value, oldValue) {
        oldValue !== undefined && this.createViewData()
    }

    /**
     * Triggered after the store config got changed
     * @param {Number} value
     * @param {Number} oldValue
     * @protected
     */
    afterSetStore(value, oldValue) {
        let me        = this,
            listeners = {
                filter      : me.onStoreFilter,
                load        : me.onStoreLoad,
                recordChange: me.onStoreRecordChange,
                scope       : me
            };

        oldValue?.un(listeners);
        value   ?.on(listeners);

        // Clear component instances when the store changes or is replaced
        if (oldValue) {
            me.clearComponentColumnMaps();
        }
    }

    /**
     * @param {Object} data
     * @param {String} [data.cellId]
     * @param {Object} data.column
     * @param {Number} data.columnIndex
     * @param {Object} data.record
     * @param {Number} data.rowIndex
     * @returns {Object}
     */
    applyRendererOutput({cellId, column, columnIndex, record, rowIndex}) {
        let me                     = this,
            gridContainer          = me.parent,
            {selectedCells, store} = me,
            cellCls                = ['neo-grid-cell'],
            colspan                = record[me.colspanField],
            {dataField}            = column,
            {model}                = store,
            fieldValue             = record[dataField],
            cellConfig, rendererOutput;

        if (!model.getField(dataField)) {
            let nsArray   = dataField.split('.'),
                fieldName = nsArray.pop();

            fieldValue = Neo.ns(nsArray, false, record[Symbol.for('data')])?.[fieldName]
        }

        if (fieldValue === null || fieldValue === undefined) {
            fieldValue = ''
        }

        if (column.rendererScope === 'me' || column.rendererScope === 'this') {
            column.rendererScope = column;
        }

        me.bindCallback(column.renderer, 'renderer', column.rendererScope || me, column);

        rendererOutput = column.renderer.call(column.rendererScope || me, {
            column,
            columnIndex,
            dataField,
            gridContainer,
            record,
            rowIndex,
            store,
            value: fieldValue
        });

        switch (Neo.typeOf(rendererOutput)) {
            case 'Object': {
                if (rendererOutput.html || rendererOutput.text) {
                    rendererOutput.cls && cellCls.push(...rendererOutput.cls);
                } else {
                    rendererOutput = [rendererOutput];
                }
                break
            }
            case 'Date':
            case 'Number':
            case 'String': {
                rendererOutput = {
                    cls : cellCls,
                    html: rendererOutput?.toString()
                };
                break
            }
        }

        if (rendererOutput === null || rendererOutput === undefined) {
            rendererOutput = ''
        }

        if (column.cellAlign !== 'left') {
            cellCls.push('neo-' + column.cellAlign)
        }

        if (me.highlightModifiedCells) {
            if (record.isModifiedField(dataField)) {
                cellCls.push('neo-is-modified')
            }
        }

        if (!cellId) {
            cellId = me.getCellId(rowIndex, column.dataField)
        }

        if (selectedCells.includes(cellId)) {
            cellCls.push('neo-selected')
        }

        if (me.selectionModel?.selectedColumns?.includes(dataField)) {
            _util_Array_mjs__WEBPACK_IMPORTED_MODULE_3__["default"].add(cellCls, me.selectionModel.selectedColumnCellCls || 'neo-selected')
        }

        cellConfig = {
            'aria-colindex': columnIndex + 1, // 1 based
            id             : cellId,
            cls            : cellCls,
            role           : 'gridcell',
            style          : rendererOutput.style || {}
        };

        if (column.width) {
            cellConfig.style.minWidth = `${column.width}px`
        }

        if (colspan && Object.keys(colspan).includes(dataField)) {
            cellConfig.colspan = colspan[dataField]
        }

        if (Neo.typeOf(rendererOutput) === 'Object') {
            if (Object.hasOwn(rendererOutput, 'html')) {
                cellConfig.html = rendererOutput.html  || ''
            } else {
                cellConfig.text = rendererOutput.text  || ''
            }
        } else {
            cellConfig.cn = rendererOutput
        }

        return cellConfig
    }

    /**
     * Triggered when accessing the columnPositions config
     * @param {Object} value
     * @protected
     */
    beforeGetColumnPositions(value) {
        if (!value) {
            this._columnPositions = value = Neo.create({
                module     : _collection_Base_mjs__WEBPACK_IMPORTED_MODULE_1__["default"],
                keyProperty: 'dataField'
            })
        }

        return value
    }

    /**
     * Triggered before the selectionModel config gets changed.
     * @param {Neo.selection.Model} value
     * @param {Neo.selection.Model} oldValue
     * @protected
     */
    beforeSetSelectionModel(value, oldValue) {
        oldValue?.destroy();

        return _util_ClassSystem_mjs__WEBPACK_IMPORTED_MODULE_0__["default"].beforeSetInstance(value, _selection_grid_RowModel_mjs__WEBPACK_IMPORTED_MODULE_4__["default"])
    }

    /**
     * Destroys all component instances created by component columns.
     * @protected
     */
    clearComponentColumnMaps() {
        let me      = this,
            columns = me.parent.columns.items;

        columns.forEach(column => {
            if (column instanceof Neo.grid.column.Component) {
                column.map.forEach(component => {
                    component.destroy()
                });
                column.map.clear()
            }
        });
    }

    /**
     * Cleans up component instances that are no longer visible or needed.
     * @protected
     */
    cleanupComponentInstances() {
        let me = this;

        me.parent.columns.items.forEach(column => {
            if (column instanceof Neo.grid.column.Component) {
                column.map.forEach((component, id) => {
                    // Extract rowIndex from component ID (e.g., "grid-body-1-component-950")
                    const componentRowIndex = parseInt(id.split('-').pop());

                    if (componentRowIndex < me.mountedRows[0] || componentRowIndex > me.mountedRows[1]) {
                        component.destroy();
                        column.map.delete(id)
                    }
                });
            }
        });
    }

    /**
     * @param {Object} opts
     * @param {Object} opts.record
     * @param {Number} [opts.rowIndex]
     * @returns {Object}
     */
    createRow({record, rowIndex}) {
        if (!Neo.isNumber(rowIndex)) {
            rowIndex = this.store.indexOf(record)
        }

        let me            = this,
            {mountedColumns, selectedRows} = me,
            gridContainer = me.parent,
            {columns}     = gridContainer,
            id            = me.getRowId(rowIndex),
            recordId      = record[me.store.getKeyProperty()],
            rowCls        = me.getRowClass(record, rowIndex),
            config, column, columnPosition,  gridRow, i;

        if (rowIndex % 2 !== 0) {
            rowCls.push('neo-even')
        }

        if (selectedRows && record[me.selectedRecordField]) {
            _util_Array_mjs__WEBPACK_IMPORTED_MODULE_3__["default"].add(selectedRows, recordId)
        }

        gridRow = {
            id,
            'aria-rowindex': rowIndex + 2, // header row => 1, first body row => 2
            cls            : rowCls,
            cn             : [],
            data           : {recordId},
            role           : 'row',

            style: {
                height   : me.rowHeight + 'px',
                transform: `translate3d(0px, ${rowIndex * me.rowHeight}px, 0px)`
            }
        };

        if (selectedRows?.includes(recordId)) {
            rowCls.push('neo-selected');
            gridRow['aria-selected'] = true;
            gridContainer.fire('select', {record})
        }

        for (i=mountedColumns[0]; i <= mountedColumns[1]; i++) {
            column = columns.getAt(i);
            config = me.applyRendererOutput({column, columnIndex: i, record, rowIndex});

            if (column.dock) {
                config.cls = ['neo-locked', ...config.cls || []]
            }

            columnPosition = me.columnPositions.get(column.dataField);

            config.style = {
                ...config.style,
                left : columnPosition.x     + 'px',
                width: columnPosition.width + 'px'
            }

            // Happens during a column header drag OP, when leaving the painted range
            if (columnPosition.hidden) {
                config.style.visibility = 'hidden'
            }

            gridRow.cn.push(config)
        }

        return gridRow
    }

    /**
     * @param {Boolean} silent=false
     */
    createViewData(silent=false) {
        let me                   = this,
            {mountedRows, store} = me,
            rows                 = [],
            endIndex, i, range;

        if (
            store.isLoading                   ||
            me.availableRows              < 1 ||
            me._containerWidth            < 1 || // we are not checking me.containerWidth, since we want to ignore the config symbol
            me.columnPositions.getCount() < 1 ||
            me.mountedColumns[1]          < 1
        ) {
            return
        }

        if (me.#initialChunkSize > 0) {
            endIndex = me.#initialChunkSize;
            range    = endIndex;
        } else {
            // Creates the new start & end indexes
            me.updateMountedAndVisibleRows();
            endIndex = mountedRows[1]
        }

        for (i=mountedRows[0]; i < endIndex; i++) {
            rows.push(me.createRow({record: store.getAt(i), rowIndex: i}))
        }

        me.getVdomRoot().cn = rows;

        me.parent.isLoading = false;

        me.updateScrollHeight(true, range); // silent
        !silent && me.update()
    }

    /**
     * @param args
     */
    destroy(...args) {
        this.store = null; // remove the listeners
        this.clearComponentColumnMaps(); // Destroy component instances

        super.destroy(...args)
    }

    /**
     * @param {Object} data
     * @param {String} eventName
     */
    fireCellEvent(data, eventName) {
        let me        = this,
            id        = data.currentTarget,
            dataField = me.getCellDataField(id),
            record    = me.getRecord(id);

        me.parent.fire(eventName, {body: me, data, dataField, record})
    }

    /**
     * @param {Object} data
     * @param {String} eventName
     */
    fireRowEvent(data, eventName) {
        let me     = this,
            id     = data.currentTarget,
            record = me.getRecord(id);

        me.parent.fire(eventName, {body: me, data, record})
    }

    /**
     * @param {String} cellId
     * @returns {String}
     */
    getCellDataField(cellId) {
        return cellId.split('__')[2]
    }

    /**
     * @param {Number} rowIndex
     * @param {String} dataField
     * @returns {String}
     */
    getCellId(rowIndex, dataField) {
        return this.getRowId(rowIndex) + '__' + dataField
    }

    /**
     * Get a grid column or column index by a given field name
     * @param {String} field
     * @param {Boolean} returnIndex=false
     * @returns {Object|Number|null}
     */
    getColumn(field, returnIndex=false) {
        let {columns} = this.parent,
            column    = columns.get(field);

        if (column) {
            return returnIndex ? columns.indexOf(column) : column
        }

        return null
    }

    /**
     * Get all painted column cells (visible + buffer range)
     * @param {String} dataField
     * @returns {Object[]}
     */
    getColumnCells(dataField) {
        let me          = this,
            cells       = [],
            columnIndex = -1,
            vdomRoot    = me.getVdomRoot(),
            firstRow    = vdomRoot.cn[0],
            i           = 0,
            len         = firstRow.cn.length,
            cell;

        // Columns might get moved via drag&drop, so let's check for the current match
        for (; i < len; i++) {
            if (dataField === me.getDataField(firstRow.cn[i].id)) {
                columnIndex = i;
                break;
            }
        }

        if (columnIndex > -1) {
            vdomRoot.cn.forEach(row => {
                cell = row.cn[columnIndex];
                cell && cells.push(cell)
            })
        }

        return cells
    }

    /**
     * @param {String} cellId
     * @returns {String}
     */
    getDataField(cellId) {
        return cellId.split('__')[2]
    }

    /**
     * Get the matching record by passing a row id, a cell id or an id inside a grid cell.
     * Limited to mounted rows (must be inside the vdom).
     * @param {String} nodeId
     * @returns {Object|null}
     */
    getRecord(nodeId) {
        let me     = this,
            record = me.getRecordByRowId(nodeId),
            node, parentNodes;

        if (record) {
            return record;
        }

        parentNodes = _util_VDom_mjs__WEBPACK_IMPORTED_MODULE_5__["default"].getParentNodes(me.vdom, nodeId);

        for (node of parentNodes || []) {
            record = me.getRecordByRowId(node.id);

            if (record) {
                return record
            }
        }

        return null
    }

    /**
     * @param {String} rowId
     * @returns {Record|null}
     */
    getRecordByRowId(rowId) {
        let me       = this,
            node     = me.getVdomChild(rowId),
            rowIndex = node['aria-rowindex'];

        if (Neo.isNumber(rowIndex)) {
            // aria-rowindex is 1 based & also includes the header
            rowIndex -= 2;

            return me.store.getAt(rowIndex)
        }

        return null
    }

    /**
     * Override this method to apply custom CSS rules to grid rows
     * @param {Object} record
     * @param {Number} rowIndex
     * @returns {String[]}
     */
    getRowClass(record, rowIndex) {
        return ['neo-grid-row']
    }

    /**
     * @param {Number} rowIndex
     * @returns {String}
     */
    getRowId(rowIndex) {
        let me = this;

        if (me.#initialChunkSize > 0) {
            return `${me.id}__row-${rowIndex}`
        } else {
            return `${me.id}__row-${rowIndex % (me.availableRows + 2 * me.bufferRowRange)}`
        }
    }

    /**
     * @override
     * @returns {*}
     */
    getVdomRoot() {
        return this.vdom.cn[0]
    }

    /**
     * @returns {Object[]} The new vdom items root
     */
    getVdomItemsRoot() {
        return this.vdom.cn[0]
    }

    /**
     * @override
     * @returns {Neo.vdom.VNode}
     */
    getVnodeRoot() {
        return this.vnode.childNodes[0]
    }

    /**
     * @param {Object} data
     */
    onCellClick(data) {
        this.fireCellEvent(data, 'cellClick')
    }

    /**
     * @param {Object} data
     */
    onCellDoubleClick(data) {
        this.fireCellEvent(data, 'cellDoubleClick')
    }

    /**
     *
     */
    onConstructed() {
        super.onConstructed();
        this.selectionModel?.register(this)
    }

    /**
     * @param {Object} data
     */
    onRowClick(data) {
        this.fireRowEvent(data, 'rowClick')
    }

    /**
     * @param {Object} data
     */
    onRowDoubleClick(data) {
        this.fireRowEvent(data, 'rowDoubleClick')
    }

    /**
     *
     */
    onStoreFilter() {
        this.onStoreLoad({items: this.store.items})
    }

    /**
     * @param {Object}   data
     * @param {Object[]} data.items
     * @param {Boolean}  [data.postChunkLoad]
     * @param {Number}   [data.total]
     * @protected
     */
    onStoreLoad({items, postChunkLoad, total}) {
        let me = this;

        /*
         * Fast path to handle clearing all rows (e.g., store.removeAll()).
         * A full vdom diff against all existing rows is a performance bottleneck.
         * This logic bypasses the standard update() cycle by directly clearing the vdom,
         * vnode cache and the real DOM via textContent.
         */
        if (items?.length < 1) {
            const vdomRoot = me.getVdomRoot();

            // No change, opt out
            if (vdomRoot.cn.length < 1) {
                return
            }

            vdomRoot.cn = [];
            me.getVnodeRoot().childNodes = [];

            Neo.applyDeltas(me.appName, {
                id         : vdomRoot.id,
                textContent: ''
            });

            return
        }

        // If it's the first chunked load (data.total exists and data.items is a subset of total)
        // Render the entire chunk for immediate scrollability
        if (total && items.length < total) {
            me.#initialChunkSize = items.length;
            me.#initialTotalSize = total;
            me.createViewData();
            me.#initialChunkSize = 0
            me.#initialTotalSize = 0
        } else {
            me.createViewData()
        }

        if (me.mounted && !postChunkLoad) {
            me.timeout(50).then(() => {
                Neo.main.DomAccess.scrollTo({
                    direction: 'top',
                    id       : me.vdom.id,
                    value    : 0
                })
            })
        }

        // Cleanup component instances after chunked load
        if (postChunkLoad) {
            me.cleanupComponentInstances()
        }
    }

    /**
     * @param {Object}         data
     * @param {Object[]}       data.fields Each field object contains the keys: name, oldValue, value
     * @param {Neo.data.Model} data.model  The model instance of the changed record
     * @param {Object}         data.record
     */
    onStoreRecordChange({fields, record}) {
        let me                            = this,
            fieldNames                    = fields.map(field => field.name),
            needsUpdate                   = false,
            rowIndex                      = me.store.indexOf(record),
            {mountedRows, selectionModel} = me,
            column, needsCellUpdate, recordId;

        if (fieldNames.includes(me.colspanField)) {
            me.vdom.cn[rowIndex] = me.createRow({record, rowIndex});
            me.update()
        } else {
            if (rowIndex >= mountedRows[0] && rowIndex <= mountedRows[1]) {
                for (column of me.parent.columns.items) {
                    if (
                        column instanceof Neo.grid.column.Component &&
                        Neo.typeOf(column.component === 'Function') &&
                        !fieldNames.includes(column.dataField)
                    ) {
                        needsCellUpdate = me.updateCellNode(record, column.dataField);
                        needsUpdate     = needsUpdate || needsCellUpdate
                    }
                }

                fields.forEach(field => {
                    if (field.name === me.selectedRecordField) {
                        if (selectionModel.ntype === 'selection-grid-rowmodel') {
                            recordId = record[me.store.getKeyProperty()];

                            selectionModel[field.value ? 'selectRow' : 'deselectRow'](recordId)
                        }
                    } else {
                        needsCellUpdate = me.updateCellNode(record, field.name);
                        needsUpdate     = needsUpdate || needsCellUpdate
                    }
                })
            }
        }

        needsUpdate && me.update()
    }

    /**
     * Used for keyboard navigation (selection models)
     * @param {Number} index
     * @param {Number} step
     */
    scrollByRows(index, step) {
        let me                         = this,
            {mountedRows, visibleRows} = me,
            countRecords               = me.store.getCount(),
            newIndex                   = index + step,
            lastRowGap, mounted, scrollTop, visible;

        if (newIndex >= countRecords) {
            newIndex %= countRecords;
            step     = newIndex - index
        }

        while (newIndex < 0) {
            newIndex += countRecords;
            step     += countRecords
        }

        mounted = newIndex >= mountedRows[0] && newIndex <= mountedRows[1];

        // Not using >= or <=, since the first / last row might not be fully visible
        visible = newIndex > visibleRows[0] && newIndex < visibleRows[1];

        if (!visible) {
            // Leaving the mounted area will re-calculate the visibleRows for us
            if (mounted) {
                visibleRows[0] += step;
                visibleRows[1] += step
            }

            if (step < 0) {
                scrollTop = newIndex * me.rowHeight
            } else {
                lastRowGap = me.rowHeight - (me.availableHeight % me.rowHeight);
                scrollTop  = (newIndex - me.availableRows) * me.rowHeight + lastRowGap
            }

            Neo.main.DomAccess.scrollTo({
                id      : me.vdom.id,
                value   : scrollTop,
                windowId: me.windowId
            })
        }
    }

    /**
     * Update the cell vdom silently
     * @param {Record} record
     * @param {String} dataField
     * @returns {Boolean} true in case the view needs an update
     */
    updateCellNode(record, dataField) {
        let me          = this,
            rowIndex    = me.store.indexOf(record),
            cellId      = me.getCellId(rowIndex, dataField),
            cellNode    = _util_VDom_mjs__WEBPACK_IMPORTED_MODULE_5__["default"].find(me.vdom, cellId),
            needsUpdate = false,
            cellStyle, cellVdom, column, columnIndex;

        // The vdom might not exist yet => nothing to do in this case
        if (cellNode?.vdom) {
            cellStyle   = cellNode.vdom.style;
            column      = me.getColumn(dataField);
            columnIndex = cellNode.index;
            cellVdom    = me.applyRendererOutput({cellId, column, columnIndex, record, rowIndex});
            needsUpdate = true;

            // The cell-positioning logic happens outside applyRendererOutput()
            // We need to preserve these styles
            Object.assign(cellVdom.style, {
                left : cellStyle.left,
                width: cellStyle.width
            });

            cellNode.parentNode.cn[columnIndex] = cellVdom
        }

        return needsUpdate
    }

    /**
     *
     */
    updateMountedAndVisibleColumns() {
        let me       = this,
            {bufferColumnRange, columnPositions, mountedColumns, visibleColumns} = me,
            i            = 0,
            countColumns = columnPositions.getCount(),
            endIndex     = countColumns - 1,
            x            = me.scrollLeft,
            column, startIndex;

        if (countColumns < 1) {
            return
        }

        for (; i < countColumns; i++) {
            column = columnPositions.getAt(i);

            if (x >= column.x && x <= column.x + column.width) {
                startIndex = i
            }

            if (me.containerWidth + x < column.x) {
                endIndex = i - 1;
                break
            }
        }

        visibleColumns[0] = startIndex; // update the array inline
        visibleColumns[1] = endIndex;

        if (visibleColumns[0] <= mountedColumns[0] || visibleColumns[1] >= mountedColumns[1]) {
            startIndex = Math.max(0, visibleColumns[0] - bufferColumnRange);
            endIndex   = Math.min(countColumns - 1, visibleColumns[1] + bufferColumnRange);

            me.mountedColumns = [startIndex, endIndex]
        }
    }

    /**
     *
     */
    updateMountedAndVisibleRows() {
        let me           = this,
            {bufferRowRange, startIndex, store} = me,
            countRecords = store.getCount(),
            endIndex     = Math.min(countRecords, startIndex + me.availableRows);

        me.visibleRows[0] = startIndex; // update the array inline
        me.visibleRows[1] = endIndex;

        startIndex = Math.max(0, startIndex - bufferRowRange);
        endIndex   = Math.min(countRecords, endIndex + bufferRowRange);

        me.mountedRows[0] = startIndex; // update the array inline
        me.mountedRows[1] = endIndex
    }

    /**
     * @param {Boolean} silent=false
     */
    updateScrollHeight(silent=false) {
        let me           = this,
            countRecords = me.#initialTotalSize || me.store?.count || 0,
            {rowHeight}  = me;

        if (countRecords > 0 && rowHeight > 0) {
            me.vdom.cn[0].height = `${(countRecords + 1) * rowHeight}px`;
            !silent && me.update()
        }
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(GridBody));


/***/ }),

/***/ "./src/grid/Container.mjs":
/*!********************************!*\
  !*** ./src/grid/Container.mjs ***!
  \********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _container_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../container/Base.mjs */ "./src/container/Base.mjs");
/* harmony import */ var _util_ClassSystem_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/ClassSystem.mjs */ "./src/util/ClassSystem.mjs");
/* harmony import */ var _collection_Base_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../collection/Base.mjs */ "./src/collection/Base.mjs");
/* harmony import */ var _Body_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Body.mjs */ "./src/grid/Body.mjs");
/* harmony import */ var _ScrollManager_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ScrollManager.mjs */ "./src/grid/ScrollManager.mjs");
/* harmony import */ var _data_Store_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../data/Store.mjs */ "./src/data/Store.mjs");
/* harmony import */ var _VerticalScrollbar_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./VerticalScrollbar.mjs */ "./src/grid/VerticalScrollbar.mjs");
/* harmony import */ var _column_export_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./column/_export.mjs */ "./src/grid/column/_export.mjs");
/* harmony import */ var _header_export_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./header/_export.mjs */ "./src/grid/header/_export.mjs");
/* harmony import */ var _core_ConfigSymbols_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../core/ConfigSymbols.mjs */ "./src/core/ConfigSymbols.mjs");











/**
 * @class Neo.grid.Container
 * @extends Neo.container.Base
 */
class GridContainer extends _container_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    /**
     * @member {Object} columnTypes
     * @protected
     * @static
     */
    static columnTypes = {
        animatedChange  : _column_export_mjs__WEBPACK_IMPORTED_MODULE_7__.AnimatedChange,
        animatedCurrency: _column_export_mjs__WEBPACK_IMPORTED_MODULE_7__.AnimatedCurrency,
        column          : _column_export_mjs__WEBPACK_IMPORTED_MODULE_7__.Base,
        component       : _column_export_mjs__WEBPACK_IMPORTED_MODULE_7__.Component,
        currency        : _column_export_mjs__WEBPACK_IMPORTED_MODULE_7__.Currency,
        index           : _column_export_mjs__WEBPACK_IMPORTED_MODULE_7__.Index,
        progress        : _column_export_mjs__WEBPACK_IMPORTED_MODULE_7__.Progress
    }
    /**
     * @member {Object} delayable
     * @protected
     * @static
     */
    static delayable = {
        onResize: {type: 'buffer', timer: 300}
    }

    static config = {
        /**
         * @member {String} className='Neo.grid.Container'
         * @protected
         */
        className: 'Neo.grid.Container',
        /**
         * @member {String} ntype='grid-container'
         * @protected
         */
        ntype: 'grid-container',
        /**
         * @member {String[]} baseCls=['neo-grid-container']
         * @protected
         */
        baseCls: ['neo-grid-container'],
        /**
         * Configs for Neo.grid.Body
         * @member {Object|null} [body_={[isDescriptor]: true, merge: 'deep', value: null}]
         */
        body_: {
            [_core_ConfigSymbols_mjs__WEBPACK_IMPORTED_MODULE_9__.isDescriptor]: true,
            merge         : 'deep',
            value         : null
        },
        /**
         * true uses grid.plugin.CellEditing
         * @member {Boolean} cellEditing_=false
         * @reactive
         */
        cellEditing_: false,
        /**
         * Default configs for each column
         * @member {Object} columnDefaults=null
         */
        columnDefaults: null,
        /**
         * @member {Object[]} columns_=[]
         * @reactive
         */
        columns_: [],
        /**
         * Configs for Neo.grid.header.Toolbar
         * @member {Object|null} [headerToolbar_={[isDescriptor]: true, merge: 'deep', value: null}]
         */
        headerToolbar_: {
            [_core_ConfigSymbols_mjs__WEBPACK_IMPORTED_MODULE_9__.isDescriptor]: true,
            merge         : 'deep',
            value         : null
        },
        /**
         * @member {String} layout='base'
         * @reactive
         */
        layout: 'base',
        /**
         * @member {String} role='grid'
         * @reactive
         */
        role: 'grid',
        /**
         * Number in px
         * @member {Number} rowHeight_=32
         * @reactive
         */
        rowHeight_: 32,
        /**
         * @member {Neo.grid.Scrollbar|null} scrollbar=null
         * @protected
         */
        scrollbar: null,
        /**
         * @member {Boolean} showHeaderFilters_=false
         * @reactive
         */
        showHeaderFilters_: false,
        /**
         * @member {Boolean} sortable_=true
         * @reactive
         */
        sortable_: true,
        /**
         * @member {Neo.data.Store} store_=null
         * @reactive
         */
        store_: null,
        /**
         * @member {Array|null} items=null
         * @protected
         * @reactive
         */
        items: null,
        /**
         * @member {Object} _vdom
         */
        _vdom:
        {cls: ['neo-grid-wrapper'], cn: [
            {'aria-colcount': 0, 'aria-rowcount': 1, cn: []} // aria-rowcount includes the column headers
        ]}
    }

    /**
     * We do not need the first event to trigger logic, since afterSetMounted() handles this
     * @member {Boolean} initialResizeEvent=true
     * @protected
     */
    initialResizeEvent = true
    /**
     * @member {Neo.grid.ScrollManager|null} scrollManager=null
     * @protected
     */
    scrollManager = null

    /**
     * @param {Object} config
     */
    construct(config) {
        super.construct(config);

        let me = this,
            {appName, rowHeight, store, windowId} = me;

        me.items = [me.headerToolbar, me.body];

        me.scrollbar = Neo.create({
            module  : _VerticalScrollbar_mjs__WEBPACK_IMPORTED_MODULE_6__["default"],
            appName,
            parentId: me.id,
            rowHeight,
            store,
            windowId
        });

        me.vdom.cn.push(me.scrollbar.createVdomReference())

        me.vdom.id = me.getWrapperId();

        me._columns = me.createColumns(me.columns);
        me.updateColCount();

        me.addDomListeners({
            resize: me.onResize,
            scope : me
        })
    }

    /**
     * @param {Boolean} mounted
     * @protected
     */
    async addResizeObserver(mounted) {
        let me             = this,
            {windowId}     = me,
            ResizeObserver = await Neo.currentWorker.getAddon('ResizeObserver', windowId),
            resizeParams   = {id: me.id, windowId};

        if (mounted) {
            ResizeObserver.register(resizeParams);
            await me.passSizeToBody()
        } else {
            me.initialResizeEvent = true;
            ResizeObserver.unregister(resizeParams)
        }
    }

    /**
     * Triggered after the cellEditing config got changed
     * @param {Boolean} value
     * @param {Boolean} oldValue
     * @protected
     */
    afterSetCellEditing(value, oldValue) {
        if (value) {
            Promise.all(/*! import() */[__webpack_require__.e("vendors-src_table_plugin_CellEditing_mjs"), __webpack_require__.e("src_grid_plugin_CellEditing_mjs")]).then(__webpack_require__.bind(__webpack_require__, /*! ./plugin/CellEditing.mjs */ "./src/grid/plugin/CellEditing.mjs")).then(module => {
                let me        = this,
                    {appName} = me,
                    plugins   = me.plugins || [];

                plugins.push({
                    module: module.default,
                    appName
                });

                me.plugins = plugins
            })
        }
    }

    /**
     * Triggered after the columns config got changed
     * @param {Neo.collection.Base|null}          value
     * @param {Object[]|Neo.collection.Base|null} oldValue
     * @protected
     */
    async afterSetColumns(value, oldValue) {
        let me              = this,
            {headerToolbar} = me;

        // - If columns changed at run-time OR
        // - In case the `header.Toolbar#createItems()` method has run before columns where available
        if (oldValue?.count || (value?.count && headerToolbar?.isConstructed)) {
            headerToolbar?.createItems()

            await me.timeout(50);

            await me.passSizeToBody();

            me.body?.createViewData()
        }

        me.configsApplied && me.updateColCount()
    }

    /**
     * Triggered after the mounted config got changed
     * @param {Boolean} value
     * @param {Boolean} oldValue
     * @protected
     */
    afterSetMounted(value, oldValue) {
        super.afterSetMounted(value, oldValue);
        oldValue !== undefined && this.addResizeObserver(value)
    }

    /**
     * Triggered after the rowHeight config got changed
     * @param {Number} value
     * @param {Number} oldValue
     * @protected
     */
    afterSetRowHeight(value, oldValue) {
        if (value > 0) {
            let {body, scrollbar} = this;

            if (scrollbar) {
                scrollbar.rowHeight = value
            }

            if (body) {
                body.rowHeight = value
            }
        }
    }

    /**
     * Triggered after the showHeaderFilters config got changed
     * @param {Boolean} value
     * @param {Boolean} oldValue
     * @protected
     */
    afterSetShowHeaderFilters(value, oldValue) {
        if (oldValue !== undefined) {
            this.headerToolbar.showHeaderFilters = value
        }
    }

    /**
     * Triggered after the sortable config got changed
     * @param {Boolean} value
     * @param {Boolean} oldValue
     * @protected
     */
    afterSetSortable(value, oldValue) {
        if (oldValue !== undefined) {
            this.headerToolbar.sortable = value
        }
    }

    /**
     * Triggered after the store config got changed
     * @param {Number} value
     * @param {Number} oldValue
     * @protected
     */
    afterSetStore(value, oldValue) {
        let me        = this,
            listeners = {
                filter: me.onStoreFilter,
                load  : me.onStoreLoad,
                scope : me
            };

        value   ?.on(listeners);
        oldValue?.un(listeners);

        // in case we dynamically change the store, grid.Body needs to get the new reference
        if (me.body) {
            me.body.store = value
        }
    }

    /**
     * Triggered before the body config gets changed.
     * @param {Object|Neo.grid.Body|null} value
     * @param {Object|Neo.grid.Body|null} oldValue
     * @protected
     */
    beforeSetBody(value, oldValue) {
        const me = this;

        return _util_ClassSystem_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].beforeSetInstance(value, _Body_mjs__WEBPACK_IMPORTED_MODULE_3__["default"], {
            flex         : 1,
            gridContainer: me,
            parentId     : me.id,
            store        : me.store
        })
    }

    /**
     * Triggered before the columns config gets changed.
     * @param {Object[]} value
     * @param {Object[]} oldValue
     * @protected
     */
    beforeSetColumns(value, oldValue) {
        if (this.configsApplied) {
            return this.createColumns(value)
        }

        return value
    }

    /**
     * Triggered before the headerToolbar config gets changed.
     * @param {Object|Neo.grid.header.Toolbar|null} value
     * @param {Object|Neo.grid.header.Toolbar|null} oldValue
     * @protected
     */
    beforeSetHeaderToolbar(value, oldValue) {
        const me = this;

        return _util_ClassSystem_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].beforeSetInstance(value, _header_export_mjs__WEBPACK_IMPORTED_MODULE_8__.Toolbar, {
            parentId         : me.id,
            showHeaderFilters: me.showHeaderFilters,
            sortable         : me.sortable
        })
    }

    /**
     * Triggered before the store config gets changed.
     * @param {Object|Neo.data.Store|null} value
     * @param {Neo.data.Store}             oldValue
     * @protected
     */
    beforeSetStore(value, oldValue) {
        if (value) {
            value = _util_ClassSystem_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].beforeSetInstance(value, _data_Store_mjs__WEBPACK_IMPORTED_MODULE_5__["default"])
        }

        return value
    }

    /**
     * In case you want to update multiple existing records in parallel,
     * using this method is faster than updating each record one by one.
     * At least until we introduce row based vdom updates.
     * @param {Object[]} records
     */
    bulkUpdateRecords(records) {
        let {body, store} = this,
            {keyProperty} = store;

        if (body) {
            body.silentVdomUpdate = true;

            records.forEach(item => {
                store.get(item[keyProperty])?.set(item)
            });

            body.silentVdomUpdate = false;

            body.update()
        }
    }

    /**
     * @param {Object[]} columns
     * @returns {*}
     */
    createColumns(columns) {
        let me               = this,
            {columnDefaults} = me,
            headerButtons    = [],
            sorters          = me.store?.sorters,
            columnClass, renderer;

        columns?.forEach((column, index) => {
            renderer = column.renderer;

            columnDefaults && Neo.assignDefaults(column, columnDefaults);

            if (renderer && Neo.isString(renderer) && me[renderer]) {
                column.renderer = me[renderer]
            }

            if (sorters?.[0] && column.dataField === sorters[0].property) {
                column.isSorted = sorters[0].direction
            }

            column.listeners = {
                sort : me.onSortColumn,
                scope: me
            };

            headerButtons.push(column);

            if (column.component && !column.type) {
                column.type = 'component'
            }

            columnClass = me.constructor.columnTypes[column.type || 'column'];
            delete column.type;

            columns[index] = Neo.create(columnClass, {
                parent  : me,
                windowId: me.windowId,
                ...column
            })
        });

        me.headerToolbar.items = headerButtons;
        me.headerToolbar.createItems();

        if (Neo.typeOf(me._columns) === 'NeoInstance') {
            me._columns.clear();
            me._columns.add(columns);

            return me._columns
        }

        return Neo.create(_collection_Base_mjs__WEBPACK_IMPORTED_MODULE_2__["default"], {
            keyProperty: 'dataField',
            items      : columns,
            listeners  : {mutate: me.onColumnsMutate, scope: me}
        })
    }

    /**
     * @param args
     */
    destroy(...args) {
        let me = this;

        me.store = null; // remove the listeners

        me.scrollManager.destroy();

        me.mounted && Neo.main.addon.ResizeObserver.unregister({
            id      : me.id,
            windowId: me.windowId
        });

        super.destroy(...args)
    }

    /**
     * @override
     * @returns {*}
     */
    getVdomRoot() {
        return this.vdom.cn[0]
    }

    /**
     * @override
     * @returns {Neo.vdom.VNode}
     */
    getVnodeRoot() {
        return this.vnode.childNodes[0]
    }

    /**
     * @returns {String}
     */
    getWrapperId() {
        return `${this.id}__wrapper`
    }

    /**
     * @param {Object} data
     */
    onColumnsMutate(data) {
        this.updateColCount()
    }

    /**
     *
     */
    onConstructed() {
        super.onConstructed();

        let me = this;

        me.scrollManager = Neo.create({
            gridBody     : me.body,
            module       : _ScrollManager_mjs__WEBPACK_IMPORTED_MODULE_4__["default"],
            gridContainer: me
        })
    }

    /**
     * @param {Object} data
     * @returns {Promise<void>}
     */
    async onResize(data) {
        let me = this;

        if (!me.initialResizeEvent) {
            await me.passSizeToBody(true);

            me.body.updateMountedAndVisibleColumns();

            await me.headerToolbar.passSizeToBody()
        } else {
            me.initialResizeEvent = false
        }
    }

    /**
     * @param {Object} opts
     * @param {String} opts.direction
     * @param {String} opts.property
     * @protected
     */
    onSortColumn(opts) {
        let me = this;

        me.store.sort(opts);
        me.removeSortingCss(opts.property);
        opts.direction && me.body.onStoreLoad({items: me.store.items});
    }

    /**
     *
     */
    onStoreFilter() {
        this.updateRowCount()
    }

    /**
     * @param {Object}   data
     * @param {Object[]} data.items
     * @param {Number}   [data.total]
     * @protected
     */
    onStoreLoad(data) {
        let me         = this,
            totalCount = data.total ? data.total : this.store.count;

        me.updateRowCount(totalCount);

        if (me.store.sorters?.length < 1) {
            me.removeSortingCss()
        }
    }

    /**
     * @param {Boolean} silent=false
     * @returns {Promise<void>}
     */
    async passSizeToBody(silent=false) {
        let me                          = this,
            [containerRect, headerRect] = await me.getDomRect([me.id, me.headerToolbar.id]);

        // delay for slow connections, where the container-sizing is not done yet
        if (containerRect.height === headerRect.height) {
            await me.timeout(100);
            await me.passSizeToBody(silent)
        } else {
            me.body[silent ? 'setSilent' : 'set']({
                availableHeight: containerRect.height - headerRect.height,
                containerWidth : containerRect.width
            })
        }
    }

    /**
     * @param {String} dataField
     * @protected
     */
    removeSortingCss(dataField) {
        this.headerToolbar?.items.forEach(column => {
            if (column.dataField !== dataField) {return;
                // removed by dead control flow

                // removed by dead control flow

            }
        })
    }

    /**
     * Used for keyboard navigation (selection models)
     * @param {Number} index
     * @param {Number} step
     */
    scrollByColumns(index, step) {
        let me           = this,
            {body}       = me,
            {columnPositions, containerWidth, mountedColumns, visibleColumns} = body,
            countColumns = columnPositions.getCount(),
            newIndex     = index + step,
            column, mounted, scrollLeft, visible;

        if (newIndex >= countColumns) {
            newIndex %= countColumns;
            step     = newIndex - index
        }

        while (newIndex < 0) {
            newIndex += countColumns;
            step     += countColumns
        }

        mounted = newIndex >= mountedColumns[0] && newIndex <= mountedColumns[1];

        // Not using >= or <=, since the first / last column might not be fully visible
        visible = newIndex > visibleColumns[0] && newIndex < visibleColumns[1];

        if (!visible) {
            // Leaving the mounted area will re-calculate the visibleColumns for us
            if (mounted) {
                visibleColumns[0] += step;
                visibleColumns[1] += step
            }

            column = columnPositions.getAt(newIndex);

            if (step < 0) {
                scrollLeft = column.x
            } else {
                scrollLeft = column.x - containerWidth + column.width
            }

            Neo.main.DomAccess.scrollTo({
                direction: 'left',
                id       : me.id,
                value    : scrollLeft,
                windowId : me.windowId
            })
        }
    }

    /**
     * @param {Boolean} [silent=false]
     */
    updateColCount(silent=false) {
        let me = this;

        me.getVdomRoot()['aria-colcount'] = me.columns.count;
        !silent && me.update()
    }

    /**
     * @param {Number} [count] The total number of rows in the store. Optional, will use store.count if not provided.
     * @param {Boolean} [silent=false]
     */
    updateRowCount(count, silent=false) {
        let me         = this,
            finalCount = count ? count : me.store.count;

        me.getVdomRoot()['aria-rowcount'] = finalCount + 1;
        !silent && me.update()
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(GridContainer));


/***/ }),

/***/ "./src/grid/ScrollManager.mjs":
/*!************************************!*\
  !*** ./src/grid/ScrollManager.mjs ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/Base.mjs */ "./src/core/Base.mjs");


/**
 * @class Neo.grid.ScrollManager
 * @extends Neo.core.Base
 */
class ScrollManager extends _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    /**
     * @member {Object} delayable
     * @protected
     * @static
     */
    static delayable = {
        onBodyScroll     : {type: 'throttle', timer:  16},
        onBodyScrollEnd  : {type: 'buffer',   timer: 150},
        onContainerScroll: {type: 'throttle', timer:  16}
    }

    static config = {
        /**
         * @member {String} className='Neo.grid.ScrollManager'
         * @protected
         */
        className: 'Neo.grid.ScrollManager',
        /**
         * @member {Number} scrollLeft_=0
         * @protected
         * @reactive
         */
        scrollLeft_: 0,
        /**
         * @member {Number} scrollTop_=0
         * @protected
         * @reactive
         */
        scrollTop_: 0
    }

    /**
     * @member {Neo.grid.Body|null} gridBody=null
     * @protected
     */
    gridBody = null
    /**
     * @member {Neo.grid.Container|null} gridContainer=null
     * @protected
     */
    gridContainer = null
    /**
     * Storing touchmove position for mobile envs
     * @member {Number} lastTouchX=0
     * @protected
     */
    lastTouchX = 0
    /**
     * Storing touchmove position for mobile envs
     * @member {Number} lastTouchY=0
     * @protected
     */
    lastTouchY = 0
    /**
     * Flag for identifying the ownership of a touchmove operation
     * @member {'body'|'container'|null} touchMoveOwner=null
     * @protected
     */
    touchMoveOwner = null

    /**
     * @param {Object} config
     */
    construct(config) {
        super.construct(config);

        let me = this;

        me.gridBody.addDomListeners({
            scroll     : me.onBodyScroll,
            touchcancel: me.onTouchCancel,
            touchend   : me.onTouchEnd,
            scope      : me
        });

        me.gridContainer.addDomListeners({
            scroll: me.onContainerScroll,
            scope : me
        })
    }

    /**
     * Only triggers for vertical scrolling
     * @param {Object} data
     * @protected
     */
    onBodyScroll({scrollTop, touches}) {
        let me   = this,
            body = me.gridBody,
            deltaX, lastTouchX;

        me.scrollTop = scrollTop;

        body.set({isScrolling: true, scrollTop});

        me.onBodyScrollEnd();

        if (touches) {
            if (me.touchMoveOwner !== 'container') {
                me.touchMoveOwner = 'body'
            }

            if (me.touchMoveOwner === 'body') {
                lastTouchX = touches.lastTouch.clientX - touches.firstTouch.clientX;
                deltaX     = me.lastTouchX - lastTouchX;

                deltaX !== 0 && Neo.main.DomAccess.scrollTo({
                    direction: 'left',
                    id       : me.gridContainer.id,
                    value    : me.scrollLeft + deltaX
                })

                me.lastTouchX = lastTouchX
            }
        }
    }

    /**
     * @protected
     */
    onBodyScrollEnd() {
        this.gridBody.isScrolling = false
    }

    /**
     * @param {Object} data
     * @param {Number} data.scrollLeft
     * @param {Object} data.target
     * @param {Object} data.touches
     */
    onContainerScroll({scrollLeft, target, touches}) {
        let me    = this,
            body = me.gridBody,
            deltaY, lastTouchY;

        // We must ignore events for grid-scrollbar
        if (target.id.includes('grid-container')) {
            body.isScrolling = true;
            me.onBodyScrollEnd();

            me  .scrollLeft = scrollLeft;
            body.scrollLeft = scrollLeft;

            me.gridContainer.headerToolbar.scrollLeft = scrollLeft;

            if (touches && !me.gridContainer.headerToolbar.cls.includes('neo-is-dragging')) {
                if (me.touchMoveOwner !== 'body') {
                    me.touchMoveOwner = 'container'
                }

                if (me.touchMoveOwner === 'container') {
                    lastTouchY = touches.lastTouch.clientY - touches.firstTouch.clientY;
                    deltaY     = me.lastTouchY - lastTouchY;

                    deltaY !== 0 && Neo.main.DomAccess.scrollTo({
                        direction: 'top',
                        id       : body.vdom.id,
                        value    : me.scrollTop + deltaY
                    })

                    me.lastTouchY = lastTouchY
                }
            }
        }
    }

    /**
     * @param {Object} data
     */
    onTouchCancel(data) {
        this.onTouchEnd(data)
    }

    /**
     * @param {Object} data
     */
    onTouchEnd(data) {
        let me = this;

        me.touchMoveOwner = null;
        me.lastTouchX     = 0;
        me.lastTouchY     = 0
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(ScrollManager));


/***/ }),

/***/ "./src/grid/VerticalScrollbar.mjs":
/*!****************************************!*\
  !*** ./src/grid/VerticalScrollbar.mjs ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _component_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../component/Base.mjs */ "./src/component/Base.mjs");


/**
 * We do not want to use the default scrollbar for vertical scrolling, since it would show up at the right edge
 * of the last column. Instead, we want to show it at the right edge of the container (always visible when scrolling).
 * @class Neo.grid.VerticalScrollbar
 * @extends Neo.component.Base
 */
class VerticalScrollbar extends _component_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.grid.VerticalScrollbar'
         * @protected
         */
        className: 'Neo.grid.VerticalScrollbar',
        /**
         * @member {String} ntype='grid-vertical-scrollbar'
         * @protected
         */
        ntype: 'grid-vertical-scrollbar',
        /**
         * @member {String[]} baseCls=['neo-grid-vertical-scrollbar']
         * @protected
         */
        baseCls: ['neo-grid-vertical-scrollbar'],
        /**
         * Number in px
         * @member {Number} rowHeight_=0
         * @reactive
         */
        rowHeight_: 0,
        /**
         * @member {Neo.data.Store|null} store_=null
         * @reactive
         */
        store_: null,
        /**
         * @member {Object} _vdom
         */
        _vdom:
        {cn: [
            {cls: ['neo-grid-scrollbar-content']}
        ]}
    }

    /**
     * @param {Boolean} mounted
     * @protected
     */
    async addScrollSync(mounted) {
        let me         = this,
            {windowId} = me,
            ScrollSync = await Neo.currentWorker.getAddon('ScrollSync', windowId),
            params     = {id: me.id, windowId};

        if (mounted) {
            ScrollSync.register({
                fromId: me.parent.body.vdom.id,
                toId  : me.id,
                twoWay: !Neo.config.hasTouchEvents, // Syncing the scroller back to the body affects mobile scrolling
                ...params
            })
        } else {
            ScrollSync.unregister(params)
        }
    }

    /**
     * Triggered after the mounted config got changed
     * @param {Boolean} value
     * @param {Boolean} oldValue
     * @protected
     */
    afterSetMounted(value, oldValue) {
        super.afterSetMounted(value, oldValue);
        oldValue !== undefined && this.addScrollSync(value)
    }

    /**
     * Triggered after the rowHeight config got changed
     * @param {Number} value
     * @param {Number} oldValue
     * @protected
     */
    afterSetRowHeight(value, oldValue) {
        value > 0 && this.updateScrollHeight()
    }

    /**
     * Triggered after the store config got changed
     * @param {Neo.data.Store|null} value
     * @param {Neo.data.Store|null} oldValue
     * @protected
     */
    afterSetStore(value, oldValue) {
        if (value) {
            let me = this;

            value.on({
                filter: me.updateScrollHeight,
                load  : me.updateScrollHeight,
                scope : me
            })
        }
    }

    /**
     * @param {Object}   data
     * @param {Object[]} data.items
     * @param {Number}   [data.total]
     * @protected
     */
    updateScrollHeight(data) {
        let me           = this,
            countRecords = data?.total ? data.total : me.store.count,
            {rowHeight}  = me;

        if (countRecords > 0 && rowHeight > 0) {
            me.vdom.cn[0].height = `${(countRecords + 1) * rowHeight}px`;
            me.update()
        }
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(VerticalScrollbar));


/***/ }),

/***/ "./src/grid/column/AnimatedChange.mjs":
/*!********************************************!*\
  !*** ./src/grid/column/AnimatedChange.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Base.mjs */ "./src/grid/column/Base.mjs");
/* harmony import */ var _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/Array.mjs */ "./src/util/Array.mjs");
/* harmony import */ var _util_VDom_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/VDom.mjs */ "./src/util/VDom.mjs");




/**
 * @class Neo.grid.column.AnimatedChange
 * @extends Neo.grid.column.Base
 */
class AnimatedChange extends _Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.grid.column.AnimatedChange'
         * @protected
         */
        className: 'Neo.grid.column.AnimatedChange',
        /**
         * @member {String} animationCls='neo-animated'
         */
        animationCls: 'neo-animated',
        /**
         * @member {String} type='animatedChange'
         * @protected
         */
        type: 'animatedChange'
    }

    /**
     * @param {Object} config
     */
    construct(config) {
        super.construct(config);

        let me = this;

        me.parent.store.on({
            recordChange: me.onRecordChange,
            scope       : me
        })
    }

    /**
     * Override as needed for dynamic record-based animation classes
     * @param {Record} record
     * @returns {String}
     */
    getAnimationCls(record) {
        return this.animationCls
    }

    /**
     * @param {Object}         data
     * @param {Object[]}       data.fields Each field object contains the keys: name, oldValue, value
     * @param {Neo.data.Model} data.model The model instance of the changed record
     * @param {Object}         data.record
     */
    async onRecordChange({fields, record}) {
        let me     = this,
            {body} = me.parent,
            cellId, field, node;

        for (field of fields) {
            if (field.name === me.dataField) {
                // Wait for the next animation frame
                await me.timeout(20);

                cellId = body.getCellId(me.parent.store.indexOf(record), me.dataField);
                node   = _util_VDom_mjs__WEBPACK_IMPORTED_MODULE_2__["default"].find(body.vdom, cellId)?.vdom;

                if (node) {
                    _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].add(node.cls, me.getAnimationCls(record));

                    // This will trigger a 2nd body update, after grid.Body: onStoreRecordChange()
                    // It is crucial to restart the keyframe based animation
                    // => The previous update call will remove the last animationCls
                    body.update()
                }

                break
            }
        }
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(AnimatedChange));


/***/ }),

/***/ "./src/grid/column/AnimatedCurrency.mjs":
/*!**********************************************!*\
  !*** ./src/grid/column/AnimatedCurrency.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _AnimatedChange_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AnimatedChange.mjs */ "./src/grid/column/AnimatedChange.mjs");


/**
 * @class Neo.grid.column.AnimatedCurrency
 * @extends Neo.grid.column.AnimatedChange
 */
class AnimatedCurrency extends _AnimatedChange_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.grid.column.AnimatedCurrency'
         * @protected
         */
        className: 'Neo.grid.column.AnimatedCurrency',
        /**
         * @member {String} type='animatedCurrency'
         * @protected
         */
        type: 'animatedCurrency',
        /**
         * Set a different record field to base the change on.
         * Defaults this.dataField
         * @member {String|null} compareField=null
         */
        compareField: null,
        /**
         * @member {String} currency='USD'
         */
        currency: 'USD',
        /**
         * @member {String} locale='default'
         */
        locale: 'default'
    }

    /**
     * @member {Intl.NumberFormat|null} formatter=null
     */
    formatter = null

    /**
     * @param {Object} config
     */
    construct(config) {
        super.construct(config);
        this.createFormatter()
    }

    /**
     * @param {Object}             data
     * @param {Neo.button.Base}    data.column
     * @param {Number}             data.columnIndex
     * @param {String}             data.dataField
     * @param {Neo.grid.Container} data.gridContainer
     * @param {Object}             data.record
     * @param {Number}             data.rowIndex
     * @param {Neo.data.Store}     data.store
     * @param {Number|String}      data.value
     * @returns {*}
     */
    cellRenderer({column, value}) {
        if (value === null || value === undefined) {
            return ''
        }

        return column.formatter.format(value)
    }

    /**
     *
     */
    createFormatter() {
        let me = this;

        me.formatter = new Intl.NumberFormat(me.locale, {style: 'currency', currency: me.currency})
    }

    /**
     * Override as needed for dynamic record-based animation classes
     * @param {Record} record
     * @returns {String}
     */
    getAnimationCls(record) {
        return record[this.compareField || this.dataField] < 0 ? 'neo-animated-negative' : 'neo-animated-positive'
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(AnimatedCurrency));


/***/ }),

/***/ "./src/grid/column/Base.mjs":
/*!**********************************!*\
  !*** ./src/grid/column/Base.mjs ***!
  \**********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/Base.mjs */ "./src/core/Base.mjs");
/* harmony import */ var _util_Function_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/Function.mjs */ "./src/util/Function.mjs");



/**
 * @class Neo.grid.column.Base
 * @extends Neo.core.Base
 */
class Column extends _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.grid.column.Base'
         * @protected
         */
        className: 'Neo.grid.column.Base',
        /**
         * @member {String|null} dataField=null
         */
        dataField: null,
        /**
         * @member {Neo.grid.Container|null} parent=null
         */
        parent: null,
        /**
         * @member {Function|String|null} renderer_='cellRenderer'
         * @reactive
         */
        renderer_: 'cellRenderer',
        /**
         * Scope to execute the column renderer.
         * Defaults to the grid.Body.
         * You can pass the strings 'this' or 'me'
         * @member {Neo.core.Base|String|null} rendererScope=null
         */
        rendererScope: null,
        /**
         * @member {String} type='column'
         * @protected
         */
        type: 'column',
        /**
         * @member {Number|null} windowId_=null
         * @reactive
         */
        windowId_: null
    }

    /**
     * Triggered after the windowId config got changed
     * @param {Number} value
     * @param {Number|null} oldValue
     * @protected
     */
    afterSetWindowId(value, oldValue) {
        value && Neo.currentWorker.insertThemeFiles(value, this.__proto__)
    }

    /**
     * Triggered before the renderer config gets changed
     * @param {Function|String|null} value
     * @param {Function|String|null} oldValue
     * @protected
     */
    beforeSetRenderer(value, oldValue) {
        // If no fn is found inside the parent tree, return the plain value for view controllers to match
        return (0,_util_Function_mjs__WEBPACK_IMPORTED_MODULE_1__.resolveCallback)(value, this).fn || value
    }

    /**
     * @param {Object}             data
     * @param {Neo.button.Base}    data.column
     * @param {Number}             data.columnIndex
     * @param {String}             data.dataField
     * @param {Neo.grid.Container} data.gridContainer
     * @param {Object}             data.record
     * @param {Number}             data.rowIndex
     * @param {Neo.data.Store}     data.store
     * @param {Number|String}      data.value
     * @returns {*}
     */
    cellRenderer({value}) {
        return value
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(Column));


/***/ }),

/***/ "./src/grid/column/Component.mjs":
/*!***************************************!*\
  !*** ./src/grid/column/Component.mjs ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Base.mjs */ "./src/grid/column/Base.mjs");


/**
 * @class Neo.grid.column.Component
 * @extends Neo.grid.column.Base
 */
class Component extends _Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.grid.column.Component'
         * @protected
         */
        className: 'Neo.grid.column.Component',
        /**
         * @member {Function|Object|null} component=null
         */
        component: null,
        /**
         * @member {Object} defaults
         * @protected
         */
        defaults: null,
        /**
         * Components can delegate event listeners (or button handlers) into methods somewhere inside
         * the view controller or component tree hierarchy.
         *
         * In this case, it is helpful to know what the related record is, so we are adding the record
         * to the component as a property. By default, as 'record', but this config can change the property name.
         * @member {String} recordProperty='record'
         */
        recordProperty: 'record',
        /**
         * @member {String} rendererScope='this'
         * @protected
         */
        rendererScope: 'this',
        /**
         * @member {String} type='component'
         * @protected
         */
        type: 'component',
        /**
         * Set this config to true, in case you want to use 'bind' inside your cell based component.
         * @member {Boolean} useBindings=false
         */
        useBindings: false
    }

    /**
     * @member {Map} map=new Map()
     * @protected
     */
    map = new Map()

    /**
     * Override as needed inside class extensions
     * @param {Object} config
     * @param {Record} record
     * @returns {Object}
     */
    applyRecordConfigs(config, record) {
        return config
    }

    /**
     * @param {Object}             data
     * @param {Neo.column.Base}    data.column
     * @param {Number}             data.columnIndex
     * @param {String}             data.dataField
     * @param {Neo.grid.Container} data.gridContainer
     * @param {Object}             data.record
     * @param {Number}             data.rowIndex
     * @param {Neo.data.Store}     data.store
     * @param {Number|String}      data.value
     * @returns {*}
     */
    cellRenderer(data) {
        let {gridContainer, record, rowIndex} = data,
            {appName, body, windowId}         = gridContainer,
            me               = this,
            {recordProperty} = me,
            id               = me.getComponentId(rowIndex),
            component        = me.map.get(id),
            componentConfig  = me.component;

        if (Neo.typeOf(componentConfig) === 'Function') {
            componentConfig = componentConfig(data)
        }

        componentConfig = me.applyRecordConfigs(componentConfig, record);
        componentConfig = {...componentConfig};

        if (component) {
            delete componentConfig.className;
            delete componentConfig.module;
            delete componentConfig.ntype;

            componentConfig[recordProperty] = record;

            component.set(componentConfig)
        } else {
            component = Neo.create({
                ...me.defaults,
                ...componentConfig,
                appName,
                id,
                parentComponent : body,
                [recordProperty]: record,
                windowId
            });

            // We need to ensure that wrapped components always get the same index-based id.
            if (!component.vdom.id) {
                component.vdom.id = id + '__wrapper'
            }

            me.map.set(id, component)
        }

        if (me.useBindings) {
            body.getStateProvider()?.createBindings(component)
        }

        body.updateDepth = -1;

        return component.createVdomReference()
    }

    /**
     * @param {Number} rowIndex
     * @returns {String}
     */
    getComponentId(rowIndex) {
        let me     = this,
            {body} = me.parent,
            store  = body.store; // Access the store from the body

        if (store.chunkingTotal) { // Check if chunking is active
            return `${me.id}-component-${rowIndex}`; // Use rowIndex directly
        } else {
            return `${me.id}-component-${rowIndex % (body.availableRows + 2 * body.bufferRowRange)}`
        }
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(Component));


/***/ }),

/***/ "./src/grid/column/Currency.mjs":
/*!**************************************!*\
  !*** ./src/grid/column/Currency.mjs ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Base.mjs */ "./src/grid/column/Base.mjs");


/**
 * @class Neo.grid.column.Currency
 * @extends Neo.grid.column.Base
 */
class Currency extends _Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.grid.column.Currency'
         * @protected
         */
        className: 'Neo.grid.column.Currency',
        /**
         * @member {String} type='currency'
         * @protected
         */
        type: 'currency',
        /**
         * @member {String} currency='USD'
         */
        currency: 'USD',
        /**
         * @member {String} locale='default'
         */
        locale: 'default'
    }

    /**
     * @member {Intl.NumberFormat|null} formatter=null
     */
    formatter = null

    /**
     * @param {Object} config
     */
    construct(config) {
        super.construct(config);
        this.createFormatter()
    }

    /**
     * @param {Object}             data
     * @param {Neo.button.Base}    data.column
     * @param {Number}             data.columnIndex
     * @param {String}             data.dataField
     * @param {Neo.grid.Container} data.gridContainer
     * @param {Object}             data.record
     * @param {Number}             data.rowIndex
     * @param {Neo.data.Store}     data.store
     * @param {Number|String}      data.value
     * @returns {*}
     */
    cellRenderer({value}) {
        if (value === null || value === undefined) {
            return ''
        }

        return this.formatter.format(value)
    }

    /**
     *
     */
    createFormatter() {
        let me = this;

        me.formatter = new Intl.NumberFormat(me.locale, {style: 'currency', currency: me.currency})
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(Currency));


/***/ }),

/***/ "./src/grid/column/Index.mjs":
/*!***********************************!*\
  !*** ./src/grid/column/Index.mjs ***!
  \***********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Base.mjs */ "./src/grid/column/Base.mjs");


/**
 * @class Neo.grid.column.Index
 * @extends Neo.grid.column.Base
 */
class Index extends _Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.grid.column.Index'
         * @protected
         */
        className: 'Neo.grid.column.Index',
        /**
         * @member {String} type='index'
         * @protected
         */
        type: 'index',
        /**
         * @member {Boolean} zeroBased=false
         */
        zeroBased: false
    }

    /**
     * @param {Object}             data
     * @param {Neo.button.Base}    data.column
     * @param {Number}             data.columnIndex
     * @param {String}             data.dataField
     * @param {Neo.grid.Container} data.gridContainer
     * @param {Object}             data.record
     * @param {Number}             data.rowIndex
     * @param {Neo.data.Store}     data.store
     * @param {Number|String}      data.value
     * @returns {*}
     */
    cellRenderer({rowIndex}) {
        return rowIndex + (this.zeroBased ? 0 : 1)
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(Index));


/***/ }),

/***/ "./src/grid/column/Progress.mjs":
/*!**************************************!*\
  !*** ./src/grid/column/Progress.mjs ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Component_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Component.mjs */ "./src/grid/column/Component.mjs");
/* harmony import */ var _component_Progress_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../component/Progress.mjs */ "./src/component/Progress.mjs");



/**
 * @class Neo.grid.column.Progress
 * @extends Neo.grid.column.Component
 */
class Progress extends _Component_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.grid.column.Progress'
         * @protected
         */
        className: 'Neo.grid.column.Progress',
        /**
         * @member {Object} defaults
         * @protected
         */
        defaults: {
            module: _component_Progress_mjs__WEBPACK_IMPORTED_MODULE_1__["default"]
        },
        /**
         * @member {String} type='progress'
         * @protected
         */
        type: 'progress'
    }

    /**
     * @param {Object} config
     * @param {Record} record
     * @returns {Object}
     */
    applyRecordConfigs(config, record) {
        return {
            value: record[this.dataField],
            ...config
        }
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(Progress));


/***/ }),

/***/ "./src/grid/column/_export.mjs":
/*!*************************************!*\
  !*** ./src/grid/column/_export.mjs ***!
  \*************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AnimatedChange: () => (/* reexport safe */ _AnimatedChange_mjs__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   AnimatedCurrency: () => (/* reexport safe */ _AnimatedCurrency_mjs__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   Base: () => (/* reexport safe */ _Base_mjs__WEBPACK_IMPORTED_MODULE_2__["default"]),
/* harmony export */   Component: () => (/* reexport safe */ _Component_mjs__WEBPACK_IMPORTED_MODULE_3__["default"]),
/* harmony export */   Currency: () => (/* reexport safe */ _Currency_mjs__WEBPACK_IMPORTED_MODULE_4__["default"]),
/* harmony export */   Index: () => (/* reexport safe */ _Index_mjs__WEBPACK_IMPORTED_MODULE_5__["default"]),
/* harmony export */   Progress: () => (/* reexport safe */ _Progress_mjs__WEBPACK_IMPORTED_MODULE_6__["default"])
/* harmony export */ });
/* harmony import */ var _AnimatedChange_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AnimatedChange.mjs */ "./src/grid/column/AnimatedChange.mjs");
/* harmony import */ var _AnimatedCurrency_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AnimatedCurrency.mjs */ "./src/grid/column/AnimatedCurrency.mjs");
/* harmony import */ var _Base_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Base.mjs */ "./src/grid/column/Base.mjs");
/* harmony import */ var _Component_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Component.mjs */ "./src/grid/column/Component.mjs");
/* harmony import */ var _Currency_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Currency.mjs */ "./src/grid/column/Currency.mjs");
/* harmony import */ var _Index_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Index.mjs */ "./src/grid/column/Index.mjs");
/* harmony import */ var _Progress_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Progress.mjs */ "./src/grid/column/Progress.mjs");











/***/ }),

/***/ "./src/grid/header/Button.mjs":
/*!************************************!*\
  !*** ./src/grid/header/Button.mjs ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _button_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../button/Base.mjs */ "./src/button/Base.mjs");
/* harmony import */ var _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/Array.mjs */ "./src/util/Array.mjs");
/* harmony import */ var _form_field_Text_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../form/field/Text.mjs */ "./src/form/field/Text.mjs");




/**
 * @class Neo.grid.header.Button
 * @extends Neo.button.Base
 */
class Button extends _button_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    /**
     * Valid values for align
     * @member {String[]} cellAlignValues: ['left','center','right']
     * @protected
     * @static
     */
    static cellAlignValues = ['left', 'center', 'right']

    static config = {
        /**
         * @member {String} className='Neo.grid.header.Button'
         * @protected
         */
        className: 'Neo.grid.header.Button',
        /**
         * @member {String} ntype='grid-header-button'
         * @protected
         */
        ntype: 'grid-header-button',
        /**
         * @member {String[]} baseCls=['neo-grid-header-button','neo-button']
         */
        baseCls: ['neo-grid-header-button', 'neo-button'],
        /**
         * Alignment of the matching grid cells. Valid values are left, center, right
         * @member {String} cellAlign_='left'
         * @reactive
         */
        cellAlign_: 'left',
        /**
         * @member {String|null} dataField=null
         */
        dataField: null,
        /**
         * Sort direction when clicking on an unsorted button
         * @member {String} defaultSortDirection='ASC'
         */
        defaultSortDirection: 'ASC',
        /**
         * @member {Object} editorConfig=null
         */
        editorConfig: null,
        /**
         * @member {Object} filterConfig=null
         */
        filterConfig: null,
        /**
         * @member {Neo.form.field.Base|null} filterField=null
         * @protected
         */
        filterField: null,
        /**
         * @member {String} iconCls='fa fa-arrow-circle-up'
         * @reactive
         */
        iconCls: 'fa fa-arrow-circle-up',
        /**
         * @member {String} iconPosition='right'
         * @reactive
         */
        iconPosition: 'right',
        /**
         * 'ASC', 'DESC' or null
         * @member {String|null} isSorted_=null
         * @protected
         * @reactive
         */
        isSorted_: null,
        /**
         * @member {String} role='columnheader'
         * @reactive
         */
        role: 'columnheader',
        /**
         * @member {Boolean} showHeaderFilter_=false
         * @reactive
         */
        showHeaderFilter_: false,
        /**
         * @member {Boolean} sortable_=true
         * @reactive
         */
        sortable_: true
    }

    /**
     * Triggered after the isSorted config got changed
     * @param {String|null} value
     * @param {String|null} oldValue
     * @protected
     */
    afterSetIsSorted(value, oldValue) {
        let me        = this,
            {cls}     = me,
            container = me.up('grid-container');

        switch (value) {
            case null:
                _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].add(cls, 'neo-sort-hidden');
                break
            case 'ASC':
                _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].remove(cls, 'neo-sort-desc');
                _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].remove(cls, 'neo-sort-hidden');
                _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].add(cls, 'neo-sort-asc');
                break
            case 'DESC':
                _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].remove(cls, 'neo-sort-asc');
                _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].remove(cls, 'neo-sort-hidden');
                _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].add(cls, 'neo-sort-desc');
                break
        }

        me.cls = cls;

        // testing check until all example grids have a store
        if (!container || !container.store) {
            return
        }

        me.mounted && me.fire('sort', {
            direction: value,
            property : me.dataField
        })
    }

    /**
     * Triggered after the showHeaderFilter config got changed
     * @param {Boolean} value
     * @param {Boolean} oldValue
     * @protected
     */
    afterSetShowHeaderFilter(value, oldValue) {
        let me = this;

        if (value) {
            if (!me.filterField) {
                me.filterField = Neo.create({
                    module   : _form_field_Text_mjs__WEBPACK_IMPORTED_MODULE_2__["default"],
                    appName  : me.appName,
                    flag     : 'filter-field',
                    hideLabel: true,
                    parentId : me.id,
                    style    : {marginLeft: '.5em', marginRight: '.5em'},
                    windowId : me.windowId,

                    listeners: {
                        change        : me.changeFilterValue,
                        operatorChange: me.changeFilterOperator,
                        scope         : me
                    },

                    ...me.editorConfig
                });

                me.vdom.cn.push(me.filterField.createVdomReference())
            } else {
                delete me.filterField.vdom.removeDom
            }
        } else if (me.filterField) {
            me.filterField.vdom.removeDom = true
        }

        me.updateDepth = 2;
        me.update()
    }

    /**
     * Triggered after the sortable config got changed
     * @param {Boolean} value
     * @param {Boolean} oldValue
     * @protected
     */
    afterSetSortable(value, oldValue) {
        let me    = this,
            {cls} = me;

        _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].toggle(cls, 'neo-sort-hidden', !value);

        me.cls = cls;
        me.update()
    }

    /**
     * Triggered before the cellAlign config gets changed
     * @param {String} value
     * @param {String} oldValue
     * @protected
     */
    beforeSetCellAlign(value, oldValue) {
        return this.beforeSetEnumValue(value, oldValue, 'cellAlign', 'cellAlignValues')
    }

    /**
     *
     */
    destroy(...args) {
        this.filterField?.destroy();
        super.destroy(...args)
    }

    /**
     * @param {Object} data
     * @protected
     */
    onClick(data) {
        let me = this,
            map;

        if (me.defaultSortDirection === 'DESC') {
            map = {
                ASC : null,
                DESC: 'ASC',
                null: 'DESC'
            }
        } else {
            map = {
                ASC : 'DESC',
                DESC: null,
                null: 'ASC'
            }
        }

        me.isSorted = map[me.isSorted + ''];

        super.onClick(data)
    }

    /**
     * @param {Object} data
     */
    changeFilterOperator(data) {
        let me            = this,
            gridContainer = me.up('grid-container'),
            store         = gridContainer?.store,
            operator      = data.value,
            filter, filters;

        if (store) {
            filter = store.getFilter(me.dataField);

            if (!filter) {
                filters = store.filters;

                filters.push({
                    property: me.dataField,
                    operator,
                    value   : null,
                    ...me.filterConfig
                });

                store.filters = filters
            } else {
                filter.operator = operator
            }
        }
    }

    /**
     * @param {Object} data
     */
    changeFilterValue(data) {
        let me            = this,
            gridContainer = me.up('grid-container'),
            store         = gridContainer?.store,
            {value}       = data,
            field, filter, filters, model;

        if (store) {
            filter = store.getFilter(me.dataField);
            model  = store.model;
            field  = model.getField(me.dataField);

            if (value && field?.type.toLowerCase() === 'date') {
                value = new Date(value)
            }

            if (!filter) {
                filters = store.filters;

                filters.push({
                    property: me.dataField,
                    operator: 'like',
                    value,
                    ...me.filterConfig
                });

                store.filters = filters
            } else {
                filter.value = value
            }
        }
    }

    /**
     * @protected
     */
    removeSortingCss() {
        let me    = this,
            {cls} = me;

        _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].add(cls, 'neo-sort-hidden');

        me.cls       = cls;
        me._isSorted = null
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(Button));


/***/ }),

/***/ "./src/grid/header/Toolbar.mjs":
/*!*************************************!*\
  !*** ./src/grid/header/Toolbar.mjs ***!
  \*************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _toolbar_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../toolbar/Base.mjs */ "./src/toolbar/Base.mjs");


/**
 * @class Neo.grid.header.Toolbar
 * @extends Neo.toolbar.Base
 */
class Toolbar extends _toolbar_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.grid.header.Toolbar'
         * @protected
         */
        className: 'Neo.grid.header.Toolbar',
        /**
         * @member {String} ntype='grid-header-toolbar'
         * @protected
         */
        ntype: 'grid-header-toolbar',
        /**
         * @member {String[]} baseCls=['neo-grid-header-toolbar','neo-toolbar']
         */
        baseCls: ['neo-grid-header-toolbar', 'neo-toolbar'],
        /**
         * @member {Boolean} draggable_=true
         * @reactive
         */
        draggable_: true,
        /**
         * @member {Object} itemDefaults={ntype: 'grid-header-button'}
         * @reactive
         */
        itemDefaults: {
            ntype: 'grid-header-button'
        },
        /**
         * @member {String} role='row'
         * @reactive
         */
        role: 'row',
        /**
         * @member {Number} scrollLeft_=0
         * @reactive
         */
        scrollLeft_: 0,
        /**
         * @member {Boolean} showHeaderFilters_=false
         * @reactive
         */
        showHeaderFilters_: false,
        /**
         * Convenience shortcut to pass sortable to all toolbar items.
         * If set to true, header clicks will sort the matching column (ASC, DESC, null)
         * @member {Boolean} sortable=true
         * @reactive
         */
        sortable: true,
        /**
         * @member {Object} _vdom
         */
        _vdom:
        {'aria-rowindex': 1, cn: [{cn: []}]}
    }

    /**
     * Triggered after the draggable config got changed
     * @param {Boolean} value
     * @param {Boolean} oldValue
     * @protected
     */
    afterSetDraggable(value, oldValue) {
        let me = this;

        if (value && !me.sortZone) {
            Promise.all(/*! import() */[__webpack_require__.e("vendors-src_draggable_DragZone_mjs"), __webpack_require__.e("vendors-src_draggable_container_SortZone_mjs"), __webpack_require__.e("src_draggable_grid_header_toolbar_SortZone_mjs")]).then(__webpack_require__.bind(__webpack_require__, /*! ../../draggable/grid/header/toolbar/SortZone.mjs */ "./src/draggable/grid/header/toolbar/SortZone.mjs")).then(module => {
                let {appName, id, scrollLeft, windowId} = me;

                me.sortZone = Neo.create({
                    module             : module.default,
                    appName,
                    boundaryContainerId: [id, me.parent.id],
                    owner              : me,
                    scrollLeft,
                    windowId,
                    ...me.sortZoneConfig
                })
            })
        }
    }

    /**
     * Triggered after the mounted config got changed
     * @param {Boolean} value
     * @param {Boolean} oldValue
     * @protected
     */
    afterSetMounted(value, oldValue) {
        super.afterSetMounted(value, oldValue);
        value && this.passSizeToBody()
    }

    /**
     * Triggered after the showHeaderFilters config got changed
     * @param {Boolean} value
     * @param {Boolean} oldValue
     * @protected
     */
    afterSetShowHeaderFilters(value, oldValue) {
        if (oldValue !== undefined) {
            let me = this;

            me.items.forEach(item => {
                item.setSilent({
                    showHeaderFilter: value
                })
            });

            me.updateDepth = -1; // filters can be deeply nested
            me.update()
        }
    }

    /**
     * Triggered after the scrollLeft config got changed
     * @param {Number} value
     * @param {Number} oldValue
     * @protected
     */
    afterSetScrollLeft(value, oldValue) {
        if (oldValue !== undefined && this.sortZone) {
            this.sortZone.scrollLeft = value
        }
    }

    /**
     * Triggered after the sortable config got changed
     * @param {Boolean} value
     * @param {Boolean} oldValue
     * @protected
     */
    afterSetSortable(value, oldValue) {
        if (oldValue !== undefined) {
            let me = this;

            me.items.forEach(item => {
                item.setSilent({
                    sortable: value
                })
            });

            me.updateDepth = 2;
            me.update()
        }
    }

    /**
     *
     */
    createItems() {
        let me        = this,
            {mounted} = me;

        me.itemDefaults.showHeaderFilter = me.showHeaderFilters;

        me.items.forEach(item => {
            if (!Object.hasOwn(item, 'sortable')) {
                item.sortable = me.sortable
            }
        });

        super.createItems();

        let {items} = me,
            style;

        items.forEach((item, index) => {
            item.vdom['aria-colindex'] = index + 1; // 1 based

            style = item.wrapperStyle;

            // todo: only add px if number
            if (item.maxWidth) {style.maxWidth = item.maxWidth + 'px'}
            if (item.minWidth) {style.minWidth = item.minWidth + 'px'}
            if (item.width)    {style.width    = item.width    + 'px'}

            item.wrapperStyle = style
        });

        me.promiseUpdate().then(() => {
            // To prevent duplicate calls, we need to check the mounted state before the update call
            mounted && me.passSizeToBody()
        })
    }

    /**
     * @param {String} dataField
     * @returns {Neo.button.Base|null}
     */
    getColumn(dataField) {
        for (const item of this.items) {
            if (item.dataField === dataField) {
                return item
            }
        }

        return null
    }

    /**
     * @param {Boolean} silent=false
     * @returns {Promise<void>}
     */
    async passSizeToBody(silent=false) {
        let me              = this,
            {items}         = me,
            {body}          = me.parent,
            rects           = await me.getDomRect(items.map(item => item.id)),
            lastItem        = rects[rects.length - 1],
            columnPositions = rects.map((item, index) => ({dataField: items[index].dataField, width: item.width, x: item.x - rects[0].x})),
            i               = 1,
            len             = columnPositions.length,
            layoutFinished  = true;

        // If the css sizing is not done, columns after the first one can get x = 0
        for (; i < len; i++) {
            if (columnPositions[i].x === 0) {
                layoutFinished = false;
                break;
            }
        }

        // Delay for slow connections, where the container-sizing is not done yet
        if (!layoutFinished) {
            await me.timeout(100);
            await me.passSizeToBody(silent)
        } else {
            body.columnPositions.clear();
            body.columnPositions.add(columnPositions);

            body[silent ? 'setSilent' : 'set']({
                availableWidth: lastItem.x + lastItem.width - rects[0].x
            });

            !silent && body.updateMountedAndVisibleColumns()
        }
    }

    /**
     * @param {Number}  index
     * @returns {Promise<void>}
     */
    async scrollToIndex(index) {
        await Neo.main.DomAccess.scrollIntoView({
            delay   : 125,
            id      : this.items[index].id,
            windowId: this.windowId
        })
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(Toolbar));


/***/ }),

/***/ "./src/grid/header/_export.mjs":
/*!*************************************!*\
  !*** ./src/grid/header/_export.mjs ***!
  \*************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Button: () => (/* reexport safe */ _Button_mjs__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   Toolbar: () => (/* reexport safe */ _Toolbar_mjs__WEBPACK_IMPORTED_MODULE_1__["default"])
/* harmony export */ });
/* harmony import */ var _Button_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Button.mjs */ "./src/grid/header/Button.mjs");
/* harmony import */ var _Toolbar_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Toolbar.mjs */ "./src/grid/header/Toolbar.mjs");





/***/ }),

/***/ "./src/selection/Model.mjs":
/*!*********************************!*\
  !*** ./src/selection/Model.mjs ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/Base.mjs */ "./src/core/Base.mjs");
/* harmony import */ var _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/Array.mjs */ "./src/util/Array.mjs");
/* harmony import */ var _core_Observable_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/Observable.mjs */ "./src/core/Observable.mjs");
/* harmony import */ var _core_ConfigSymbols_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/ConfigSymbols.mjs */ "./src/core/ConfigSymbols.mjs");





/**
 * @class Neo.selection.Model
 * @extends Neo.core.Base
 * @mixes Neo.core.Observable
 */
class Model extends _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    /**
     * True automatically applies the core.Observable mixin
     * @member {Boolean} observable=true
     * @static
     */
    static observable = true

    static config = {
        /**
         * @member {String} className='Neo.selection.Model'
         * @protected
         */
        className: 'Neo.selection.Model',
        /**
         * @member {String} ntype='selection-model'
         * @protected
         */
        ntype: 'selection-model',
        /**
         * Placeholder for extended classes to add a custom css rule to this owner component
         * @member {String|null} cls=null
         * @protected
         */
        cls: null,
        /**
         * @member {Array} items_
         * @protected
         * @reactive
         */
        items_: {
            [_core_ConfigSymbols_mjs__WEBPACK_IMPORTED_MODULE_3__.isDescriptor]: true,
            clone         : 'shallow',
            cloneOnGet    : 'none',
            isEqual       : () => false,
            value         : []
        },
        /**
         * @member {String} selectedCls='selected'
         */
        selectedCls: 'neo-selected',
        /**
         * @member {Boolean} singleSelect=true
         */
        singleSelect: true,
        /**
         * Internally saves the view id, but the getter will return the matching instance
         * @member {Object} view_=null
         * @protected
         * @reactive
         */
        view_: null
    }

    /**
     * Gets triggered before getting the value of the view config
     * @param {String} value
     * @returns {Neo.component.Base}
     */
    beforeGetView(value) {
        return Neo.getComponent(this._view)
    }

    /**
     * Gets triggered before setting the value of the view config
     * @returns {String} the view id
     */
    beforeSetView(value) {
        return value && value.id
    }

    /**
     *
     */
    addDomListener() {}

    /**
     * @param {Object} item
     * @param {Boolean} [silent] true to prevent a vdom update
     * @param {Object[]|String[]} itemCollection=this.items
     * @param {String} [selectedCls]
     */
    deselect(item, silent, itemCollection=this.items, selectedCls) {
        let me     = this,
            {view} = me,
            node;

        // We hold vdom ids for now, so all incoming selections must be converted.
        item = item.isRecord ? view.getItemId(item) : Neo.isObject(item) ? item.id : item;

        if (itemCollection.includes(item)) {
            node = view.getVdomChild(item);

            if (node) {
                node.cls = _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].remove(node.cls || [], selectedCls || me.selectedCls);
                delete node['aria-selected']
            }

            _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].remove(itemCollection, item);

            if (!silent) {
                view.update();

                view.parent?.onDeselect?.(); // grid.Container & table.Container
                view.onDeselect?.();

                me.fire('selectionChange', {
                    selection: itemCollection
                })
            }
        } else if (!silent) {
            me.fire('noChange')
        }
    }

    /**
     * @param {Boolean} [silent] true to prevent a vdom update
     * @param {Object[]|String[]} itemCollection=this.items
     */
    deselectAll(silent, itemCollection=this.items) {
        let me     = this,
            items  = [...itemCollection],
            {view} = me;

        if (items.length) {
            items.forEach(item => {
                me.deselect(item, true)
            });

            if (!silent && items.length > 0) {
                view.update()
            }

            me.fire('selectionChange', {
                selection: this.items
            })
        } else if (!silent) {
            me.fire('noChange')
        }
    }

    /**
     *
     */
    destroy(...args) {
        this.unregister();
        super.destroy(...args)
    }

    /**
     * Important for mapping listeners to view controllers
     * @returns {Neo.controller.Component|null}
     */
    getController() {
        return this.view.getController()
    }

    /**
     * @returns {Array} this.items
     */
    getSelection() {
        return this.items
    }

    /**
     * @returns {Boolean}
     */
    hasSelection() {
        return this.items.length > 0
    }

    /**
     * @param {String} id
     * @returns {Boolean} true in case the item is selected
     */
    isSelected(id) {
        return this.items.includes(id)
    }

    /**
     * @param {Neo.component.Base} component
     */
    register(component) {
        let me  = this,
            cls = component.wrapperCls || [];

        if (me.cls && !cls.includes(me.cls)) {
            cls.push(me.cls);
            component.wrapperCls = cls
        }

        me.view = component;
        me.addDomListener();

        component.fire('selectionModelChange', {
            value: me
        })
    }

    /**
     *
     */
    removeDomListeners() {
        let me           = this,
            component    = me.view,
            domListeners = [...component.domListeners];

        component.domListeners.forEach(listener => {
            if (listener.scope === me) {
                _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].remove(domListeners, listener)
            }
        });

        component.domListeners = domListeners
    }

    /**
     * @param {Object|Object[]|String[]} items
     * @param {Object[]|String[]} itemCollection=this.items
     * @param {String} [selectedCls]
     */
    select(items, itemCollection=this.items, selectedCls) {
        if (!Array.isArray(items)) {
            items = [items]
        }

        let me      = this,
            {view}  = me,
            records = [...items]; // Potential records

        // We hold vdom ids for now, so all incoming selections must be converted.
        items = items.map(item => item.isRecord ? view.getItemId(item) : Neo.isObject(item) ? item.id : item);

        if (!Neo.isEqual(itemCollection, items)) {
            if (me.singleSelect && itemCollection === me.items) {
                me.deselectAll(true, itemCollection)
            }

            items.forEach(node => {
                node = view.getVdomChild(node);

                if (node) {
                    node.cls = _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].add(node.cls || [], selectedCls || me.selectedCls);
                    node['aria-selected'] = true
                }
            });

            _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].add(itemCollection, items);

            if (!view.silentSelect) {
                view.update()
            }

            view.parent?.onSelect?.(items); // grid.Container & table.Container
            view.onSelect?.(items);

            me.fire('selectionChange', {
                records,
                selection: itemCollection
            })
        }
        else {
            me.fire('noChange')
        }
    }

    /**
     * @param {Object} item
     */
    toggleSelection(item) {
        let me = this;

        if (me.isSelected(item)) {
            me.deselect(item)
        } else {
            me.select(item)
        }
    }

    /**
     *
     */
    unregister() {
        let me  = this,
            cls = me.view.wrapperCls || [];

        if (me.cls && cls.includes(me.cls)) {
            _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].remove(cls, me.cls);
            me.view.wrapperCls = cls
        }

        me.deselectAll();

        me.removeDomListeners()
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(Model));


/***/ }),

/***/ "./src/selection/grid/BaseModel.mjs":
/*!******************************************!*\
  !*** ./src/selection/grid/BaseModel.mjs ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Model_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Model.mjs */ "./src/selection/Model.mjs");
/* harmony import */ var _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/Array.mjs */ "./src/util/Array.mjs");



/**
 * Abstract base class for all grid related selection models
 * @class Neo.selection.grid.BaseModel
 * @extends Neo.selection.Model
 * @abstract
 */
class BaseModel extends _Model_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.selection.grid.BaseModel'
         * @protected
         */
        className: 'Neo.selection.grid.BaseModel',
        /**
         * Storing the column dataFields
         * @member {String[]} selectedColumns=[]
         */
        selectedColumns: [],
        /**
         * Storing the record ids
         * @member {Number[]|String[]} selectedRows=[]
         * @protected
         */
        selectedRows: []
    }

    /**
     * Convenience shortcut
     * @member {String[]} dataFields
     */
    get dataFields() {
        return this.view.parent.columns.items.map(column => column.dataField)
    }

    /**
     * @param {Boolean} [silent=false] true to prevent a vdom update
     */
    deselectAllRows(silent=false) {
        let me     = this,
            items  = [...me.selectedRows],
            {view} = me;

        if (items.length) {
            items.forEach(item => {
                me.deselectRow(item, true)
            });

            if (!silent && items.length > 0) {
                view.update()
            }

            me.fire('selectionChange', {
                records  : me.selectedRows.map(id => view.store.get(id)),
                selection: me.selectedRows
            })
        } else if (!silent) {
            me.fire('noChange')
        }
    }

    /**
     * @param {Number|String} recordId
     * @param {Boolean}       [silent=false]
     */
    deselectRow(recordId, silent=false) {
        let me      = this,
            {view}  = me,
            {store} = view,
            record  = store.get(recordId),
            rowId   = view.getRowId(store.indexOf(record)),
            node    = view.getVdomChild(rowId);

        if (node) {
            node.cls = _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].remove(node.cls || [], me.selectedCls);
            delete node['aria-selected']
        }

        me.selectedRows = [recordId];

        !silent && view.update()
    }

    /**
     * Get the record for a given event path
     * @param {Object[]} path
     * @returns {Number|String|null}
     */
    getRecord(path) {
        let node, rowIndex;

        for (node of path) {
            if (node.aria.rowindex) {
                rowIndex = parseInt(node.aria.rowindex);

                // aria-rowindex is 1 based & also includes the header
                rowIndex -= 2;

                return this.view.store.getAt(rowIndex)
            }
        }

        return null
    }

    /**
     * @param {Record} record
     * @returns {Boolean}
     */
    hasAnnotations(record) {
        return !!Object.getOwnPropertyDescriptor(record.__proto__, this.view.selectedRecordField)
    }

    /**
     * Checks if an event path contains a grid cell editor
     * @param {Object}   data
     * @param {Object[]} data.path
     * @returns {Boolean}
     */
    hasEditorFocus({path}) {
        for (const node of path) {
            if (node.cls?.includes('neo-grid-editor')) {
                return true
            }
        }

        return false
    }

    /**
     * @param {String} dataField
     * @returns {Boolean} true in case the column is selected
     */
    isSelectedColumn(dataField) {
        return this.selectedColumns.includes(dataField)
    }

    /**
     * @param {Number|String} recordId
     * @returns {Boolean} true in case the row is selected
     */
    isSelectedRow(recordId) {
        return this.selectedRows.includes(recordId)
    }

    /**
     * @param {Number|String} recordId
     * @param {Boolean}       [silent=false]
     */
    selectRow(recordId, silent=false) {
        let me      = this,
            {view}  = me,
            {store} = view,
            record  = store.get(recordId),
            rowId   = view.getRowId(store.indexOf(record)),
            node    = view.getVdomChild(rowId);

        if (me.singleSelect) {
            me.deselectAllRows(true)
        }

        if (node) {
            node.cls = _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].add(node.cls || [], me.selectedCls);
            node['aria-selected'] = true
        }

        me.selectedRows = [recordId];

        !silent && view.update()
    }

    /**
     * @param {Number|String} recordId
     * @param {Boolean}       [silent=false]
     */
    toggleRowSelection(recordId, silent=false) {
        this[this.isSelectedRow(recordId) ? 'deselectRow' : 'selectRow'](recordId, silent)
    }

    /**
     *
     */
    unregister() {
        let me        = this,
            countRows = me.selectedRows.length;

        me.selectedRows = [];

        countRows > 0 && me.view.createViewData();

        super.unregister()
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(BaseModel));


/***/ }),

/***/ "./src/selection/grid/RowModel.mjs":
/*!*****************************************!*\
  !*** ./src/selection/grid/RowModel.mjs ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _BaseModel_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BaseModel.mjs */ "./src/selection/grid/BaseModel.mjs");


/**
 * @class Neo.selection.grid.RowModel
 * @extends Neo.selection.grid.BaseModel
 */
class RowModel extends _BaseModel_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.selection.grid.RowModel'
         * @protected
         */
        className: 'Neo.selection.grid.RowModel',
        /**
         * @member {String} ntype='selection-grid-rowmodel'
         * @protected
         */
        ntype: 'selection-grid-rowmodel',
        /**
         * @member {String} cls='neo-selection-rowmodel'
         * @protected
         */
        cls: 'neo-selection-rowmodel'
    }

    /**
     *
     */
    addDomListener() {
        let me = this;

        me.view.parent.on('rowClick', me.onRowClick, me)
    }

    /**
     * @param args
     */
    destroy(...args) {
        let me = this;

        me.view.parent.un('rowClick', me.onRowClick, me);

        super.destroy(...args)
    }

    /**
     * @param {Object} data
     */
    onKeyDownDown(data) {
        !this.hasEditorFocus(data) && this.onNavKeyRow(1)
    }

    /**
     * @param {Object} data
     */
    onKeyDownUp(data) {
        !this.hasEditorFocus(data) && this.onNavKeyRow(-1)
    }

    /**
     * @param {Number} step
     */
    onNavKeyRow(step) {
        let me           = this,
            {view}       = me,
            {store}      = view,
            countRecords = store.getCount(),
            keyProperty  = store.getKeyProperty(),
            recordId     = me.selectedRows[0] || store.getAt(0)[keyProperty],
            record       = store.get(recordId),
            index        = store.indexOf(record),
            newIndex     = (index + step) % countRecords;

        while (newIndex < 0) {
            newIndex += countRecords
        }

        record = store.getAt(newIndex);

        if (me.hasAnnotations(record)) {
            me.updateAnnotations(record)
        } else {
            recordId = record[keyProperty];

            if (recordId) {
                me.selectRow(recordId);

                view.scrollByRows(index, step);
                view.fire('select', {record})
            }
        }
    }

    /**
     * @param {Object} data
     */
    onRowClick({data}) {
        let me     = this,
            {view} = me,
            record = me.getRecord(data.path),
            recordId;

        if (record) {
            if (me.hasAnnotations(record)) {
                me.updateAnnotations(record)
            } else {
                recordId = record[view.store.getKeyProperty()];

                me.toggleRowSelection(recordId);

                view.fire(me.isSelectedRow(recordId) ? 'select' : 'deselect', {record})
            }
        }
    }

    /**
     * @param {Neo.component.Base} component
     */
    register(component) {
        super.register(component);

        let {id, view} = this;

        view.keys?._keys.push(
            {fn: 'onKeyDownDown', key: 'Down', scope: id},
            {fn: 'onKeyDownUp',   key: 'Up',   scope: id}
        )
    }

    /**
     *
     */
    unregister() {
        let {id, view} = this;

        view.keys?.removeKeys([
            {fn: 'onKeyDownDown', key: 'Down', scope: id},
            {fn: 'onKeyDownUp',   key: 'Up',   scope: id}
        ]);

        super.unregister()
    }

    /**
     * @param {Record} record
     */
    updateAnnotations(record) {
        let me               = this,
            {view}           = me,
            {store}          = view,
            recordId         = record[store.getKeyProperty()],
            isSelected       = me.isSelectedRow(recordId),
            annotationsField = view.selectedRecordField;

        if (me.singleSelect) {
            if (isSelected) {
                record[annotationsField] = false
            } else {
                me.selectedRows.forEach(recordId => {
                    // We can use setSilent(), since the last change will trigger a view update
                    store.get(recordId).setSilent({[annotationsField]: false})
                });

                record[annotationsField] = true
            }
        } else {
            record[annotationsField] = !record[annotationsField]
        }
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(RowModel));


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2h1bmtzL2FwcC92ZW5kb3JzLXNyY19ncmlkX0NvbnRhaW5lcl9tanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBeUM7O0FBRXpDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLDJEQUFJO0FBQzNCO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFVBQVU7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsYUFBYTtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGFBQWE7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0EsU0FBUztBQUNULGFBQWEsYUFBYTtBQUMxQixhQUFhO0FBQ2I7QUFDQTs7QUFFQTtBQUNBLGdCQUFnQixRQUFRO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWUsYUFBYTtBQUM1QixlQUFlLGFBQWE7QUFDNUI7QUFDQTtBQUNBO0FBQ0EsYUFBYSxPQUFPOztBQUVwQjtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZSxhQUFhO0FBQzVCLGVBQWUsYUFBYTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNB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O0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQSxlQUFlLFNBQVM7QUFDeEIsZUFBZSxTQUFTO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxpTUFBa0M7QUFDOUM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7O0FBRWpCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWUsVUFBVTtBQUN6QixlQUFlLFVBQVU7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7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QUFZO0FBQ3pCLGFBQWEsWUFBWTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLHFDQUFxQyxPQUFPO0FBQzVDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBLGdCQUFnQixLQUFLO0FBQ3JCO0FBQ0EsYUFBYSxNQUFNO0FBQ25CO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkOztBQUVBOztBQUVBLCtFQUErRSxPQUFPO0FBQ3RGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGVBQWUsb0JBQW9CO0FBQ25DO0FBQ0E7QUFDQTs7QUFFQSxhQUFhLFVBQVU7O0FBRXZCO0FBQ0EsYUFBYSw0Q0FBNEM7QUFDekQsYUFBYTtBQUNiO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFVBQVU7O0FBRXZCO0FBQ0EsYUFBYSw0Q0FBNEM7QUFDekQsYUFBYTtBQUNiOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0EsYUFBYSxnQkFBZ0I7QUFDN0IsYUFBYSxnQkFBZ0I7QUFDN0I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0EsbURBQW1ELDBCQUEwQjtBQUM3RSxpQkFBaUI7O0FBRWpCO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsaUVBQWUsd0JBQXdCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZW8ubWpzLy4vc3JjL2NvbXBvbmVudC9Qcm9ncmVzcy5tanMiLCJ3ZWJwYWNrOi8vbmVvLm1qcy8uL3NyYy9ncmlkL0JvZHkubWpzIiwid2VicGFjazovL25lby5tanMvLi9zcmMvZ3JpZC9Db250YWluZXIubWpzIiwid2VicGFjazovL25lby5tanMvLi9zcmMvZ3JpZC9TY3JvbGxNYW5hZ2VyLm1qcyIsIndlYnBhY2s6Ly9uZW8ubWpzLy4vc3JjL2dyaWQvVmVydGljYWxTY3JvbGxiYXIubWpzIiwid2VicGFjazovL25lby5tanMvLi9zcmMvZ3JpZC9jb2x1bW4vQW5pbWF0ZWRDaGFuZ2UubWpzIiwid2VicGFjazovL25lby5tanMvLi9zcmMvZ3JpZC9jb2x1bW4vQW5pbWF0ZWRDdXJyZW5jeS5tanMiLCJ3ZWJwYWNrOi8vbmVvLm1qcy8uL3NyYy9ncmlkL2NvbHVtbi9CYXNlLm1qcyIsIndlYnBhY2s6Ly9uZW8ubWpzLy4vc3JjL2dyaWQvY29sdW1uL0NvbXBvbmVudC5tanMiLCJ3ZWJwYWNrOi8vbmVvLm1qcy8uL3NyYy9ncmlkL2NvbHVtbi9DdXJyZW5jeS5tanMiLCJ3ZWJwYWNrOi8vbmVvLm1qcy8uL3NyYy9ncmlkL2NvbHVtbi9JbmRleC5tanMiLCJ3ZWJwYWNrOi8vbmVvLm1qcy8uL3NyYy9ncmlkL2NvbHVtbi9Qcm9ncmVzcy5tanMiLCJ3ZWJwYWNrOi8vbmVvLm1qcy8uL3NyYy9ncmlkL2NvbHVtbi9fZXhwb3J0Lm1qcyIsIndlYnBhY2s6Ly9uZW8ubWpzLy4vc3JjL2dyaWQvaGVhZGVyL0J1dHRvbi5tanMiLCJ3ZWJwYWNrOi8vbmVvLm1qcy8uL3NyYy9ncmlkL2hlYWRlci9Ub29sYmFyLm1qcyIsIndlYnBhY2s6Ly9uZW8ubWpzLy4vc3JjL2dyaWQvaGVhZGVyL19leHBvcnQubWpzIiwid2VicGFjazovL25lby5tanMvLi9zcmMvc2VsZWN0aW9uL01vZGVsLm1qcyIsIndlYnBhY2s6Ly9uZW8ubWpzLy4vc3JjL3NlbGVjdGlvbi9ncmlkL0Jhc2VNb2RlbC5tanMiLCJ3ZWJwYWNrOi8vbmVvLm1qcy8uL3NyYy9zZWxlY3Rpb24vZ3JpZC9Sb3dNb2RlbC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJhc2UgZnJvbSAnLi4vY29tcG9uZW50L0Jhc2UubWpzJztcblxuLyoqXG4gKiBAY2xhc3MgTmVvLmNvbXBvbmVudC5Qcm9ncmVzc1xuICogQGV4dGVuZHMgTmVvLmNvbXBvbmVudC5CYXNlXG4gKi9cbmNsYXNzIFByb2dyZXNzIGV4dGVuZHMgQmFzZSB7XG4gICAgc3RhdGljIGNvbmZpZyA9IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gY2xhc3NOYW1lPSdOZW8uY29tcG9uZW50LlByb2dyZXNzJ1xuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBjbGFzc05hbWU6ICdOZW8uY29tcG9uZW50LlByb2dyZXNzJyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gbnR5cGU9J3Byb2dyZXNzJ1xuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBudHlwZTogJ3Byb2dyZXNzJyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ1tdfSBiYXNlQ2xzPVsnbmVvLXByb2dyZXNzLWxhYmVsJ11cbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgYmFzZUNsczogWyduZW8tcHJvZ3Jlc3MnXSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ3xudWxsfSBsYWJlbFRleHRfPW51bGxcbiAgICAgICAgICogQHJlYWN0aXZlXG4gICAgICAgICAqL1xuICAgICAgICBsYWJlbFRleHRfOiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7TnVtYmVyfSBtYXhfPTEwMFxuICAgICAgICAgKiBAcmVhY3RpdmVcbiAgICAgICAgICovXG4gICAgICAgIG1heF86IDEwMCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge051bWJlcnxudWxsfSB2YWx1ZV89bnVsbFxuICAgICAgICAgKiBAcmVhY3RpdmVcbiAgICAgICAgICovXG4gICAgICAgIHZhbHVlXzogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge09iamVjdH0gX3Zkb21cbiAgICAgICAgICovXG4gICAgICAgIF92ZG9tOlxuICAgICAgICB7dGFnOiAnZGl2JywgY2xzOiBbJ25lby1wcm9ncmVzcy13cmFwcGVyJ10sIGNuOiBbXG4gICAgICAgICAgICB7dGFnOiAnbGFiZWwnfSxcbiAgICAgICAgICAgIHt0YWc6ICdwcm9ncmVzcyd9XG4gICAgICAgIF19XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG1lbWJlciB7T2JqZWN0fSBsYWJlbFxuICAgICAqL1xuICAgIGdldCBsYWJlbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmRvbS5jblswXVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyIHtPYmplY3R9IHByb2dyZXNzXG4gICAgICovXG4gICAgZ2V0IHByb2dyZXNzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52ZG9tLmNuWzFdXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIGFmdGVyIHRoZSBpZCBjb25maWcgZ290IGNoYW5nZWRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdmFsdWVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gb2xkVmFsdWVcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgYWZ0ZXJTZXRJZCh2YWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgc3VwZXIuYWZ0ZXJTZXRJZCh2YWx1ZSwgb2xkVmFsdWUpO1xuXG4gICAgICAgIHRoaXMubGFiZWwuZm9yID0gdmFsdWU7XG4gICAgICAgIHRoaXMudXBkYXRlKClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgYWZ0ZXIgdGhlIGxhYmVsVGV4dCBjb25maWcgZ290IGNoYW5nZWRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xudWxsfSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfG51bGx9IG9sZFZhbHVlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGFmdGVyU2V0TGFiZWxUZXh0KHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICBsZXQge2xhYmVsfSA9IHRoaXM7XG5cbiAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgbGFiZWwucmVtb3ZlRG9tID0gdHJ1ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGVsZXRlIGxhYmVsLnJlbW92ZURvbVxuICAgICAgICB9XG5cbiAgICAgICAgbGFiZWwudGV4dCA9IHZhbHVlO1xuICAgICAgICB0aGlzLnVwZGF0ZSgpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIGFmdGVyIHRoZSBtYXggY29uZmlnIGdvdCBjaGFuZ2VkXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG9sZFZhbHVlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGFmdGVyU2V0TWF4KHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICB0aGlzLnByb2dyZXNzLm1heCA9IHZhbHVlO1xuICAgICAgICB0aGlzLnVwZGF0ZSgpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIGFmdGVyIHRoZSB2YWx1ZSBjb25maWcgZ290IGNoYW5nZWRcbiAgICAgKiBAcGFyYW0ge051bWJlcnxudWxsfSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfG51bGx9IG9sZFZhbHVlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGFmdGVyU2V0VmFsdWUodmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgIHRoaXMucHJvZ3Jlc3MudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy51cGRhdGUoKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNwZWNpZnkgYSBkaWZmZXJlbnQgdmRvbSByb290IGlmIG5lZWRlZCB0byBhcHBseSB0aGUgdG9wIGxldmVsIHN0eWxlIGF0dHJpYnV0ZXMgb24gYSBkaWZmZXJlbnQgbGV2ZWwuXG4gICAgICogTWFrZSBzdXJlIHRvIHVzZSBnZXRWbm9kZVJvb3QoKSBhcyB3ZWxsLCB0byBrZWVwIHRoZSB2ZG9tICYgdm5vZGUgdHJlZXMgaW4gc3luYy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgbmV3IHZkb20gcm9vdFxuICAgICAqL1xuICAgIGdldFZkb21Sb290KCkge1xuICAgICAgICByZXR1cm4gdGhpcy52ZG9tLmNuWzFdXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3BlY2lmeSBhIGRpZmZlcmVudCB2bm9kZSByb290IGlmIG5lZWRlZCB0byBhcHBseSB0aGUgdG9wIGxldmVsIHN0eWxlIGF0dHJpYnV0ZXMgb24gYSBkaWZmZXJlbnQgbGV2ZWwuXG4gICAgICogTWFrZSBzdXJlIHRvIHVzZSBnZXRWZG9tUm9vdCgpIGFzIHdlbGwsIHRvIGtlZXAgdGhlIHZkb20gJiB2bm9kZSB0cmVlcyBpbiBzeW5jLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBuZXcgdm5vZGUgcm9vdFxuICAgICAqL1xuICAgIGdldFZub2RlUm9vdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudm5vZGUuY2hpbGROb2Rlc1sxXVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTmVvLnNldHVwQ2xhc3MoUHJvZ3Jlc3MpO1xuIiwiaW1wb3J0IENsYXNzU3lzdGVtVXRpbCBmcm9tICcuLi91dGlsL0NsYXNzU3lzdGVtLm1qcyc7XG5pbXBvcnQgQ29sbGVjdGlvbiAgICAgIGZyb20gJy4uL2NvbGxlY3Rpb24vQmFzZS5tanMnO1xuaW1wb3J0IENvbXBvbmVudCAgICAgICBmcm9tICcuLi9jb21wb25lbnQvQmFzZS5tanMnO1xuaW1wb3J0IE5lb0FycmF5ICAgICAgICBmcm9tICcuLi91dGlsL0FycmF5Lm1qcyc7XG5pbXBvcnQgUm93TW9kZWwgICAgICAgIGZyb20gJy4uL3NlbGVjdGlvbi9ncmlkL1Jvd01vZGVsLm1qcyc7XG5pbXBvcnQgVkRvbVV0aWwgICAgICAgIGZyb20gJy4uL3V0aWwvVkRvbS5tanMnO1xuXG4vKipcbiAqIEBjbGFzcyBOZW8uZ3JpZC5Cb2R5XG4gKiBAZXh0ZW5kcyBOZW8uY29tcG9uZW50LkJhc2VcbiAqL1xuY2xhc3MgR3JpZEJvZHkgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIHN0YXRpYyBjb25maWcgPSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IGNsYXNzTmFtZT0nTmVvLmdyaWQuQm9keSdcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgY2xhc3NOYW1lOiAnTmVvLmdyaWQuQm9keScsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IG50eXBlPSdncmlkLWJvZHknXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIG50eXBlOiAnZ3JpZC1ib2R5JyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge0Jvb2xlYW59IGFuaW1hdGVkUm93U29ydGluZ189ZmFsc2VcbiAgICAgICAgICogQHJlYWN0aXZlXG4gICAgICAgICAqL1xuICAgICAgICBhbmltYXRlZFJvd1NvcnRpbmdfOiBmYWxzZSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEludGVybmFsIGZsYWcuIEdldHMgY2FsY3VsYXRlZCB3aGVuIG1vdW50aW5nIHRoZSBncmlkLkNvbnRhaW5lclxuICAgICAgICAgKiBAbWVtYmVyIHtOdW1iZXJ9IGF2YWlsYWJsZUhlaWdodF89MFxuICAgICAgICAgKiBAcmVhY3RpdmVcbiAgICAgICAgICovXG4gICAgICAgIGF2YWlsYWJsZUhlaWdodF86IDAsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbnRlcm5hbCBmbGFnLiBHZXRzIGNhbGN1bGF0ZWQgd2hlbiBjaGFuZ2luZyB0aGUgYXZhaWxhYmxlSGVpZ2h0IGNvbmZpZ1xuICAgICAgICAgKiBAbWVtYmVyIHtOdW1iZXJ9IGF2YWlsYWJsZVJvd3NfPTBcbiAgICAgICAgICogQHJlYWN0aXZlXG4gICAgICAgICAqL1xuICAgICAgICBhdmFpbGFibGVSb3dzXzogMCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEludGVybmFsIGZsYWcuIEdldHMgY2FsY3VsYXRlZCBhZnRlciBtb3VudGluZyBncmlkLkJvZHkgcm93c1xuICAgICAgICAgKiBAbWVtYmVyIHtOdW1iZXJ9IGF2YWlsYWJsZVdpZHRoXz0wXG4gICAgICAgICAqIEByZWFjdGl2ZVxuICAgICAgICAgKi9cbiAgICAgICAgYXZhaWxhYmxlV2lkdGhfOiAwLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nW119IGJhc2VDbHM9WyduZW8tZ3JpZC1ib2R5J11cbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgYmFzZUNsczogWyduZW8tZ3JpZC1ib2R5J10sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgbnVtYmVyIG9mIGNvbHVtbnMgKGNlbGxzKSB0byBwYWludCBiZWZvcmUgdGhlIGZpcnN0IGFuZCBhZnRlciB0aGUgbGFzdCB2aXNpYmxlIGNvbHVtbixcbiAgICAgICAgICogdG8gZW5oYW5jZSB0aGUgc2Nyb2xsaW5nIHBlcmZvcm1hbmNlXG4gICAgICAgICAqIEBtZW1iZXIge051bWJlcn0gYnVmZmVyQ29sdW1uUmFuZ2VfPTBcbiAgICAgICAgICogQHJlYWN0aXZlXG4gICAgICAgICAqL1xuICAgICAgICBidWZmZXJDb2x1bW5SYW5nZV86IDAsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgbnVtYmVyIG9mIHJvd3MgdG8gcGFpbnQgYmVmb3JlIHRoZSBmaXJzdCBhbmQgYWZ0ZXIgdGhlIGxhc3QgdmlzaWJsZSByb3csXG4gICAgICAgICAqIHRvIGVuaGFuY2UgdGhlIHNjcm9sbGluZyBwZXJmb3JtYW5jZVxuICAgICAgICAgKiBAbWVtYmVyIHtOdW1iZXJ9IGJ1ZmZlclJvd1JhbmdlXz0zXG4gICAgICAgICAqIEByZWFjdGl2ZVxuICAgICAgICAgKi9cbiAgICAgICAgYnVmZmVyUm93UmFuZ2VfOiAzLFxuICAgICAgICAvKipcbiAgICAgICAgICogRGVmaW5lIHdoaWNoIG1vZGVsIGZpZWxkIGNvbnRhaW5zIHRoZSB2YWx1ZSBvZiBjb2xzcGFuIGRlZmluaXRpb25zXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gY29sc3BhbkZpZWxkPSdjb2xzcGFuJ1xuICAgICAgICAgKi9cbiAgICAgICAgY29sc3BhbkZpZWxkOiAnY29sc3BhbicsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbnRlcm5hbCBmbGFnLiBHZXRzIGNhbGN1bGF0ZWQgYWZ0ZXIgbW91bnRpbmcgZ3JpZC5Cb2R5IHJvd3NcbiAgICAgICAgICogQG1lbWJlciB7TnVtYmVyfSBjb250YWluZXJXaWR0aF89MFxuICAgICAgICAgKiBAcmVhY3RpdmVcbiAgICAgICAgICovXG4gICAgICAgIGNvbnRhaW5lcldpZHRoXzogMCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge05lby5jb2xsZWN0aW9uLkJhc2V8bnVsbH0gY29sdW1uUG9zaXRpb25zXz1udWxsXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICogQHJlYWN0aXZlXG4gICAgICAgICAqL1xuICAgICAgICBjb2x1bW5Qb3NpdGlvbnNfOiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7Qm9vbGVhbn0gaGlnaGxpZ2h0TW9kaWZpZWRDZWxsc189ZmFsc2VcbiAgICAgICAgICogQHJlYWN0aXZlXG4gICAgICAgICAqL1xuICAgICAgICBoaWdobGlnaHRNb2RpZmllZENlbGxzXzogZmFsc2UsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtCb29sZWFufSBpc1Njcm9sbGluZ189ZmFsc2VcbiAgICAgICAgICogQHJlYWN0aXZlXG4gICAgICAgICAqL1xuICAgICAgICBpc1Njcm9sbGluZ186IGZhbHNlLFxuICAgICAgICAvKipcbiAgICAgICAgICogQWRkaXRpb25hbCB1c2VkIGtleXMgZm9yIHRoZSBzZWxlY3Rpb24gbW9kZWxcbiAgICAgICAgICogQG1lbWJlciB7T2JqZWN0fSBrZXlzXG4gICAgICAgICAqL1xuICAgICAgICBrZXlzOiB7fSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFN0b3JlcyB0aGUgaW5kZXhlcyBvZiB0aGUgZmlyc3QgJiBsYXN0IG1vdW50ZWQgY29sdW1ucywgaW5jbHVkaW5nIGJ1ZmZlckNvbHVtblJhbmdlXG4gICAgICAgICAqIEBtZW1iZXIge051bWJlcltdfSBtb3VudGVkQ29sdW1uc189WzAsMF1cbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKiBAcmVhY3RpdmVcbiAgICAgICAgICovXG4gICAgICAgIG1vdW50ZWRDb2x1bW5zXzogWzAsIDBdLFxuICAgICAgICAvKipcbiAgICAgICAgICogU3RvcmVzIHRoZSBpbmRleGVzIG9mIHRoZSBmaXJzdCAmIGxhc3QgbW91bnRlZCByb3dzLCBpbmNsdWRpbmcgYnVmZmVyUm93UmFuZ2VcbiAgICAgICAgICogQG1lbWJlciB7TnVtYmVyW119IG1vdW50ZWRSb3dzPVswLDBdXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIG1vdW50ZWRSb3dzOiBbMCwgMF0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBPcHRpb25hbCBjb25maWcgdmFsdWVzIGZvciBOZW8uZ3JpZC5wbHVnaW4uQW5pbWF0ZVJvd3NcbiAgICAgICAgICogQG1lbWJlciB7T2JqZWN0fSBwbHVnaW5BbmltYXRlUm93c0NvbmZpZz1udWxsXG4gICAgICAgICAqL1xuICAgICAgICBwbHVnaW5BbmltYXRlUm93c0NvbmZpZzogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gcm9sZT0ncm93Z3JvdXAnXG4gICAgICAgICAqIEByZWFjdGl2ZVxuICAgICAgICAgKi9cbiAgICAgICAgcm9sZTogJ3Jvd2dyb3VwJyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE51bWJlciBpbiBweFxuICAgICAgICAgKiBAbWVtYmVyIHtOdW1iZXJ9IHJvd0hlaWdodF89MFxuICAgICAgICAgKiBAcmVhY3RpdmVcbiAgICAgICAgICovXG4gICAgICAgIHJvd0hlaWdodF86IDAsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtOdW1iZXJ9IHNjcm9sbExlZnRfPTBcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKiBAcmVhY3RpdmVcbiAgICAgICAgICovXG4gICAgICAgIHNjcm9sbExlZnRfOiAwLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7TnVtYmVyfSBzY3JvbGxUb3BfPTBcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKiBAcmVhY3RpdmVcbiAgICAgICAgICovXG4gICAgICAgIHNjcm9sbFRvcF86IDAsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtOZW8uc2VsZWN0aW9uLk1vZGVsfSBzZWxlY3Rpb25Nb2RlbF89bnVsbFxuICAgICAgICAgKiBAcmVhY3RpdmVcbiAgICAgICAgICovXG4gICAgICAgIHNlbGVjdGlvbk1vZGVsXzogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gc2VsZWN0ZWRSZWNvcmRGaWVsZD0nYW5ub3RhdGlvbnMuc2VsZWN0ZWQnXG4gICAgICAgICAqL1xuICAgICAgICBzZWxlY3RlZFJlY29yZEZpZWxkOiAnYW5ub3RhdGlvbnMuc2VsZWN0ZWQnLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7TnVtYmVyfSBzdGFydEluZGV4Xz0wXG4gICAgICAgICAqIEByZWFjdGl2ZVxuICAgICAgICAgKi9cbiAgICAgICAgc3RhcnRJbmRleF86IDAsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtOZW8uZGF0YS5TdG9yZXxudWxsfSBzdG9yZV89bnVsbFxuICAgICAgICAgKiBAcmVhY3RpdmVcbiAgICAgICAgICovXG4gICAgICAgIHN0b3JlXzogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFN0b3JlcyB0aGUgaW5kZXhlcyBvZiB0aGUgZmlyc3QgJiBsYXN0IHBhaW50ZWQgY29sdW1uc1xuICAgICAgICAgKiBAbWVtYmVyIHtOdW1iZXJbXX0gdmlzaWJsZUNvbHVtbnM9WzAsMF1cbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgdmlzaWJsZUNvbHVtbnM6IFswLCAwXSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFN0b3JlcyB0aGUgaW5kZXhlcyBvZiB0aGUgZmlyc3QgJiBsYXN0IHZpc2libGUgcm93cywgZXhjbHVkaW5nIGJ1ZmZlclJvd1JhbmdlXG4gICAgICAgICAqIEBtZW1iZXIge051bWJlcltdfSB2aXNpYmxlUm93cz1bMCwwXVxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICB2aXNpYmxlUm93czogWzAsIDBdLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nW119IHdyYXBwZXJDbHM9WyduZW8tZ3JpZC1ib2R5LXdyYXBwZXInXVxuICAgICAgICAgKiBAcmVhY3RpdmVcbiAgICAgICAgICovXG4gICAgICAgIHdyYXBwZXJDbHM6IFsnbmVvLWdyaWQtYm9keS13cmFwcGVyJ10sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtPYmplY3R9IF92ZG9tXG4gICAgICAgICAqL1xuICAgICAgICBfdmRvbTpcbiAgICAgICAge3RhYkluZGV4OiAnLTEnLCBjbjogW1xuICAgICAgICAgICAge2NuOiBbXX1cbiAgICAgICAgXX1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnRlcm5hbCBmbGFnIHRvIGFkb3B0IHRvIHN0b3JlLmFkZCgpIHBhc3NpbmcgYW4gaW5pdGlhbCBjaHVuay5cbiAgICAgKiBAbWVtYmVyIHtOdW1iZXJ9ICNpbml0aWFsQ2h1bmtTaXplPTBcbiAgICAgKi9cbiAgICAjaW5pdGlhbENodW5rU2l6ZSA9IDBcbiAgICAvKipcbiAgICAgKiBJbnRlcm5hbCBmbGFnIHRvIGFkb3B0IHRvIHN0b3JlLmFkZCgpIHBhc3NpbmcgYW4gaW5pdGlhbCBjaHVuay5cbiAgICAgKiBAbWVtYmVyIHtOdW1iZXJ9ICNpbml0aWFsQ2h1bmtTaXplPTBcbiAgICAgKi9cbiAgICAjaW5pdGlhbFRvdGFsU2l6ZSA9IDBcblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXIge1N0cmluZ1tdfSBzZWxlY3RlZENlbGxzXG4gICAgICovXG4gICAgZ2V0IHNlbGVjdGVkQ2VsbHMoKSB7XG4gICAgICAgIGxldCB7c2VsZWN0aW9uTW9kZWx9ID0gdGhpcztcblxuICAgICAgICBpZiAoc2VsZWN0aW9uTW9kZWwubnR5cGU/LmluY2x1ZGVzKCdjZWxsJykpIHtcbiAgICAgICAgICAgIHJldHVybiBzZWxlY3Rpb25Nb2RlbC5pdGVtc1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFtdXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG1lbWJlciB7U3RyaW5nW119IHNlbGVjdGVkUm93c1xuICAgICAqL1xuICAgIGdldCBzZWxlY3RlZFJvd3MoKSB7XG4gICAgICAgIGxldCB7c2VsZWN0aW9uTW9kZWx9ID0gdGhpcztcblxuICAgICAgICBpZiAoc2VsZWN0aW9uTW9kZWwubnR5cGU/LmluY2x1ZGVzKCdyb3cnKSkge1xuICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGlvbk1vZGVsLnNlbGVjdGVkUm93c1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFtdXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIGNvbmZpZ1xuICAgICAqL1xuICAgIGNvbnN0cnVjdChjb25maWcpIHtcbiAgICAgICAgc3VwZXIuY29uc3RydWN0KGNvbmZpZyk7XG5cbiAgICAgICAgbGV0IG1lID0gdGhpcztcblxuICAgICAgICBtZS5hZGREb21MaXN0ZW5lcnMoW3tcbiAgICAgICAgICAgIGNsaWNrICAgOiBtZS5vbkNlbGxDbGljayxcbiAgICAgICAgICAgIGRibGNsaWNrOiBtZS5vbkNlbGxEb3VibGVDbGljayxcbiAgICAgICAgICAgIGRlbGVnYXRlOiAnLm5lby1ncmlkLWNlbGwnLFxuICAgICAgICAgICAgc2NvcGUgICA6IG1lXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGNsaWNrICAgOiBtZS5vblJvd0NsaWNrLFxuICAgICAgICAgICAgZGJsY2xpY2s6IG1lLm9uUm93RG91YmxlQ2xpY2ssXG4gICAgICAgICAgICBkZWxlZ2F0ZTogJy5uZW8tZ3JpZC1yb3cnLFxuICAgICAgICAgICAgc2NvcGUgICA6IG1lXG4gICAgICAgIH1dKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJlZCBhZnRlciB0aGUgYW5pbWF0ZWRSb3dTb3J0aW5nIGNvbmZpZyBnb3QgY2hhbmdlZFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gdmFsdWVcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IG9sZFZhbHVlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGFmdGVyU2V0QW5pbWF0ZWRSb3dTb3J0aW5nKHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgJiYgIXRoaXMuZ2V0UGx1Z2luKCdncmlkLWFuaW1hdGUtcm93cycpKSB7XG4gICAgICAgICAgICBpbXBvcnQoJy4vcGx1Z2luL0FuaW1hdGVSb3dzLm1qcycpLnRoZW4obW9kdWxlID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgbWUgICAgICA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIHBsdWdpbnMgPSBtZS5wbHVnaW5zIHx8IFtdO1xuXG4gICAgICAgICAgICAgICAgcGx1Z2lucy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgbW9kdWxlOiBtb2R1bGUuZGVmYXVsdCxcbiAgICAgICAgICAgICAgICAgICAgLi4ubWUucGx1Z2luQW5pbWF0ZVJvd3NDb25maWdcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIG1lLnBsdWdpbnMgPSBwbHVnaW5zXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIGFmdGVyIHRoZSBhdmFpbGFibGVIZWlnaHQgY29uZmlnIGdvdCBjaGFuZ2VkXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG9sZFZhbHVlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGFmdGVyU2V0QXZhaWxhYmxlSGVpZ2h0KHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgPiAwKSB7XG4gICAgICAgICAgICB0aGlzLmF2YWlsYWJsZVJvd3MgPSBNYXRoLmNlaWwodmFsdWUgLyB0aGlzLnJvd0hlaWdodCkgLSAxXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgYWZ0ZXIgdGhlIGF2YWlsYWJsZVJvd3MgY29uZmlnIGdvdCBjaGFuZ2VkXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG9sZFZhbHVlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGFmdGVyU2V0QXZhaWxhYmxlUm93cyh2YWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgdmFsdWUgPiAwICYmIHRoaXMuY3JlYXRlVmlld0RhdGEoKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJlZCBhZnRlciB0aGUgYXZhaWxhYmxlV2lkdGggY29uZmlnIGdvdCBjaGFuZ2VkXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG9sZFZhbHVlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGFmdGVyU2V0QXZhaWxhYmxlV2lkdGgodmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSA+IDApIHtcbiAgICAgICAgICAgIGxldCBtZSA9IHRoaXM7XG5cbiAgICAgICAgICAgIG1lLnZkb20ud2lkdGggPSB2YWx1ZSArICdweCc7XG4gICAgICAgICAgICBtZS52ZG9tLmNuWzBdLndpZHRoID0gdmFsdWUgKyAncHgnO1xuICAgICAgICAgICAgbWUudXBkYXRlKClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJlZCBhZnRlciB0aGUgYnVmZmVyQ29sdW1uUmFuZ2UgY29uZmlnIGdvdCBjaGFuZ2VkXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG9sZFZhbHVlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGFmdGVyU2V0QnVmZmVyQ29sdW1uUmFuZ2UodmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgIG9sZFZhbHVlICE9PSB1bmRlZmluZWQgJiYgdGhpcy5jcmVhdGVWaWV3RGF0YSgpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIGFmdGVyIHRoZSBidWZmZXJSb3dSYW5nZSBjb25maWcgZ290IGNoYW5nZWRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdmFsdWVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gb2xkVmFsdWVcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgYWZ0ZXJTZXRCdWZmZXJSb3dSYW5nZSh2YWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgb2xkVmFsdWUgIT09IHVuZGVmaW5lZCAmJiB0aGlzLmNyZWF0ZVZpZXdEYXRhKClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgYWZ0ZXIgdGhlIGNvbnRhaW5lcldpZHRoIGNvbmZpZyBnb3QgY2hhbmdlZFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBvbGRWYWx1ZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBhZnRlclNldENvbnRhaW5lcldpZHRoKHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICB2YWx1ZSA+IDAgJiYgdGhpcy51cGRhdGVNb3VudGVkQW5kVmlzaWJsZUNvbHVtbnMoKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJlZCBhZnRlciB0aGUgaWQgY29uZmlnIGdvdCBjaGFuZ2VkXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG9sZFZhbHVlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGFmdGVyU2V0SWQodmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgIHRoaXMudmRvbS5pZCA9IHZhbHVlICsgJ19fd3JhcHBlcic7XG5cbiAgICAgICAgLy8gc2lsZW50IHZkb20gdXBkYXRlLCB0aGUgc3VwZXIgY2FsbCB3aWxsIHRyaWdnZXIgdGhlIGVuZ2luZVxuICAgICAgICBzdXBlci5hZnRlclNldElkKHZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIGFmdGVyIHRoZSBpc1Njcm9sbGluZyBjb25maWcgZ290IGNoYW5nZWRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdmFsdWVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gb2xkVmFsdWVcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgYWZ0ZXJTZXRJc1Njcm9sbGluZyh2YWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgdGhpcy50b2dnbGVDbHMoJ25lby1pcy1zY3JvbGxpbmcnLCB2YWx1ZSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgYWZ0ZXIgdGhlIG1vdW50ZWRDb2x1bW5zIGNvbmZpZyBnb3QgY2hhbmdlZFxuICAgICAqIEBwYXJhbSB7TnVtYmVyW119IHZhbHVlXG4gICAgICogQHBhcmFtIHtOdW1iZXJbXX0gb2xkVmFsdWVcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgYWZ0ZXJTZXRNb3VudGVkQ29sdW1ucyh2YWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgb2xkVmFsdWUgJiYgdGhpcy5jcmVhdGVWaWV3RGF0YSgpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIGFmdGVyIHRoZSByb3dIZWlnaHQgY29uZmlnIGdvdCBjaGFuZ2VkXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG9sZFZhbHVlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGFmdGVyU2V0Um93SGVpZ2h0KHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICB2YWx1ZSA+IDAgJiYgdGhpcy51cGRhdGVTY3JvbGxIZWlnaHQoKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJlZCBhZnRlciB0aGUgc2Nyb2xsTGVmdCBjb25maWcgZ290IGNoYW5nZWRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdmFsdWVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gb2xkVmFsdWVcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgYWZ0ZXJTZXRTY3JvbGxMZWZ0KHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICB0aGlzLnVwZGF0ZU1vdW50ZWRBbmRWaXNpYmxlQ29sdW1ucygpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIGFmdGVyIHRoZSBzY3JvbGxUb3AgY29uZmlnIGdvdCBjaGFuZ2VkXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG9sZFZhbHVlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGFmdGVyU2V0U2Nyb2xsVG9wKHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICBsZXQgbWUgICAgICAgICAgICAgICA9IHRoaXMsXG4gICAgICAgICAgICB7YnVmZmVyUm93UmFuZ2V9ID0gbWUsXG4gICAgICAgICAgICBuZXdTdGFydEluZGV4ICAgID0gTWF0aC5mbG9vcih2YWx1ZSAvIG1lLnJvd0hlaWdodCk7XG5cbiAgICAgICAgaWYgKE1hdGguYWJzKG1lLnN0YXJ0SW5kZXggLSBuZXdTdGFydEluZGV4KSA+PSBidWZmZXJSb3dSYW5nZSkge1xuICAgICAgICAgICAgbWUuc3RhcnRJbmRleCA9IG5ld1N0YXJ0SW5kZXhcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1lLnZpc2libGVSb3dzWzBdID0gbmV3U3RhcnRJbmRleDtcbiAgICAgICAgICAgIG1lLnZpc2libGVSb3dzWzFdID0gbmV3U3RhcnRJbmRleCArIG1lLmF2YWlsYWJsZVJvd3NcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJlZCBhZnRlciB0aGUgc2VsZWN0aW9uTW9kZWwgY29uZmlnIGdvdCBjaGFuZ2VkXG4gICAgICogQHBhcmFtIHtOZW8uc2VsZWN0aW9uLk1vZGVsfSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7TmVvLnNlbGVjdGlvbi5Nb2RlbH0gb2xkVmFsdWVcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgYWZ0ZXJTZXRTZWxlY3Rpb25Nb2RlbCh2YWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgdGhpcy52bm9kZUluaXRpYWxpemVkICYmIHZhbHVlLnJlZ2lzdGVyKHRoaXMpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIGFmdGVyIHRoZSBzdGFydEluZGV4IGNvbmZpZyBnb3QgY2hhbmdlZFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBvbGRWYWx1ZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBhZnRlclNldFN0YXJ0SW5kZXgodmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgIG9sZFZhbHVlICE9PSB1bmRlZmluZWQgJiYgdGhpcy5jcmVhdGVWaWV3RGF0YSgpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIGFmdGVyIHRoZSBzdG9yZSBjb25maWcgZ290IGNoYW5nZWRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdmFsdWVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gb2xkVmFsdWVcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgYWZ0ZXJTZXRTdG9yZSh2YWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgbGV0IG1lICAgICAgICA9IHRoaXMsXG4gICAgICAgICAgICBsaXN0ZW5lcnMgPSB7XG4gICAgICAgICAgICAgICAgZmlsdGVyICAgICAgOiBtZS5vblN0b3JlRmlsdGVyLFxuICAgICAgICAgICAgICAgIGxvYWQgICAgICAgIDogbWUub25TdG9yZUxvYWQsXG4gICAgICAgICAgICAgICAgcmVjb3JkQ2hhbmdlOiBtZS5vblN0b3JlUmVjb3JkQ2hhbmdlLFxuICAgICAgICAgICAgICAgIHNjb3BlICAgICAgIDogbWVcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgb2xkVmFsdWU/LnVuKGxpc3RlbmVycyk7XG4gICAgICAgIHZhbHVlICAgPy5vbihsaXN0ZW5lcnMpO1xuXG4gICAgICAgIC8vIENsZWFyIGNvbXBvbmVudCBpbnN0YW5jZXMgd2hlbiB0aGUgc3RvcmUgY2hhbmdlcyBvciBpcyByZXBsYWNlZFxuICAgICAgICBpZiAob2xkVmFsdWUpIHtcbiAgICAgICAgICAgIG1lLmNsZWFyQ29tcG9uZW50Q29sdW1uTWFwcygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2RhdGEuY2VsbElkXVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhLmNvbHVtblxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkYXRhLmNvbHVtbkluZGV4XG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGEucmVjb3JkXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGRhdGEucm93SW5kZXhcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICAqL1xuICAgIGFwcGx5UmVuZGVyZXJPdXRwdXQoe2NlbGxJZCwgY29sdW1uLCBjb2x1bW5JbmRleCwgcmVjb3JkLCByb3dJbmRleH0pIHtcbiAgICAgICAgbGV0IG1lICAgICAgICAgICAgICAgICAgICAgPSB0aGlzLFxuICAgICAgICAgICAgZ3JpZENvbnRhaW5lciAgICAgICAgICA9IG1lLnBhcmVudCxcbiAgICAgICAgICAgIHtzZWxlY3RlZENlbGxzLCBzdG9yZX0gPSBtZSxcbiAgICAgICAgICAgIGNlbGxDbHMgICAgICAgICAgICAgICAgPSBbJ25lby1ncmlkLWNlbGwnXSxcbiAgICAgICAgICAgIGNvbHNwYW4gICAgICAgICAgICAgICAgPSByZWNvcmRbbWUuY29sc3BhbkZpZWxkXSxcbiAgICAgICAgICAgIHtkYXRhRmllbGR9ICAgICAgICAgICAgPSBjb2x1bW4sXG4gICAgICAgICAgICB7bW9kZWx9ICAgICAgICAgICAgICAgID0gc3RvcmUsXG4gICAgICAgICAgICBmaWVsZFZhbHVlICAgICAgICAgICAgID0gcmVjb3JkW2RhdGFGaWVsZF0sXG4gICAgICAgICAgICBjZWxsQ29uZmlnLCByZW5kZXJlck91dHB1dDtcblxuICAgICAgICBpZiAoIW1vZGVsLmdldEZpZWxkKGRhdGFGaWVsZCkpIHtcbiAgICAgICAgICAgIGxldCBuc0FycmF5ICAgPSBkYXRhRmllbGQuc3BsaXQoJy4nKSxcbiAgICAgICAgICAgICAgICBmaWVsZE5hbWUgPSBuc0FycmF5LnBvcCgpO1xuXG4gICAgICAgICAgICBmaWVsZFZhbHVlID0gTmVvLm5zKG5zQXJyYXksIGZhbHNlLCByZWNvcmRbU3ltYm9sLmZvcignZGF0YScpXSk/LltmaWVsZE5hbWVdXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZmllbGRWYWx1ZSA9PT0gbnVsbCB8fCBmaWVsZFZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGZpZWxkVmFsdWUgPSAnJ1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbHVtbi5yZW5kZXJlclNjb3BlID09PSAnbWUnIHx8IGNvbHVtbi5yZW5kZXJlclNjb3BlID09PSAndGhpcycpIHtcbiAgICAgICAgICAgIGNvbHVtbi5yZW5kZXJlclNjb3BlID0gY29sdW1uO1xuICAgICAgICB9XG5cbiAgICAgICAgbWUuYmluZENhbGxiYWNrKGNvbHVtbi5yZW5kZXJlciwgJ3JlbmRlcmVyJywgY29sdW1uLnJlbmRlcmVyU2NvcGUgfHwgbWUsIGNvbHVtbik7XG5cbiAgICAgICAgcmVuZGVyZXJPdXRwdXQgPSBjb2x1bW4ucmVuZGVyZXIuY2FsbChjb2x1bW4ucmVuZGVyZXJTY29wZSB8fCBtZSwge1xuICAgICAgICAgICAgY29sdW1uLFxuICAgICAgICAgICAgY29sdW1uSW5kZXgsXG4gICAgICAgICAgICBkYXRhRmllbGQsXG4gICAgICAgICAgICBncmlkQ29udGFpbmVyLFxuICAgICAgICAgICAgcmVjb3JkLFxuICAgICAgICAgICAgcm93SW5kZXgsXG4gICAgICAgICAgICBzdG9yZSxcbiAgICAgICAgICAgIHZhbHVlOiBmaWVsZFZhbHVlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHN3aXRjaCAoTmVvLnR5cGVPZihyZW5kZXJlck91dHB1dCkpIHtcbiAgICAgICAgICAgIGNhc2UgJ09iamVjdCc6IHtcbiAgICAgICAgICAgICAgICBpZiAocmVuZGVyZXJPdXRwdXQuaHRtbCB8fCByZW5kZXJlck91dHB1dC50ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbmRlcmVyT3V0cHV0LmNscyAmJiBjZWxsQ2xzLnB1c2goLi4ucmVuZGVyZXJPdXRwdXQuY2xzKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZW5kZXJlck91dHB1dCA9IFtyZW5kZXJlck91dHB1dF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdEYXRlJzpcbiAgICAgICAgICAgIGNhc2UgJ051bWJlcic6XG4gICAgICAgICAgICBjYXNlICdTdHJpbmcnOiB7XG4gICAgICAgICAgICAgICAgcmVuZGVyZXJPdXRwdXQgPSB7XG4gICAgICAgICAgICAgICAgICAgIGNscyA6IGNlbGxDbHMsXG4gICAgICAgICAgICAgICAgICAgIGh0bWw6IHJlbmRlcmVyT3V0cHV0Py50b1N0cmluZygpXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlbmRlcmVyT3V0cHV0ID09PSBudWxsIHx8IHJlbmRlcmVyT3V0cHV0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJlbmRlcmVyT3V0cHV0ID0gJydcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb2x1bW4uY2VsbEFsaWduICE9PSAnbGVmdCcpIHtcbiAgICAgICAgICAgIGNlbGxDbHMucHVzaCgnbmVvLScgKyBjb2x1bW4uY2VsbEFsaWduKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1lLmhpZ2hsaWdodE1vZGlmaWVkQ2VsbHMpIHtcbiAgICAgICAgICAgIGlmIChyZWNvcmQuaXNNb2RpZmllZEZpZWxkKGRhdGFGaWVsZCkpIHtcbiAgICAgICAgICAgICAgICBjZWxsQ2xzLnB1c2goJ25lby1pcy1tb2RpZmllZCcpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWNlbGxJZCkge1xuICAgICAgICAgICAgY2VsbElkID0gbWUuZ2V0Q2VsbElkKHJvd0luZGV4LCBjb2x1bW4uZGF0YUZpZWxkKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlbGVjdGVkQ2VsbHMuaW5jbHVkZXMoY2VsbElkKSkge1xuICAgICAgICAgICAgY2VsbENscy5wdXNoKCduZW8tc2VsZWN0ZWQnKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1lLnNlbGVjdGlvbk1vZGVsPy5zZWxlY3RlZENvbHVtbnM/LmluY2x1ZGVzKGRhdGFGaWVsZCkpIHtcbiAgICAgICAgICAgIE5lb0FycmF5LmFkZChjZWxsQ2xzLCBtZS5zZWxlY3Rpb25Nb2RlbC5zZWxlY3RlZENvbHVtbkNlbGxDbHMgfHwgJ25lby1zZWxlY3RlZCcpXG4gICAgICAgIH1cblxuICAgICAgICBjZWxsQ29uZmlnID0ge1xuICAgICAgICAgICAgJ2FyaWEtY29saW5kZXgnOiBjb2x1bW5JbmRleCArIDEsIC8vIDEgYmFzZWRcbiAgICAgICAgICAgIGlkICAgICAgICAgICAgIDogY2VsbElkLFxuICAgICAgICAgICAgY2xzICAgICAgICAgICAgOiBjZWxsQ2xzLFxuICAgICAgICAgICAgcm9sZSAgICAgICAgICAgOiAnZ3JpZGNlbGwnLFxuICAgICAgICAgICAgc3R5bGUgICAgICAgICAgOiByZW5kZXJlck91dHB1dC5zdHlsZSB8fCB7fVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChjb2x1bW4ud2lkdGgpIHtcbiAgICAgICAgICAgIGNlbGxDb25maWcuc3R5bGUubWluV2lkdGggPSBgJHtjb2x1bW4ud2lkdGh9cHhgXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29sc3BhbiAmJiBPYmplY3Qua2V5cyhjb2xzcGFuKS5pbmNsdWRlcyhkYXRhRmllbGQpKSB7XG4gICAgICAgICAgICBjZWxsQ29uZmlnLmNvbHNwYW4gPSBjb2xzcGFuW2RhdGFGaWVsZF1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChOZW8udHlwZU9mKHJlbmRlcmVyT3V0cHV0KSA9PT0gJ09iamVjdCcpIHtcbiAgICAgICAgICAgIGlmIChPYmplY3QuaGFzT3duKHJlbmRlcmVyT3V0cHV0LCAnaHRtbCcpKSB7XG4gICAgICAgICAgICAgICAgY2VsbENvbmZpZy5odG1sID0gcmVuZGVyZXJPdXRwdXQuaHRtbCAgfHwgJydcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2VsbENvbmZpZy50ZXh0ID0gcmVuZGVyZXJPdXRwdXQudGV4dCAgfHwgJydcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNlbGxDb25maWcuY24gPSByZW5kZXJlck91dHB1dFxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNlbGxDb25maWdcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgd2hlbiBhY2Nlc3NpbmcgdGhlIGNvbHVtblBvc2l0aW9ucyBjb25maWdcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdmFsdWVcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgYmVmb3JlR2V0Q29sdW1uUG9zaXRpb25zKHZhbHVlKSB7XG4gICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbHVtblBvc2l0aW9ucyA9IHZhbHVlID0gTmVvLmNyZWF0ZSh7XG4gICAgICAgICAgICAgICAgbW9kdWxlICAgICA6IENvbGxlY3Rpb24sXG4gICAgICAgICAgICAgICAga2V5UHJvcGVydHk6ICdkYXRhRmllbGQnXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIGJlZm9yZSB0aGUgc2VsZWN0aW9uTW9kZWwgY29uZmlnIGdldHMgY2hhbmdlZC5cbiAgICAgKiBAcGFyYW0ge05lby5zZWxlY3Rpb24uTW9kZWx9IHZhbHVlXG4gICAgICogQHBhcmFtIHtOZW8uc2VsZWN0aW9uLk1vZGVsfSBvbGRWYWx1ZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBiZWZvcmVTZXRTZWxlY3Rpb25Nb2RlbCh2YWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgb2xkVmFsdWU/LmRlc3Ryb3koKTtcblxuICAgICAgICByZXR1cm4gQ2xhc3NTeXN0ZW1VdGlsLmJlZm9yZVNldEluc3RhbmNlKHZhbHVlLCBSb3dNb2RlbClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95cyBhbGwgY29tcG9uZW50IGluc3RhbmNlcyBjcmVhdGVkIGJ5IGNvbXBvbmVudCBjb2x1bW5zLlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBjbGVhckNvbXBvbmVudENvbHVtbk1hcHMoKSB7XG4gICAgICAgIGxldCBtZSAgICAgID0gdGhpcyxcbiAgICAgICAgICAgIGNvbHVtbnMgPSBtZS5wYXJlbnQuY29sdW1ucy5pdGVtcztcblxuICAgICAgICBjb2x1bW5zLmZvckVhY2goY29sdW1uID0+IHtcbiAgICAgICAgICAgIGlmIChjb2x1bW4gaW5zdGFuY2VvZiBOZW8uZ3JpZC5jb2x1bW4uQ29tcG9uZW50KSB7XG4gICAgICAgICAgICAgICAgY29sdW1uLm1hcC5mb3JFYWNoKGNvbXBvbmVudCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC5kZXN0cm95KClcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjb2x1bW4ubWFwLmNsZWFyKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xlYW5zIHVwIGNvbXBvbmVudCBpbnN0YW5jZXMgdGhhdCBhcmUgbm8gbG9uZ2VyIHZpc2libGUgb3IgbmVlZGVkLlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBjbGVhbnVwQ29tcG9uZW50SW5zdGFuY2VzKCkge1xuICAgICAgICBsZXQgbWUgPSB0aGlzO1xuXG4gICAgICAgIG1lLnBhcmVudC5jb2x1bW5zLml0ZW1zLmZvckVhY2goY29sdW1uID0+IHtcbiAgICAgICAgICAgIGlmIChjb2x1bW4gaW5zdGFuY2VvZiBOZW8uZ3JpZC5jb2x1bW4uQ29tcG9uZW50KSB7XG4gICAgICAgICAgICAgICAgY29sdW1uLm1hcC5mb3JFYWNoKChjb21wb25lbnQsIGlkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEV4dHJhY3Qgcm93SW5kZXggZnJvbSBjb21wb25lbnQgSUQgKGUuZy4sIFwiZ3JpZC1ib2R5LTEtY29tcG9uZW50LTk1MFwiKVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb21wb25lbnRSb3dJbmRleCA9IHBhcnNlSW50KGlkLnNwbGl0KCctJykucG9wKCkpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb21wb25lbnRSb3dJbmRleCA8IG1lLm1vdW50ZWRSb3dzWzBdIHx8IGNvbXBvbmVudFJvd0luZGV4ID4gbWUubW91bnRlZFJvd3NbMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW4ubWFwLmRlbGV0ZShpZClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0c1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzLnJlY29yZFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0cy5yb3dJbmRleF1cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICAqL1xuICAgIGNyZWF0ZVJvdyh7cmVjb3JkLCByb3dJbmRleH0pIHtcbiAgICAgICAgaWYgKCFOZW8uaXNOdW1iZXIocm93SW5kZXgpKSB7XG4gICAgICAgICAgICByb3dJbmRleCA9IHRoaXMuc3RvcmUuaW5kZXhPZihyZWNvcmQpXG4gICAgICAgIH1cblxuICAgICAgICBsZXQgbWUgICAgICAgICAgICA9IHRoaXMsXG4gICAgICAgICAgICB7bW91bnRlZENvbHVtbnMsIHNlbGVjdGVkUm93c30gPSBtZSxcbiAgICAgICAgICAgIGdyaWRDb250YWluZXIgPSBtZS5wYXJlbnQsXG4gICAgICAgICAgICB7Y29sdW1uc30gICAgID0gZ3JpZENvbnRhaW5lcixcbiAgICAgICAgICAgIGlkICAgICAgICAgICAgPSBtZS5nZXRSb3dJZChyb3dJbmRleCksXG4gICAgICAgICAgICByZWNvcmRJZCAgICAgID0gcmVjb3JkW21lLnN0b3JlLmdldEtleVByb3BlcnR5KCldLFxuICAgICAgICAgICAgcm93Q2xzICAgICAgICA9IG1lLmdldFJvd0NsYXNzKHJlY29yZCwgcm93SW5kZXgpLFxuICAgICAgICAgICAgY29uZmlnLCBjb2x1bW4sIGNvbHVtblBvc2l0aW9uLCAgZ3JpZFJvdywgaTtcblxuICAgICAgICBpZiAocm93SW5kZXggJSAyICE9PSAwKSB7XG4gICAgICAgICAgICByb3dDbHMucHVzaCgnbmVvLWV2ZW4nKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlbGVjdGVkUm93cyAmJiByZWNvcmRbbWUuc2VsZWN0ZWRSZWNvcmRGaWVsZF0pIHtcbiAgICAgICAgICAgIE5lb0FycmF5LmFkZChzZWxlY3RlZFJvd3MsIHJlY29yZElkKVxuICAgICAgICB9XG5cbiAgICAgICAgZ3JpZFJvdyA9IHtcbiAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgJ2FyaWEtcm93aW5kZXgnOiByb3dJbmRleCArIDIsIC8vIGhlYWRlciByb3cgPT4gMSwgZmlyc3QgYm9keSByb3cgPT4gMlxuICAgICAgICAgICAgY2xzICAgICAgICAgICAgOiByb3dDbHMsXG4gICAgICAgICAgICBjbiAgICAgICAgICAgICA6IFtdLFxuICAgICAgICAgICAgZGF0YSAgICAgICAgICAgOiB7cmVjb3JkSWR9LFxuICAgICAgICAgICAgcm9sZSAgICAgICAgICAgOiAncm93JyxcblxuICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICBoZWlnaHQgICA6IG1lLnJvd0hlaWdodCArICdweCcsXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlM2QoMHB4LCAke3Jvd0luZGV4ICogbWUucm93SGVpZ2h0fXB4LCAwcHgpYFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChzZWxlY3RlZFJvd3M/LmluY2x1ZGVzKHJlY29yZElkKSkge1xuICAgICAgICAgICAgcm93Q2xzLnB1c2goJ25lby1zZWxlY3RlZCcpO1xuICAgICAgICAgICAgZ3JpZFJvd1snYXJpYS1zZWxlY3RlZCddID0gdHJ1ZTtcbiAgICAgICAgICAgIGdyaWRDb250YWluZXIuZmlyZSgnc2VsZWN0Jywge3JlY29yZH0pXG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGk9bW91bnRlZENvbHVtbnNbMF07IGkgPD0gbW91bnRlZENvbHVtbnNbMV07IGkrKykge1xuICAgICAgICAgICAgY29sdW1uID0gY29sdW1ucy5nZXRBdChpKTtcbiAgICAgICAgICAgIGNvbmZpZyA9IG1lLmFwcGx5UmVuZGVyZXJPdXRwdXQoe2NvbHVtbiwgY29sdW1uSW5kZXg6IGksIHJlY29yZCwgcm93SW5kZXh9KTtcblxuICAgICAgICAgICAgaWYgKGNvbHVtbi5kb2NrKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnLmNscyA9IFsnbmVvLWxvY2tlZCcsIC4uLmNvbmZpZy5jbHMgfHwgW11dXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbHVtblBvc2l0aW9uID0gbWUuY29sdW1uUG9zaXRpb25zLmdldChjb2x1bW4uZGF0YUZpZWxkKTtcblxuICAgICAgICAgICAgY29uZmlnLnN0eWxlID0ge1xuICAgICAgICAgICAgICAgIC4uLmNvbmZpZy5zdHlsZSxcbiAgICAgICAgICAgICAgICBsZWZ0IDogY29sdW1uUG9zaXRpb24ueCAgICAgKyAncHgnLFxuICAgICAgICAgICAgICAgIHdpZHRoOiBjb2x1bW5Qb3NpdGlvbi53aWR0aCArICdweCdcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSGFwcGVucyBkdXJpbmcgYSBjb2x1bW4gaGVhZGVyIGRyYWcgT1AsIHdoZW4gbGVhdmluZyB0aGUgcGFpbnRlZCByYW5nZVxuICAgICAgICAgICAgaWYgKGNvbHVtblBvc2l0aW9uLmhpZGRlbikge1xuICAgICAgICAgICAgICAgIGNvbmZpZy5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbidcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZ3JpZFJvdy5jbi5wdXNoKGNvbmZpZylcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBncmlkUm93XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBzaWxlbnQ9ZmFsc2VcbiAgICAgKi9cbiAgICBjcmVhdGVWaWV3RGF0YShzaWxlbnQ9ZmFsc2UpIHtcbiAgICAgICAgbGV0IG1lICAgICAgICAgICAgICAgICAgID0gdGhpcyxcbiAgICAgICAgICAgIHttb3VudGVkUm93cywgc3RvcmV9ID0gbWUsXG4gICAgICAgICAgICByb3dzICAgICAgICAgICAgICAgICA9IFtdLFxuICAgICAgICAgICAgZW5kSW5kZXgsIGksIHJhbmdlO1xuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHN0b3JlLmlzTG9hZGluZyAgICAgICAgICAgICAgICAgICB8fFxuICAgICAgICAgICAgbWUuYXZhaWxhYmxlUm93cyAgICAgICAgICAgICAgPCAxIHx8XG4gICAgICAgICAgICBtZS5fY29udGFpbmVyV2lkdGggICAgICAgICAgICA8IDEgfHwgLy8gd2UgYXJlIG5vdCBjaGVja2luZyBtZS5jb250YWluZXJXaWR0aCwgc2luY2Ugd2Ugd2FudCB0byBpZ25vcmUgdGhlIGNvbmZpZyBzeW1ib2xcbiAgICAgICAgICAgIG1lLmNvbHVtblBvc2l0aW9ucy5nZXRDb3VudCgpIDwgMSB8fFxuICAgICAgICAgICAgbWUubW91bnRlZENvbHVtbnNbMV0gICAgICAgICAgPCAxXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWUuI2luaXRpYWxDaHVua1NpemUgPiAwKSB7XG4gICAgICAgICAgICBlbmRJbmRleCA9IG1lLiNpbml0aWFsQ2h1bmtTaXplO1xuICAgICAgICAgICAgcmFuZ2UgICAgPSBlbmRJbmRleDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZXMgdGhlIG5ldyBzdGFydCAmIGVuZCBpbmRleGVzXG4gICAgICAgICAgICBtZS51cGRhdGVNb3VudGVkQW5kVmlzaWJsZVJvd3MoKTtcbiAgICAgICAgICAgIGVuZEluZGV4ID0gbW91bnRlZFJvd3NbMV1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaT1tb3VudGVkUm93c1swXTsgaSA8IGVuZEluZGV4OyBpKyspIHtcbiAgICAgICAgICAgIHJvd3MucHVzaChtZS5jcmVhdGVSb3coe3JlY29yZDogc3RvcmUuZ2V0QXQoaSksIHJvd0luZGV4OiBpfSkpXG4gICAgICAgIH1cblxuICAgICAgICBtZS5nZXRWZG9tUm9vdCgpLmNuID0gcm93cztcblxuICAgICAgICBtZS5wYXJlbnQuaXNMb2FkaW5nID0gZmFsc2U7XG5cbiAgICAgICAgbWUudXBkYXRlU2Nyb2xsSGVpZ2h0KHRydWUsIHJhbmdlKTsgLy8gc2lsZW50XG4gICAgICAgICFzaWxlbnQgJiYgbWUudXBkYXRlKClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gYXJnc1xuICAgICAqL1xuICAgIGRlc3Ryb3koLi4uYXJncykge1xuICAgICAgICB0aGlzLnN0b3JlID0gbnVsbDsgLy8gcmVtb3ZlIHRoZSBsaXN0ZW5lcnNcbiAgICAgICAgdGhpcy5jbGVhckNvbXBvbmVudENvbHVtbk1hcHMoKTsgLy8gRGVzdHJveSBjb21wb25lbnQgaW5zdGFuY2VzXG5cbiAgICAgICAgc3VwZXIuZGVzdHJveSguLi5hcmdzKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50TmFtZVxuICAgICAqL1xuICAgIGZpcmVDZWxsRXZlbnQoZGF0YSwgZXZlbnROYW1lKSB7XG4gICAgICAgIGxldCBtZSAgICAgICAgPSB0aGlzLFxuICAgICAgICAgICAgaWQgICAgICAgID0gZGF0YS5jdXJyZW50VGFyZ2V0LFxuICAgICAgICAgICAgZGF0YUZpZWxkID0gbWUuZ2V0Q2VsbERhdGFGaWVsZChpZCksXG4gICAgICAgICAgICByZWNvcmQgICAgPSBtZS5nZXRSZWNvcmQoaWQpO1xuXG4gICAgICAgIG1lLnBhcmVudC5maXJlKGV2ZW50TmFtZSwge2JvZHk6IG1lLCBkYXRhLCBkYXRhRmllbGQsIHJlY29yZH0pXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnROYW1lXG4gICAgICovXG4gICAgZmlyZVJvd0V2ZW50KGRhdGEsIGV2ZW50TmFtZSkge1xuICAgICAgICBsZXQgbWUgICAgID0gdGhpcyxcbiAgICAgICAgICAgIGlkICAgICA9IGRhdGEuY3VycmVudFRhcmdldCxcbiAgICAgICAgICAgIHJlY29yZCA9IG1lLmdldFJlY29yZChpZCk7XG5cbiAgICAgICAgbWUucGFyZW50LmZpcmUoZXZlbnROYW1lLCB7Ym9keTogbWUsIGRhdGEsIHJlY29yZH0pXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGNlbGxJZFxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9XG4gICAgICovXG4gICAgZ2V0Q2VsbERhdGFGaWVsZChjZWxsSWQpIHtcbiAgICAgICAgcmV0dXJuIGNlbGxJZC5zcGxpdCgnX18nKVsyXVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSByb3dJbmRleFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhRmllbGRcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxuICAgICAqL1xuICAgIGdldENlbGxJZChyb3dJbmRleCwgZGF0YUZpZWxkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFJvd0lkKHJvd0luZGV4KSArICdfXycgKyBkYXRhRmllbGRcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYSBncmlkIGNvbHVtbiBvciBjb2x1bW4gaW5kZXggYnkgYSBnaXZlbiBmaWVsZCBuYW1lXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGZpZWxkXG4gICAgICogQHBhcmFtIHtCb29sZWFufSByZXR1cm5JbmRleD1mYWxzZVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R8TnVtYmVyfG51bGx9XG4gICAgICovXG4gICAgZ2V0Q29sdW1uKGZpZWxkLCByZXR1cm5JbmRleD1mYWxzZSkge1xuICAgICAgICBsZXQge2NvbHVtbnN9ID0gdGhpcy5wYXJlbnQsXG4gICAgICAgICAgICBjb2x1bW4gICAgPSBjb2x1bW5zLmdldChmaWVsZCk7XG5cbiAgICAgICAgaWYgKGNvbHVtbikge1xuICAgICAgICAgICAgcmV0dXJuIHJldHVybkluZGV4ID8gY29sdW1ucy5pbmRleE9mKGNvbHVtbikgOiBjb2x1bW5cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGFsbCBwYWludGVkIGNvbHVtbiBjZWxscyAodmlzaWJsZSArIGJ1ZmZlciByYW5nZSlcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YUZpZWxkXG4gICAgICogQHJldHVybnMge09iamVjdFtdfVxuICAgICAqL1xuICAgIGdldENvbHVtbkNlbGxzKGRhdGFGaWVsZCkge1xuICAgICAgICBsZXQgbWUgICAgICAgICAgPSB0aGlzLFxuICAgICAgICAgICAgY2VsbHMgICAgICAgPSBbXSxcbiAgICAgICAgICAgIGNvbHVtbkluZGV4ID0gLTEsXG4gICAgICAgICAgICB2ZG9tUm9vdCAgICA9IG1lLmdldFZkb21Sb290KCksXG4gICAgICAgICAgICBmaXJzdFJvdyAgICA9IHZkb21Sb290LmNuWzBdLFxuICAgICAgICAgICAgaSAgICAgICAgICAgPSAwLFxuICAgICAgICAgICAgbGVuICAgICAgICAgPSBmaXJzdFJvdy5jbi5sZW5ndGgsXG4gICAgICAgICAgICBjZWxsO1xuXG4gICAgICAgIC8vIENvbHVtbnMgbWlnaHQgZ2V0IG1vdmVkIHZpYSBkcmFnJmRyb3AsIHNvIGxldCdzIGNoZWNrIGZvciB0aGUgY3VycmVudCBtYXRjaFxuICAgICAgICBmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZGF0YUZpZWxkID09PSBtZS5nZXREYXRhRmllbGQoZmlyc3RSb3cuY25baV0uaWQpKSB7XG4gICAgICAgICAgICAgICAgY29sdW1uSW5kZXggPSBpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbHVtbkluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgIHZkb21Sb290LmNuLmZvckVhY2gocm93ID0+IHtcbiAgICAgICAgICAgICAgICBjZWxsID0gcm93LmNuW2NvbHVtbkluZGV4XTtcbiAgICAgICAgICAgICAgICBjZWxsICYmIGNlbGxzLnB1c2goY2VsbClcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2VsbHNcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gY2VsbElkXG4gICAgICogQHJldHVybnMge1N0cmluZ31cbiAgICAgKi9cbiAgICBnZXREYXRhRmllbGQoY2VsbElkKSB7XG4gICAgICAgIHJldHVybiBjZWxsSWQuc3BsaXQoJ19fJylbMl1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIG1hdGNoaW5nIHJlY29yZCBieSBwYXNzaW5nIGEgcm93IGlkLCBhIGNlbGwgaWQgb3IgYW4gaWQgaW5zaWRlIGEgZ3JpZCBjZWxsLlxuICAgICAqIExpbWl0ZWQgdG8gbW91bnRlZCByb3dzIChtdXN0IGJlIGluc2lkZSB0aGUgdmRvbSkuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG5vZGVJZFxuICAgICAqIEByZXR1cm5zIHtPYmplY3R8bnVsbH1cbiAgICAgKi9cbiAgICBnZXRSZWNvcmQobm9kZUlkKSB7XG4gICAgICAgIGxldCBtZSAgICAgPSB0aGlzLFxuICAgICAgICAgICAgcmVjb3JkID0gbWUuZ2V0UmVjb3JkQnlSb3dJZChub2RlSWQpLFxuICAgICAgICAgICAgbm9kZSwgcGFyZW50Tm9kZXM7XG5cbiAgICAgICAgaWYgKHJlY29yZCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlY29yZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcmVudE5vZGVzID0gVkRvbVV0aWwuZ2V0UGFyZW50Tm9kZXMobWUudmRvbSwgbm9kZUlkKTtcblxuICAgICAgICBmb3IgKG5vZGUgb2YgcGFyZW50Tm9kZXMgfHwgW10pIHtcbiAgICAgICAgICAgIHJlY29yZCA9IG1lLmdldFJlY29yZEJ5Um93SWQobm9kZS5pZCk7XG5cbiAgICAgICAgICAgIGlmIChyZWNvcmQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVjb3JkXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSByb3dJZFxuICAgICAqIEByZXR1cm5zIHtSZWNvcmR8bnVsbH1cbiAgICAgKi9cbiAgICBnZXRSZWNvcmRCeVJvd0lkKHJvd0lkKSB7XG4gICAgICAgIGxldCBtZSAgICAgICA9IHRoaXMsXG4gICAgICAgICAgICBub2RlICAgICA9IG1lLmdldFZkb21DaGlsZChyb3dJZCksXG4gICAgICAgICAgICByb3dJbmRleCA9IG5vZGVbJ2FyaWEtcm93aW5kZXgnXTtcblxuICAgICAgICBpZiAoTmVvLmlzTnVtYmVyKHJvd0luZGV4KSkge1xuICAgICAgICAgICAgLy8gYXJpYS1yb3dpbmRleCBpcyAxIGJhc2VkICYgYWxzbyBpbmNsdWRlcyB0aGUgaGVhZGVyXG4gICAgICAgICAgICByb3dJbmRleCAtPSAyO1xuXG4gICAgICAgICAgICByZXR1cm4gbWUuc3RvcmUuZ2V0QXQocm93SW5kZXgpXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlIHRoaXMgbWV0aG9kIHRvIGFwcGx5IGN1c3RvbSBDU1MgcnVsZXMgdG8gZ3JpZCByb3dzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHJlY29yZFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSByb3dJbmRleFxuICAgICAqIEByZXR1cm5zIHtTdHJpbmdbXX1cbiAgICAgKi9cbiAgICBnZXRSb3dDbGFzcyhyZWNvcmQsIHJvd0luZGV4KSB7XG4gICAgICAgIHJldHVybiBbJ25lby1ncmlkLXJvdyddXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHJvd0luZGV4XG4gICAgICogQHJldHVybnMge1N0cmluZ31cbiAgICAgKi9cbiAgICBnZXRSb3dJZChyb3dJbmRleCkge1xuICAgICAgICBsZXQgbWUgPSB0aGlzO1xuXG4gICAgICAgIGlmIChtZS4jaW5pdGlhbENodW5rU2l6ZSA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiBgJHttZS5pZH1fX3Jvdy0ke3Jvd0luZGV4fWBcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBgJHttZS5pZH1fX3Jvdy0ke3Jvd0luZGV4ICUgKG1lLmF2YWlsYWJsZVJvd3MgKyAyICogbWUuYnVmZmVyUm93UmFuZ2UpfWBcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAqL1xuICAgIGdldFZkb21Sb290KCkge1xuICAgICAgICByZXR1cm4gdGhpcy52ZG9tLmNuWzBdXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMge09iamVjdFtdfSBUaGUgbmV3IHZkb20gaXRlbXMgcm9vdFxuICAgICAqL1xuICAgIGdldFZkb21JdGVtc1Jvb3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZkb20uY25bMF1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAcmV0dXJucyB7TmVvLnZkb20uVk5vZGV9XG4gICAgICovXG4gICAgZ2V0Vm5vZGVSb290KCkge1xuICAgICAgICByZXR1cm4gdGhpcy52bm9kZS5jaGlsZE5vZGVzWzBdXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICAgKi9cbiAgICBvbkNlbGxDbGljayhkYXRhKSB7XG4gICAgICAgIHRoaXMuZmlyZUNlbGxFdmVudChkYXRhLCAnY2VsbENsaWNrJylcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICAgICAqL1xuICAgIG9uQ2VsbERvdWJsZUNsaWNrKGRhdGEpIHtcbiAgICAgICAgdGhpcy5maXJlQ2VsbEV2ZW50KGRhdGEsICdjZWxsRG91YmxlQ2xpY2snKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgb25Db25zdHJ1Y3RlZCgpIHtcbiAgICAgICAgc3VwZXIub25Db25zdHJ1Y3RlZCgpO1xuICAgICAgICB0aGlzLnNlbGVjdGlvbk1vZGVsPy5yZWdpc3Rlcih0aGlzKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAgICovXG4gICAgb25Sb3dDbGljayhkYXRhKSB7XG4gICAgICAgIHRoaXMuZmlyZVJvd0V2ZW50KGRhdGEsICdyb3dDbGljaycpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICAgKi9cbiAgICBvblJvd0RvdWJsZUNsaWNrKGRhdGEpIHtcbiAgICAgICAgdGhpcy5maXJlUm93RXZlbnQoZGF0YSwgJ3Jvd0RvdWJsZUNsaWNrJylcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIG9uU3RvcmVGaWx0ZXIoKSB7XG4gICAgICAgIHRoaXMub25TdG9yZUxvYWQoe2l0ZW1zOiB0aGlzLnN0b3JlLml0ZW1zfSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICBkYXRhXG4gICAgICogQHBhcmFtIHtPYmplY3RbXX0gZGF0YS5pdGVtc1xuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gIFtkYXRhLnBvc3RDaHVua0xvYWRdXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9ICAgW2RhdGEudG90YWxdXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIG9uU3RvcmVMb2FkKHtpdGVtcywgcG9zdENodW5rTG9hZCwgdG90YWx9KSB7XG4gICAgICAgIGxldCBtZSA9IHRoaXM7XG5cbiAgICAgICAgLypcbiAgICAgICAgICogRmFzdCBwYXRoIHRvIGhhbmRsZSBjbGVhcmluZyBhbGwgcm93cyAoZS5nLiwgc3RvcmUucmVtb3ZlQWxsKCkpLlxuICAgICAgICAgKiBBIGZ1bGwgdmRvbSBkaWZmIGFnYWluc3QgYWxsIGV4aXN0aW5nIHJvd3MgaXMgYSBwZXJmb3JtYW5jZSBib3R0bGVuZWNrLlxuICAgICAgICAgKiBUaGlzIGxvZ2ljIGJ5cGFzc2VzIHRoZSBzdGFuZGFyZCB1cGRhdGUoKSBjeWNsZSBieSBkaXJlY3RseSBjbGVhcmluZyB0aGUgdmRvbSxcbiAgICAgICAgICogdm5vZGUgY2FjaGUgYW5kIHRoZSByZWFsIERPTSB2aWEgdGV4dENvbnRlbnQuXG4gICAgICAgICAqL1xuICAgICAgICBpZiAoaXRlbXM/Lmxlbmd0aCA8IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IHZkb21Sb290ID0gbWUuZ2V0VmRvbVJvb3QoKTtcblxuICAgICAgICAgICAgLy8gTm8gY2hhbmdlLCBvcHQgb3V0XG4gICAgICAgICAgICBpZiAodmRvbVJvb3QuY24ubGVuZ3RoIDwgMSkge1xuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2ZG9tUm9vdC5jbiA9IFtdO1xuICAgICAgICAgICAgbWUuZ2V0Vm5vZGVSb290KCkuY2hpbGROb2RlcyA9IFtdO1xuXG4gICAgICAgICAgICBOZW8uYXBwbHlEZWx0YXMobWUuYXBwTmFtZSwge1xuICAgICAgICAgICAgICAgIGlkICAgICAgICAgOiB2ZG9tUm9vdC5pZCxcbiAgICAgICAgICAgICAgICB0ZXh0Q29udGVudDogJydcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIGl0J3MgdGhlIGZpcnN0IGNodW5rZWQgbG9hZCAoZGF0YS50b3RhbCBleGlzdHMgYW5kIGRhdGEuaXRlbXMgaXMgYSBzdWJzZXQgb2YgdG90YWwpXG4gICAgICAgIC8vIFJlbmRlciB0aGUgZW50aXJlIGNodW5rIGZvciBpbW1lZGlhdGUgc2Nyb2xsYWJpbGl0eVxuICAgICAgICBpZiAodG90YWwgJiYgaXRlbXMubGVuZ3RoIDwgdG90YWwpIHtcbiAgICAgICAgICAgIG1lLiNpbml0aWFsQ2h1bmtTaXplID0gaXRlbXMubGVuZ3RoO1xuICAgICAgICAgICAgbWUuI2luaXRpYWxUb3RhbFNpemUgPSB0b3RhbDtcbiAgICAgICAgICAgIG1lLmNyZWF0ZVZpZXdEYXRhKCk7XG4gICAgICAgICAgICBtZS4jaW5pdGlhbENodW5rU2l6ZSA9IDBcbiAgICAgICAgICAgIG1lLiNpbml0aWFsVG90YWxTaXplID0gMFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWUuY3JlYXRlVmlld0RhdGEoKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1lLm1vdW50ZWQgJiYgIXBvc3RDaHVua0xvYWQpIHtcbiAgICAgICAgICAgIG1lLnRpbWVvdXQoNTApLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIE5lby5tYWluLkRvbUFjY2Vzcy5zY3JvbGxUbyh7XG4gICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbjogJ3RvcCcsXG4gICAgICAgICAgICAgICAgICAgIGlkICAgICAgIDogbWUudmRvbS5pZCxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgICAgOiAwXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cblxuICAgICAgICAvLyBDbGVhbnVwIGNvbXBvbmVudCBpbnN0YW5jZXMgYWZ0ZXIgY2h1bmtlZCBsb2FkXG4gICAgICAgIGlmIChwb3N0Q2h1bmtMb2FkKSB7XG4gICAgICAgICAgICBtZS5jbGVhbnVwQ29tcG9uZW50SW5zdGFuY2VzKClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgIGRhdGFcbiAgICAgKiBAcGFyYW0ge09iamVjdFtdfSAgICAgICBkYXRhLmZpZWxkcyBFYWNoIGZpZWxkIG9iamVjdCBjb250YWlucyB0aGUga2V5czogbmFtZSwgb2xkVmFsdWUsIHZhbHVlXG4gICAgICogQHBhcmFtIHtOZW8uZGF0YS5Nb2RlbH0gZGF0YS5tb2RlbCAgVGhlIG1vZGVsIGluc3RhbmNlIG9mIHRoZSBjaGFuZ2VkIHJlY29yZFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgIGRhdGEucmVjb3JkXG4gICAgICovXG4gICAgb25TdG9yZVJlY29yZENoYW5nZSh7ZmllbGRzLCByZWNvcmR9KSB7XG4gICAgICAgIGxldCBtZSAgICAgICAgICAgICAgICAgICAgICAgICAgICA9IHRoaXMsXG4gICAgICAgICAgICBmaWVsZE5hbWVzICAgICAgICAgICAgICAgICAgICA9IGZpZWxkcy5tYXAoZmllbGQgPT4gZmllbGQubmFtZSksXG4gICAgICAgICAgICBuZWVkc1VwZGF0ZSAgICAgICAgICAgICAgICAgICA9IGZhbHNlLFxuICAgICAgICAgICAgcm93SW5kZXggICAgICAgICAgICAgICAgICAgICAgPSBtZS5zdG9yZS5pbmRleE9mKHJlY29yZCksXG4gICAgICAgICAgICB7bW91bnRlZFJvd3MsIHNlbGVjdGlvbk1vZGVsfSA9IG1lLFxuICAgICAgICAgICAgY29sdW1uLCBuZWVkc0NlbGxVcGRhdGUsIHJlY29yZElkO1xuXG4gICAgICAgIGlmIChmaWVsZE5hbWVzLmluY2x1ZGVzKG1lLmNvbHNwYW5GaWVsZCkpIHtcbiAgICAgICAgICAgIG1lLnZkb20uY25bcm93SW5kZXhdID0gbWUuY3JlYXRlUm93KHtyZWNvcmQsIHJvd0luZGV4fSk7XG4gICAgICAgICAgICBtZS51cGRhdGUoKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHJvd0luZGV4ID49IG1vdW50ZWRSb3dzWzBdICYmIHJvd0luZGV4IDw9IG1vdW50ZWRSb3dzWzFdKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb2x1bW4gb2YgbWUucGFyZW50LmNvbHVtbnMuaXRlbXMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uIGluc3RhbmNlb2YgTmVvLmdyaWQuY29sdW1uLkNvbXBvbmVudCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgTmVvLnR5cGVPZihjb2x1bW4uY29tcG9uZW50ID09PSAnRnVuY3Rpb24nKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgIWZpZWxkTmFtZXMuaW5jbHVkZXMoY29sdW1uLmRhdGFGaWVsZClcbiAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZWVkc0NlbGxVcGRhdGUgPSBtZS51cGRhdGVDZWxsTm9kZShyZWNvcmQsIGNvbHVtbi5kYXRhRmllbGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmVlZHNVcGRhdGUgICAgID0gbmVlZHNVcGRhdGUgfHwgbmVlZHNDZWxsVXBkYXRlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmaWVsZHMuZm9yRWFjaChmaWVsZCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWVsZC5uYW1lID09PSBtZS5zZWxlY3RlZFJlY29yZEZpZWxkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0aW9uTW9kZWwubnR5cGUgPT09ICdzZWxlY3Rpb24tZ3JpZC1yb3dtb2RlbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNvcmRJZCA9IHJlY29yZFttZS5zdG9yZS5nZXRLZXlQcm9wZXJ0eSgpXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbk1vZGVsW2ZpZWxkLnZhbHVlID8gJ3NlbGVjdFJvdycgOiAnZGVzZWxlY3RSb3cnXShyZWNvcmRJZClcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5lZWRzQ2VsbFVwZGF0ZSA9IG1lLnVwZGF0ZUNlbGxOb2RlKHJlY29yZCwgZmllbGQubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZWVkc1VwZGF0ZSAgICAgPSBuZWVkc1VwZGF0ZSB8fCBuZWVkc0NlbGxVcGRhdGVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBuZWVkc1VwZGF0ZSAmJiBtZS51cGRhdGUoKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgZm9yIGtleWJvYXJkIG5hdmlnYXRpb24gKHNlbGVjdGlvbiBtb2RlbHMpXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGluZGV4XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHN0ZXBcbiAgICAgKi9cbiAgICBzY3JvbGxCeVJvd3MoaW5kZXgsIHN0ZXApIHtcbiAgICAgICAgbGV0IG1lICAgICAgICAgICAgICAgICAgICAgICAgID0gdGhpcyxcbiAgICAgICAgICAgIHttb3VudGVkUm93cywgdmlzaWJsZVJvd3N9ID0gbWUsXG4gICAgICAgICAgICBjb3VudFJlY29yZHMgICAgICAgICAgICAgICA9IG1lLnN0b3JlLmdldENvdW50KCksXG4gICAgICAgICAgICBuZXdJbmRleCAgICAgICAgICAgICAgICAgICA9IGluZGV4ICsgc3RlcCxcbiAgICAgICAgICAgIGxhc3RSb3dHYXAsIG1vdW50ZWQsIHNjcm9sbFRvcCwgdmlzaWJsZTtcblxuICAgICAgICBpZiAobmV3SW5kZXggPj0gY291bnRSZWNvcmRzKSB7XG4gICAgICAgICAgICBuZXdJbmRleCAlPSBjb3VudFJlY29yZHM7XG4gICAgICAgICAgICBzdGVwICAgICA9IG5ld0luZGV4IC0gaW5kZXhcbiAgICAgICAgfVxuXG4gICAgICAgIHdoaWxlIChuZXdJbmRleCA8IDApIHtcbiAgICAgICAgICAgIG5ld0luZGV4ICs9IGNvdW50UmVjb3JkcztcbiAgICAgICAgICAgIHN0ZXAgICAgICs9IGNvdW50UmVjb3Jkc1xuICAgICAgICB9XG5cbiAgICAgICAgbW91bnRlZCA9IG5ld0luZGV4ID49IG1vdW50ZWRSb3dzWzBdICYmIG5ld0luZGV4IDw9IG1vdW50ZWRSb3dzWzFdO1xuXG4gICAgICAgIC8vIE5vdCB1c2luZyA+PSBvciA8PSwgc2luY2UgdGhlIGZpcnN0IC8gbGFzdCByb3cgbWlnaHQgbm90IGJlIGZ1bGx5IHZpc2libGVcbiAgICAgICAgdmlzaWJsZSA9IG5ld0luZGV4ID4gdmlzaWJsZVJvd3NbMF0gJiYgbmV3SW5kZXggPCB2aXNpYmxlUm93c1sxXTtcblxuICAgICAgICBpZiAoIXZpc2libGUpIHtcbiAgICAgICAgICAgIC8vIExlYXZpbmcgdGhlIG1vdW50ZWQgYXJlYSB3aWxsIHJlLWNhbGN1bGF0ZSB0aGUgdmlzaWJsZVJvd3MgZm9yIHVzXG4gICAgICAgICAgICBpZiAobW91bnRlZCkge1xuICAgICAgICAgICAgICAgIHZpc2libGVSb3dzWzBdICs9IHN0ZXA7XG4gICAgICAgICAgICAgICAgdmlzaWJsZVJvd3NbMV0gKz0gc3RlcFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc3RlcCA8IDApIHtcbiAgICAgICAgICAgICAgICBzY3JvbGxUb3AgPSBuZXdJbmRleCAqIG1lLnJvd0hlaWdodFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsYXN0Um93R2FwID0gbWUucm93SGVpZ2h0IC0gKG1lLmF2YWlsYWJsZUhlaWdodCAlIG1lLnJvd0hlaWdodCk7XG4gICAgICAgICAgICAgICAgc2Nyb2xsVG9wICA9IChuZXdJbmRleCAtIG1lLmF2YWlsYWJsZVJvd3MpICogbWUucm93SGVpZ2h0ICsgbGFzdFJvd0dhcFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBOZW8ubWFpbi5Eb21BY2Nlc3Muc2Nyb2xsVG8oe1xuICAgICAgICAgICAgICAgIGlkICAgICAgOiBtZS52ZG9tLmlkLFxuICAgICAgICAgICAgICAgIHZhbHVlICAgOiBzY3JvbGxUb3AsXG4gICAgICAgICAgICAgICAgd2luZG93SWQ6IG1lLndpbmRvd0lkXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlIHRoZSBjZWxsIHZkb20gc2lsZW50bHlcbiAgICAgKiBAcGFyYW0ge1JlY29yZH0gcmVjb3JkXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGFGaWVsZFxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufSB0cnVlIGluIGNhc2UgdGhlIHZpZXcgbmVlZHMgYW4gdXBkYXRlXG4gICAgICovXG4gICAgdXBkYXRlQ2VsbE5vZGUocmVjb3JkLCBkYXRhRmllbGQpIHtcbiAgICAgICAgbGV0IG1lICAgICAgICAgID0gdGhpcyxcbiAgICAgICAgICAgIHJvd0luZGV4ICAgID0gbWUuc3RvcmUuaW5kZXhPZihyZWNvcmQpLFxuICAgICAgICAgICAgY2VsbElkICAgICAgPSBtZS5nZXRDZWxsSWQocm93SW5kZXgsIGRhdGFGaWVsZCksXG4gICAgICAgICAgICBjZWxsTm9kZSAgICA9IFZEb21VdGlsLmZpbmQobWUudmRvbSwgY2VsbElkKSxcbiAgICAgICAgICAgIG5lZWRzVXBkYXRlID0gZmFsc2UsXG4gICAgICAgICAgICBjZWxsU3R5bGUsIGNlbGxWZG9tLCBjb2x1bW4sIGNvbHVtbkluZGV4O1xuXG4gICAgICAgIC8vIFRoZSB2ZG9tIG1pZ2h0IG5vdCBleGlzdCB5ZXQgPT4gbm90aGluZyB0byBkbyBpbiB0aGlzIGNhc2VcbiAgICAgICAgaWYgKGNlbGxOb2RlPy52ZG9tKSB7XG4gICAgICAgICAgICBjZWxsU3R5bGUgICA9IGNlbGxOb2RlLnZkb20uc3R5bGU7XG4gICAgICAgICAgICBjb2x1bW4gICAgICA9IG1lLmdldENvbHVtbihkYXRhRmllbGQpO1xuICAgICAgICAgICAgY29sdW1uSW5kZXggPSBjZWxsTm9kZS5pbmRleDtcbiAgICAgICAgICAgIGNlbGxWZG9tICAgID0gbWUuYXBwbHlSZW5kZXJlck91dHB1dCh7Y2VsbElkLCBjb2x1bW4sIGNvbHVtbkluZGV4LCByZWNvcmQsIHJvd0luZGV4fSk7XG4gICAgICAgICAgICBuZWVkc1VwZGF0ZSA9IHRydWU7XG5cbiAgICAgICAgICAgIC8vIFRoZSBjZWxsLXBvc2l0aW9uaW5nIGxvZ2ljIGhhcHBlbnMgb3V0c2lkZSBhcHBseVJlbmRlcmVyT3V0cHV0KClcbiAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gcHJlc2VydmUgdGhlc2Ugc3R5bGVzXG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKGNlbGxWZG9tLnN0eWxlLCB7XG4gICAgICAgICAgICAgICAgbGVmdCA6IGNlbGxTdHlsZS5sZWZ0LFxuICAgICAgICAgICAgICAgIHdpZHRoOiBjZWxsU3R5bGUud2lkdGhcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjZWxsTm9kZS5wYXJlbnROb2RlLmNuW2NvbHVtbkluZGV4XSA9IGNlbGxWZG9tXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmVlZHNVcGRhdGVcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIHVwZGF0ZU1vdW50ZWRBbmRWaXNpYmxlQ29sdW1ucygpIHtcbiAgICAgICAgbGV0IG1lICAgICAgID0gdGhpcyxcbiAgICAgICAgICAgIHtidWZmZXJDb2x1bW5SYW5nZSwgY29sdW1uUG9zaXRpb25zLCBtb3VudGVkQ29sdW1ucywgdmlzaWJsZUNvbHVtbnN9ID0gbWUsXG4gICAgICAgICAgICBpICAgICAgICAgICAgPSAwLFxuICAgICAgICAgICAgY291bnRDb2x1bW5zID0gY29sdW1uUG9zaXRpb25zLmdldENvdW50KCksXG4gICAgICAgICAgICBlbmRJbmRleCAgICAgPSBjb3VudENvbHVtbnMgLSAxLFxuICAgICAgICAgICAgeCAgICAgICAgICAgID0gbWUuc2Nyb2xsTGVmdCxcbiAgICAgICAgICAgIGNvbHVtbiwgc3RhcnRJbmRleDtcblxuICAgICAgICBpZiAoY291bnRDb2x1bW5zIDwgMSkge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKDsgaSA8IGNvdW50Q29sdW1uczsgaSsrKSB7XG4gICAgICAgICAgICBjb2x1bW4gPSBjb2x1bW5Qb3NpdGlvbnMuZ2V0QXQoaSk7XG5cbiAgICAgICAgICAgIGlmICh4ID49IGNvbHVtbi54ICYmIHggPD0gY29sdW1uLnggKyBjb2x1bW4ud2lkdGgpIHtcbiAgICAgICAgICAgICAgICBzdGFydEluZGV4ID0gaVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobWUuY29udGFpbmVyV2lkdGggKyB4IDwgY29sdW1uLngpIHtcbiAgICAgICAgICAgICAgICBlbmRJbmRleCA9IGkgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2aXNpYmxlQ29sdW1uc1swXSA9IHN0YXJ0SW5kZXg7IC8vIHVwZGF0ZSB0aGUgYXJyYXkgaW5saW5lXG4gICAgICAgIHZpc2libGVDb2x1bW5zWzFdID0gZW5kSW5kZXg7XG5cbiAgICAgICAgaWYgKHZpc2libGVDb2x1bW5zWzBdIDw9IG1vdW50ZWRDb2x1bW5zWzBdIHx8IHZpc2libGVDb2x1bW5zWzFdID49IG1vdW50ZWRDb2x1bW5zWzFdKSB7XG4gICAgICAgICAgICBzdGFydEluZGV4ID0gTWF0aC5tYXgoMCwgdmlzaWJsZUNvbHVtbnNbMF0gLSBidWZmZXJDb2x1bW5SYW5nZSk7XG4gICAgICAgICAgICBlbmRJbmRleCAgID0gTWF0aC5taW4oY291bnRDb2x1bW5zIC0gMSwgdmlzaWJsZUNvbHVtbnNbMV0gKyBidWZmZXJDb2x1bW5SYW5nZSk7XG5cbiAgICAgICAgICAgIG1lLm1vdW50ZWRDb2x1bW5zID0gW3N0YXJ0SW5kZXgsIGVuZEluZGV4XVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICB1cGRhdGVNb3VudGVkQW5kVmlzaWJsZVJvd3MoKSB7XG4gICAgICAgIGxldCBtZSAgICAgICAgICAgPSB0aGlzLFxuICAgICAgICAgICAge2J1ZmZlclJvd1JhbmdlLCBzdGFydEluZGV4LCBzdG9yZX0gPSBtZSxcbiAgICAgICAgICAgIGNvdW50UmVjb3JkcyA9IHN0b3JlLmdldENvdW50KCksXG4gICAgICAgICAgICBlbmRJbmRleCAgICAgPSBNYXRoLm1pbihjb3VudFJlY29yZHMsIHN0YXJ0SW5kZXggKyBtZS5hdmFpbGFibGVSb3dzKTtcblxuICAgICAgICBtZS52aXNpYmxlUm93c1swXSA9IHN0YXJ0SW5kZXg7IC8vIHVwZGF0ZSB0aGUgYXJyYXkgaW5saW5lXG4gICAgICAgIG1lLnZpc2libGVSb3dzWzFdID0gZW5kSW5kZXg7XG5cbiAgICAgICAgc3RhcnRJbmRleCA9IE1hdGgubWF4KDAsIHN0YXJ0SW5kZXggLSBidWZmZXJSb3dSYW5nZSk7XG4gICAgICAgIGVuZEluZGV4ICAgPSBNYXRoLm1pbihjb3VudFJlY29yZHMsIGVuZEluZGV4ICsgYnVmZmVyUm93UmFuZ2UpO1xuXG4gICAgICAgIG1lLm1vdW50ZWRSb3dzWzBdID0gc3RhcnRJbmRleDsgLy8gdXBkYXRlIHRoZSBhcnJheSBpbmxpbmVcbiAgICAgICAgbWUubW91bnRlZFJvd3NbMV0gPSBlbmRJbmRleFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gc2lsZW50PWZhbHNlXG4gICAgICovXG4gICAgdXBkYXRlU2Nyb2xsSGVpZ2h0KHNpbGVudD1mYWxzZSkge1xuICAgICAgICBsZXQgbWUgICAgICAgICAgID0gdGhpcyxcbiAgICAgICAgICAgIGNvdW50UmVjb3JkcyA9IG1lLiNpbml0aWFsVG90YWxTaXplIHx8IG1lLnN0b3JlPy5jb3VudCB8fCAwLFxuICAgICAgICAgICAge3Jvd0hlaWdodH0gID0gbWU7XG5cbiAgICAgICAgaWYgKGNvdW50UmVjb3JkcyA+IDAgJiYgcm93SGVpZ2h0ID4gMCkge1xuICAgICAgICAgICAgbWUudmRvbS5jblswXS5oZWlnaHQgPSBgJHsoY291bnRSZWNvcmRzICsgMSkgKiByb3dIZWlnaHR9cHhgO1xuICAgICAgICAgICAgIXNpbGVudCAmJiBtZS51cGRhdGUoKVxuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBOZW8uc2V0dXBDbGFzcyhHcmlkQm9keSk7XG4iLCJpbXBvcnQgQmFzZUNvbnRhaW5lciAgICAgZnJvbSAnLi4vY29udGFpbmVyL0Jhc2UubWpzJztcbmltcG9ydCBDbGFzc1N5c3RlbVV0aWwgICBmcm9tICcuLi91dGlsL0NsYXNzU3lzdGVtLm1qcyc7XG5pbXBvcnQgQ29sbGVjdGlvbiAgICAgICAgZnJvbSAnLi4vY29sbGVjdGlvbi9CYXNlLm1qcyc7XG5pbXBvcnQgR3JpZEJvZHkgICAgICAgICAgZnJvbSAnLi9Cb2R5Lm1qcyc7XG5pbXBvcnQgU2Nyb2xsTWFuYWdlciAgICAgZnJvbSAnLi9TY3JvbGxNYW5hZ2VyLm1qcyc7XG5pbXBvcnQgU3RvcmUgICAgICAgICAgICAgZnJvbSAnLi4vZGF0YS9TdG9yZS5tanMnO1xuaW1wb3J0IFZlcnRpY2FsU2Nyb2xsYmFyIGZyb20gJy4vVmVydGljYWxTY3JvbGxiYXIubWpzJztcbmltcG9ydCAqIGFzIGNvbHVtbiAgICAgICBmcm9tICcuL2NvbHVtbi9fZXhwb3J0Lm1qcyc7XG5pbXBvcnQgKiBhcyBoZWFkZXIgICAgICAgZnJvbSAnLi9oZWFkZXIvX2V4cG9ydC5tanMnO1xuaW1wb3J0IHtpc0Rlc2NyaXB0b3J9ICAgIGZyb20gJy4uL2NvcmUvQ29uZmlnU3ltYm9scy5tanMnO1xuXG4vKipcbiAqIEBjbGFzcyBOZW8uZ3JpZC5Db250YWluZXJcbiAqIEBleHRlbmRzIE5lby5jb250YWluZXIuQmFzZVxuICovXG5jbGFzcyBHcmlkQ29udGFpbmVyIGV4dGVuZHMgQmFzZUNvbnRhaW5lciB7XG4gICAgLyoqXG4gICAgICogQG1lbWJlciB7T2JqZWN0fSBjb2x1bW5UeXBlc1xuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAc3RhdGljXG4gICAgICovXG4gICAgc3RhdGljIGNvbHVtblR5cGVzID0ge1xuICAgICAgICBhbmltYXRlZENoYW5nZSAgOiBjb2x1bW4uQW5pbWF0ZWRDaGFuZ2UsXG4gICAgICAgIGFuaW1hdGVkQ3VycmVuY3k6IGNvbHVtbi5BbmltYXRlZEN1cnJlbmN5LFxuICAgICAgICBjb2x1bW4gICAgICAgICAgOiBjb2x1bW4uQmFzZSxcbiAgICAgICAgY29tcG9uZW50ICAgICAgIDogY29sdW1uLkNvbXBvbmVudCxcbiAgICAgICAgY3VycmVuY3kgICAgICAgIDogY29sdW1uLkN1cnJlbmN5LFxuICAgICAgICBpbmRleCAgICAgICAgICAgOiBjb2x1bW4uSW5kZXgsXG4gICAgICAgIHByb2dyZXNzICAgICAgICA6IGNvbHVtbi5Qcm9ncmVzc1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyIHtPYmplY3R9IGRlbGF5YWJsZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAc3RhdGljXG4gICAgICovXG4gICAgc3RhdGljIGRlbGF5YWJsZSA9IHtcbiAgICAgICAgb25SZXNpemU6IHt0eXBlOiAnYnVmZmVyJywgdGltZXI6IDMwMH1cbiAgICB9XG5cbiAgICBzdGF0aWMgY29uZmlnID0ge1xuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSBjbGFzc05hbWU9J05lby5ncmlkLkNvbnRhaW5lcidcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgY2xhc3NOYW1lOiAnTmVvLmdyaWQuQ29udGFpbmVyJyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gbnR5cGU9J2dyaWQtY29udGFpbmVyJ1xuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBudHlwZTogJ2dyaWQtY29udGFpbmVyJyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ1tdfSBiYXNlQ2xzPVsnbmVvLWdyaWQtY29udGFpbmVyJ11cbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgYmFzZUNsczogWyduZW8tZ3JpZC1jb250YWluZXInXSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbmZpZ3MgZm9yIE5lby5ncmlkLkJvZHlcbiAgICAgICAgICogQG1lbWJlciB7T2JqZWN0fG51bGx9IFtib2R5Xz17W2lzRGVzY3JpcHRvcl06IHRydWUsIG1lcmdlOiAnZGVlcCcsIHZhbHVlOiBudWxsfV1cbiAgICAgICAgICovXG4gICAgICAgIGJvZHlfOiB7XG4gICAgICAgICAgICBbaXNEZXNjcmlwdG9yXTogdHJ1ZSxcbiAgICAgICAgICAgIG1lcmdlICAgICAgICAgOiAnZGVlcCcsXG4gICAgICAgICAgICB2YWx1ZSAgICAgICAgIDogbnVsbFxuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogdHJ1ZSB1c2VzIGdyaWQucGx1Z2luLkNlbGxFZGl0aW5nXG4gICAgICAgICAqIEBtZW1iZXIge0Jvb2xlYW59IGNlbGxFZGl0aW5nXz1mYWxzZVxuICAgICAgICAgKiBAcmVhY3RpdmVcbiAgICAgICAgICovXG4gICAgICAgIGNlbGxFZGl0aW5nXzogZmFsc2UsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWZhdWx0IGNvbmZpZ3MgZm9yIGVhY2ggY29sdW1uXG4gICAgICAgICAqIEBtZW1iZXIge09iamVjdH0gY29sdW1uRGVmYXVsdHM9bnVsbFxuICAgICAgICAgKi9cbiAgICAgICAgY29sdW1uRGVmYXVsdHM6IG51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtPYmplY3RbXX0gY29sdW1uc189W11cbiAgICAgICAgICogQHJlYWN0aXZlXG4gICAgICAgICAqL1xuICAgICAgICBjb2x1bW5zXzogW10sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25maWdzIGZvciBOZW8uZ3JpZC5oZWFkZXIuVG9vbGJhclxuICAgICAgICAgKiBAbWVtYmVyIHtPYmplY3R8bnVsbH0gW2hlYWRlclRvb2xiYXJfPXtbaXNEZXNjcmlwdG9yXTogdHJ1ZSwgbWVyZ2U6ICdkZWVwJywgdmFsdWU6IG51bGx9XVxuICAgICAgICAgKi9cbiAgICAgICAgaGVhZGVyVG9vbGJhcl86IHtcbiAgICAgICAgICAgIFtpc0Rlc2NyaXB0b3JdOiB0cnVlLFxuICAgICAgICAgICAgbWVyZ2UgICAgICAgICA6ICdkZWVwJyxcbiAgICAgICAgICAgIHZhbHVlICAgICAgICAgOiBudWxsXG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IGxheW91dD0nYmFzZSdcbiAgICAgICAgICogQHJlYWN0aXZlXG4gICAgICAgICAqL1xuICAgICAgICBsYXlvdXQ6ICdiYXNlJyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gcm9sZT0nZ3JpZCdcbiAgICAgICAgICogQHJlYWN0aXZlXG4gICAgICAgICAqL1xuICAgICAgICByb2xlOiAnZ3JpZCcsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBOdW1iZXIgaW4gcHhcbiAgICAgICAgICogQG1lbWJlciB7TnVtYmVyfSByb3dIZWlnaHRfPTMyXG4gICAgICAgICAqIEByZWFjdGl2ZVxuICAgICAgICAgKi9cbiAgICAgICAgcm93SGVpZ2h0XzogMzIsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtOZW8uZ3JpZC5TY3JvbGxiYXJ8bnVsbH0gc2Nyb2xsYmFyPW51bGxcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgc2Nyb2xsYmFyOiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7Qm9vbGVhbn0gc2hvd0hlYWRlckZpbHRlcnNfPWZhbHNlXG4gICAgICAgICAqIEByZWFjdGl2ZVxuICAgICAgICAgKi9cbiAgICAgICAgc2hvd0hlYWRlckZpbHRlcnNfOiBmYWxzZSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge0Jvb2xlYW59IHNvcnRhYmxlXz10cnVlXG4gICAgICAgICAqIEByZWFjdGl2ZVxuICAgICAgICAgKi9cbiAgICAgICAgc29ydGFibGVfOiB0cnVlLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7TmVvLmRhdGEuU3RvcmV9IHN0b3JlXz1udWxsXG4gICAgICAgICAqIEByZWFjdGl2ZVxuICAgICAgICAgKi9cbiAgICAgICAgc3RvcmVfOiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7QXJyYXl8bnVsbH0gaXRlbXM9bnVsbFxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqIEByZWFjdGl2ZVxuICAgICAgICAgKi9cbiAgICAgICAgaXRlbXM6IG51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtPYmplY3R9IF92ZG9tXG4gICAgICAgICAqL1xuICAgICAgICBfdmRvbTpcbiAgICAgICAge2NsczogWyduZW8tZ3JpZC13cmFwcGVyJ10sIGNuOiBbXG4gICAgICAgICAgICB7J2FyaWEtY29sY291bnQnOiAwLCAnYXJpYS1yb3djb3VudCc6IDEsIGNuOiBbXX0gLy8gYXJpYS1yb3djb3VudCBpbmNsdWRlcyB0aGUgY29sdW1uIGhlYWRlcnNcbiAgICAgICAgXX1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXZSBkbyBub3QgbmVlZCB0aGUgZmlyc3QgZXZlbnQgdG8gdHJpZ2dlciBsb2dpYywgc2luY2UgYWZ0ZXJTZXRNb3VudGVkKCkgaGFuZGxlcyB0aGlzXG4gICAgICogQG1lbWJlciB7Qm9vbGVhbn0gaW5pdGlhbFJlc2l6ZUV2ZW50PXRydWVcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgaW5pdGlhbFJlc2l6ZUV2ZW50ID0gdHJ1ZVxuICAgIC8qKlxuICAgICAqIEBtZW1iZXIge05lby5ncmlkLlNjcm9sbE1hbmFnZXJ8bnVsbH0gc2Nyb2xsTWFuYWdlcj1udWxsXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHNjcm9sbE1hbmFnZXIgPSBudWxsXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnXG4gICAgICovXG4gICAgY29uc3RydWN0KGNvbmZpZykge1xuICAgICAgICBzdXBlci5jb25zdHJ1Y3QoY29uZmlnKTtcblxuICAgICAgICBsZXQgbWUgPSB0aGlzLFxuICAgICAgICAgICAge2FwcE5hbWUsIHJvd0hlaWdodCwgc3RvcmUsIHdpbmRvd0lkfSA9IG1lO1xuXG4gICAgICAgIG1lLml0ZW1zID0gW21lLmhlYWRlclRvb2xiYXIsIG1lLmJvZHldO1xuXG4gICAgICAgIG1lLnNjcm9sbGJhciA9IE5lby5jcmVhdGUoe1xuICAgICAgICAgICAgbW9kdWxlICA6IFZlcnRpY2FsU2Nyb2xsYmFyLFxuICAgICAgICAgICAgYXBwTmFtZSxcbiAgICAgICAgICAgIHBhcmVudElkOiBtZS5pZCxcbiAgICAgICAgICAgIHJvd0hlaWdodCxcbiAgICAgICAgICAgIHN0b3JlLFxuICAgICAgICAgICAgd2luZG93SWRcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbWUudmRvbS5jbi5wdXNoKG1lLnNjcm9sbGJhci5jcmVhdGVWZG9tUmVmZXJlbmNlKCkpXG5cbiAgICAgICAgbWUudmRvbS5pZCA9IG1lLmdldFdyYXBwZXJJZCgpO1xuXG4gICAgICAgIG1lLl9jb2x1bW5zID0gbWUuY3JlYXRlQ29sdW1ucyhtZS5jb2x1bW5zKTtcbiAgICAgICAgbWUudXBkYXRlQ29sQ291bnQoKTtcblxuICAgICAgICBtZS5hZGREb21MaXN0ZW5lcnMoe1xuICAgICAgICAgICAgcmVzaXplOiBtZS5vblJlc2l6ZSxcbiAgICAgICAgICAgIHNjb3BlIDogbWVcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IG1vdW50ZWRcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgYXN5bmMgYWRkUmVzaXplT2JzZXJ2ZXIobW91bnRlZCkge1xuICAgICAgICBsZXQgbWUgICAgICAgICAgICAgPSB0aGlzLFxuICAgICAgICAgICAge3dpbmRvd0lkfSAgICAgPSBtZSxcbiAgICAgICAgICAgIFJlc2l6ZU9ic2VydmVyID0gYXdhaXQgTmVvLmN1cnJlbnRXb3JrZXIuZ2V0QWRkb24oJ1Jlc2l6ZU9ic2VydmVyJywgd2luZG93SWQpLFxuICAgICAgICAgICAgcmVzaXplUGFyYW1zICAgPSB7aWQ6IG1lLmlkLCB3aW5kb3dJZH07XG5cbiAgICAgICAgaWYgKG1vdW50ZWQpIHtcbiAgICAgICAgICAgIFJlc2l6ZU9ic2VydmVyLnJlZ2lzdGVyKHJlc2l6ZVBhcmFtcyk7XG4gICAgICAgICAgICBhd2FpdCBtZS5wYXNzU2l6ZVRvQm9keSgpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtZS5pbml0aWFsUmVzaXplRXZlbnQgPSB0cnVlO1xuICAgICAgICAgICAgUmVzaXplT2JzZXJ2ZXIudW5yZWdpc3RlcihyZXNpemVQYXJhbXMpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgYWZ0ZXIgdGhlIGNlbGxFZGl0aW5nIGNvbmZpZyBnb3QgY2hhbmdlZFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gdmFsdWVcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IG9sZFZhbHVlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGFmdGVyU2V0Q2VsbEVkaXRpbmcodmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgaW1wb3J0KCcuL3BsdWdpbi9DZWxsRWRpdGluZy5tanMnKS50aGVuKG1vZHVsZSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IG1lICAgICAgICA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIHthcHBOYW1lfSA9IG1lLFxuICAgICAgICAgICAgICAgICAgICBwbHVnaW5zICAgPSBtZS5wbHVnaW5zIHx8IFtdO1xuXG4gICAgICAgICAgICAgICAgcGx1Z2lucy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgbW9kdWxlOiBtb2R1bGUuZGVmYXVsdCxcbiAgICAgICAgICAgICAgICAgICAgYXBwTmFtZVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgbWUucGx1Z2lucyA9IHBsdWdpbnNcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgYWZ0ZXIgdGhlIGNvbHVtbnMgY29uZmlnIGdvdCBjaGFuZ2VkXG4gICAgICogQHBhcmFtIHtOZW8uY29sbGVjdGlvbi5CYXNlfG51bGx9ICAgICAgICAgIHZhbHVlXG4gICAgICogQHBhcmFtIHtPYmplY3RbXXxOZW8uY29sbGVjdGlvbi5CYXNlfG51bGx9IG9sZFZhbHVlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGFzeW5jIGFmdGVyU2V0Q29sdW1ucyh2YWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgbGV0IG1lICAgICAgICAgICAgICA9IHRoaXMsXG4gICAgICAgICAgICB7aGVhZGVyVG9vbGJhcn0gPSBtZTtcblxuICAgICAgICAvLyAtIElmIGNvbHVtbnMgY2hhbmdlZCBhdCBydW4tdGltZSBPUlxuICAgICAgICAvLyAtIEluIGNhc2UgdGhlIGBoZWFkZXIuVG9vbGJhciNjcmVhdGVJdGVtcygpYCBtZXRob2QgaGFzIHJ1biBiZWZvcmUgY29sdW1ucyB3aGVyZSBhdmFpbGFibGVcbiAgICAgICAgaWYgKG9sZFZhbHVlPy5jb3VudCB8fCAodmFsdWU/LmNvdW50ICYmIGhlYWRlclRvb2xiYXI/LmlzQ29uc3RydWN0ZWQpKSB7XG4gICAgICAgICAgICBoZWFkZXJUb29sYmFyPy5jcmVhdGVJdGVtcygpXG5cbiAgICAgICAgICAgIGF3YWl0IG1lLnRpbWVvdXQoNTApO1xuXG4gICAgICAgICAgICBhd2FpdCBtZS5wYXNzU2l6ZVRvQm9keSgpO1xuXG4gICAgICAgICAgICBtZS5ib2R5Py5jcmVhdGVWaWV3RGF0YSgpXG4gICAgICAgIH1cblxuICAgICAgICBtZS5jb25maWdzQXBwbGllZCAmJiBtZS51cGRhdGVDb2xDb3VudCgpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIGFmdGVyIHRoZSBtb3VudGVkIGNvbmZpZyBnb3QgY2hhbmdlZFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gdmFsdWVcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IG9sZFZhbHVlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGFmdGVyU2V0TW91bnRlZCh2YWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgc3VwZXIuYWZ0ZXJTZXRNb3VudGVkKHZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICAgIG9sZFZhbHVlICE9PSB1bmRlZmluZWQgJiYgdGhpcy5hZGRSZXNpemVPYnNlcnZlcih2YWx1ZSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgYWZ0ZXIgdGhlIHJvd0hlaWdodCBjb25maWcgZ290IGNoYW5nZWRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdmFsdWVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gb2xkVmFsdWVcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgYWZ0ZXJTZXRSb3dIZWlnaHQodmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSA+IDApIHtcbiAgICAgICAgICAgIGxldCB7Ym9keSwgc2Nyb2xsYmFyfSA9IHRoaXM7XG5cbiAgICAgICAgICAgIGlmIChzY3JvbGxiYXIpIHtcbiAgICAgICAgICAgICAgICBzY3JvbGxiYXIucm93SGVpZ2h0ID0gdmFsdWVcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGJvZHkpIHtcbiAgICAgICAgICAgICAgICBib2R5LnJvd0hlaWdodCA9IHZhbHVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgYWZ0ZXIgdGhlIHNob3dIZWFkZXJGaWx0ZXJzIGNvbmZpZyBnb3QgY2hhbmdlZFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gdmFsdWVcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IG9sZFZhbHVlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGFmdGVyU2V0U2hvd0hlYWRlckZpbHRlcnModmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgIGlmIChvbGRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmhlYWRlclRvb2xiYXIuc2hvd0hlYWRlckZpbHRlcnMgPSB2YWx1ZVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIGFmdGVyIHRoZSBzb3J0YWJsZSBjb25maWcgZ290IGNoYW5nZWRcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHZhbHVlXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBvbGRWYWx1ZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBhZnRlclNldFNvcnRhYmxlKHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICBpZiAob2xkVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5oZWFkZXJUb29sYmFyLnNvcnRhYmxlID0gdmFsdWVcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJlZCBhZnRlciB0aGUgc3RvcmUgY29uZmlnIGdvdCBjaGFuZ2VkXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG9sZFZhbHVlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGFmdGVyU2V0U3RvcmUodmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgIGxldCBtZSAgICAgICAgPSB0aGlzLFxuICAgICAgICAgICAgbGlzdGVuZXJzID0ge1xuICAgICAgICAgICAgICAgIGZpbHRlcjogbWUub25TdG9yZUZpbHRlcixcbiAgICAgICAgICAgICAgICBsb2FkICA6IG1lLm9uU3RvcmVMb2FkLFxuICAgICAgICAgICAgICAgIHNjb3BlIDogbWVcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgdmFsdWUgICA/Lm9uKGxpc3RlbmVycyk7XG4gICAgICAgIG9sZFZhbHVlPy51bihsaXN0ZW5lcnMpO1xuXG4gICAgICAgIC8vIGluIGNhc2Ugd2UgZHluYW1pY2FsbHkgY2hhbmdlIHRoZSBzdG9yZSwgZ3JpZC5Cb2R5IG5lZWRzIHRvIGdldCB0aGUgbmV3IHJlZmVyZW5jZVxuICAgICAgICBpZiAobWUuYm9keSkge1xuICAgICAgICAgICAgbWUuYm9keS5zdG9yZSA9IHZhbHVlXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgYmVmb3JlIHRoZSBib2R5IGNvbmZpZyBnZXRzIGNoYW5nZWQuXG4gICAgICogQHBhcmFtIHtPYmplY3R8TmVvLmdyaWQuQm9keXxudWxsfSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fE5lby5ncmlkLkJvZHl8bnVsbH0gb2xkVmFsdWVcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgYmVmb3JlU2V0Qm9keSh2YWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgY29uc3QgbWUgPSB0aGlzO1xuXG4gICAgICAgIHJldHVybiBDbGFzc1N5c3RlbVV0aWwuYmVmb3JlU2V0SW5zdGFuY2UodmFsdWUsIEdyaWRCb2R5LCB7XG4gICAgICAgICAgICBmbGV4ICAgICAgICAgOiAxLFxuICAgICAgICAgICAgZ3JpZENvbnRhaW5lcjogbWUsXG4gICAgICAgICAgICBwYXJlbnRJZCAgICAgOiBtZS5pZCxcbiAgICAgICAgICAgIHN0b3JlICAgICAgICA6IG1lLnN0b3JlXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIGJlZm9yZSB0aGUgY29sdW1ucyBjb25maWcgZ2V0cyBjaGFuZ2VkLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0W119IHZhbHVlXG4gICAgICogQHBhcmFtIHtPYmplY3RbXX0gb2xkVmFsdWVcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgYmVmb3JlU2V0Q29sdW1ucyh2YWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnc0FwcGxpZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUNvbHVtbnModmFsdWUpXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWVcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgYmVmb3JlIHRoZSBoZWFkZXJUb29sYmFyIGNvbmZpZyBnZXRzIGNoYW5nZWQuXG4gICAgICogQHBhcmFtIHtPYmplY3R8TmVvLmdyaWQuaGVhZGVyLlRvb2xiYXJ8bnVsbH0gdmFsdWVcbiAgICAgKiBAcGFyYW0ge09iamVjdHxOZW8uZ3JpZC5oZWFkZXIuVG9vbGJhcnxudWxsfSBvbGRWYWx1ZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBiZWZvcmVTZXRIZWFkZXJUb29sYmFyKHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICBjb25zdCBtZSA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuIENsYXNzU3lzdGVtVXRpbC5iZWZvcmVTZXRJbnN0YW5jZSh2YWx1ZSwgaGVhZGVyLlRvb2xiYXIsIHtcbiAgICAgICAgICAgIHBhcmVudElkICAgICAgICAgOiBtZS5pZCxcbiAgICAgICAgICAgIHNob3dIZWFkZXJGaWx0ZXJzOiBtZS5zaG93SGVhZGVyRmlsdGVycyxcbiAgICAgICAgICAgIHNvcnRhYmxlICAgICAgICAgOiBtZS5zb3J0YWJsZVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJlZCBiZWZvcmUgdGhlIHN0b3JlIGNvbmZpZyBnZXRzIGNoYW5nZWQuXG4gICAgICogQHBhcmFtIHtPYmplY3R8TmVvLmRhdGEuU3RvcmV8bnVsbH0gdmFsdWVcbiAgICAgKiBAcGFyYW0ge05lby5kYXRhLlN0b3JlfSAgICAgICAgICAgICBvbGRWYWx1ZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBiZWZvcmVTZXRTdG9yZSh2YWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IENsYXNzU3lzdGVtVXRpbC5iZWZvcmVTZXRJbnN0YW5jZSh2YWx1ZSwgU3RvcmUpXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWVcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbiBjYXNlIHlvdSB3YW50IHRvIHVwZGF0ZSBtdWx0aXBsZSBleGlzdGluZyByZWNvcmRzIGluIHBhcmFsbGVsLFxuICAgICAqIHVzaW5nIHRoaXMgbWV0aG9kIGlzIGZhc3RlciB0aGFuIHVwZGF0aW5nIGVhY2ggcmVjb3JkIG9uZSBieSBvbmUuXG4gICAgICogQXQgbGVhc3QgdW50aWwgd2UgaW50cm9kdWNlIHJvdyBiYXNlZCB2ZG9tIHVwZGF0ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3RbXX0gcmVjb3Jkc1xuICAgICAqL1xuICAgIGJ1bGtVcGRhdGVSZWNvcmRzKHJlY29yZHMpIHtcbiAgICAgICAgbGV0IHtib2R5LCBzdG9yZX0gPSB0aGlzLFxuICAgICAgICAgICAge2tleVByb3BlcnR5fSA9IHN0b3JlO1xuXG4gICAgICAgIGlmIChib2R5KSB7XG4gICAgICAgICAgICBib2R5LnNpbGVudFZkb21VcGRhdGUgPSB0cnVlO1xuXG4gICAgICAgICAgICByZWNvcmRzLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgICAgICAgICAgc3RvcmUuZ2V0KGl0ZW1ba2V5UHJvcGVydHldKT8uc2V0KGl0ZW0pXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgYm9keS5zaWxlbnRWZG9tVXBkYXRlID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGJvZHkudXBkYXRlKClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0W119IGNvbHVtbnNcbiAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgKi9cbiAgICBjcmVhdGVDb2x1bW5zKGNvbHVtbnMpIHtcbiAgICAgICAgbGV0IG1lICAgICAgICAgICAgICAgPSB0aGlzLFxuICAgICAgICAgICAge2NvbHVtbkRlZmF1bHRzfSA9IG1lLFxuICAgICAgICAgICAgaGVhZGVyQnV0dG9ucyAgICA9IFtdLFxuICAgICAgICAgICAgc29ydGVycyAgICAgICAgICA9IG1lLnN0b3JlPy5zb3J0ZXJzLFxuICAgICAgICAgICAgY29sdW1uQ2xhc3MsIHJlbmRlcmVyO1xuXG4gICAgICAgIGNvbHVtbnM/LmZvckVhY2goKGNvbHVtbiwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHJlbmRlcmVyID0gY29sdW1uLnJlbmRlcmVyO1xuXG4gICAgICAgICAgICBjb2x1bW5EZWZhdWx0cyAmJiBOZW8uYXNzaWduRGVmYXVsdHMoY29sdW1uLCBjb2x1bW5EZWZhdWx0cyk7XG5cbiAgICAgICAgICAgIGlmIChyZW5kZXJlciAmJiBOZW8uaXNTdHJpbmcocmVuZGVyZXIpICYmIG1lW3JlbmRlcmVyXSkge1xuICAgICAgICAgICAgICAgIGNvbHVtbi5yZW5kZXJlciA9IG1lW3JlbmRlcmVyXVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc29ydGVycz8uWzBdICYmIGNvbHVtbi5kYXRhRmllbGQgPT09IHNvcnRlcnNbMF0ucHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICBjb2x1bW4uaXNTb3J0ZWQgPSBzb3J0ZXJzWzBdLmRpcmVjdGlvblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb2x1bW4ubGlzdGVuZXJzID0ge1xuICAgICAgICAgICAgICAgIHNvcnQgOiBtZS5vblNvcnRDb2x1bW4sXG4gICAgICAgICAgICAgICAgc2NvcGU6IG1lXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBoZWFkZXJCdXR0b25zLnB1c2goY29sdW1uKTtcblxuICAgICAgICAgICAgaWYgKGNvbHVtbi5jb21wb25lbnQgJiYgIWNvbHVtbi50eXBlKSB7XG4gICAgICAgICAgICAgICAgY29sdW1uLnR5cGUgPSAnY29tcG9uZW50J1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb2x1bW5DbGFzcyA9IG1lLmNvbnN0cnVjdG9yLmNvbHVtblR5cGVzW2NvbHVtbi50eXBlIHx8ICdjb2x1bW4nXTtcbiAgICAgICAgICAgIGRlbGV0ZSBjb2x1bW4udHlwZTtcblxuICAgICAgICAgICAgY29sdW1uc1tpbmRleF0gPSBOZW8uY3JlYXRlKGNvbHVtbkNsYXNzLCB7XG4gICAgICAgICAgICAgICAgcGFyZW50ICA6IG1lLFxuICAgICAgICAgICAgICAgIHdpbmRvd0lkOiBtZS53aW5kb3dJZCxcbiAgICAgICAgICAgICAgICAuLi5jb2x1bW5cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuXG4gICAgICAgIG1lLmhlYWRlclRvb2xiYXIuaXRlbXMgPSBoZWFkZXJCdXR0b25zO1xuICAgICAgICBtZS5oZWFkZXJUb29sYmFyLmNyZWF0ZUl0ZW1zKCk7XG5cbiAgICAgICAgaWYgKE5lby50eXBlT2YobWUuX2NvbHVtbnMpID09PSAnTmVvSW5zdGFuY2UnKSB7XG4gICAgICAgICAgICBtZS5fY29sdW1ucy5jbGVhcigpO1xuICAgICAgICAgICAgbWUuX2NvbHVtbnMuYWRkKGNvbHVtbnMpO1xuXG4gICAgICAgICAgICByZXR1cm4gbWUuX2NvbHVtbnNcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBOZW8uY3JlYXRlKENvbGxlY3Rpb24sIHtcbiAgICAgICAgICAgIGtleVByb3BlcnR5OiAnZGF0YUZpZWxkJyxcbiAgICAgICAgICAgIGl0ZW1zICAgICAgOiBjb2x1bW5zLFxuICAgICAgICAgICAgbGlzdGVuZXJzICA6IHttdXRhdGU6IG1lLm9uQ29sdW1uc011dGF0ZSwgc2NvcGU6IG1lfVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBhcmdzXG4gICAgICovXG4gICAgZGVzdHJveSguLi5hcmdzKSB7XG4gICAgICAgIGxldCBtZSA9IHRoaXM7XG5cbiAgICAgICAgbWUuc3RvcmUgPSBudWxsOyAvLyByZW1vdmUgdGhlIGxpc3RlbmVyc1xuXG4gICAgICAgIG1lLnNjcm9sbE1hbmFnZXIuZGVzdHJveSgpO1xuXG4gICAgICAgIG1lLm1vdW50ZWQgJiYgTmVvLm1haW4uYWRkb24uUmVzaXplT2JzZXJ2ZXIudW5yZWdpc3Rlcih7XG4gICAgICAgICAgICBpZCAgICAgIDogbWUuaWQsXG4gICAgICAgICAgICB3aW5kb3dJZDogbWUud2luZG93SWRcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc3VwZXIuZGVzdHJveSguLi5hcmdzKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAqL1xuICAgIGdldFZkb21Sb290KCkge1xuICAgICAgICByZXR1cm4gdGhpcy52ZG9tLmNuWzBdXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHJldHVybnMge05lby52ZG9tLlZOb2RlfVxuICAgICAqL1xuICAgIGdldFZub2RlUm9vdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudm5vZGUuY2hpbGROb2Rlc1swXVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9XG4gICAgICovXG4gICAgZ2V0V3JhcHBlcklkKCkge1xuICAgICAgICByZXR1cm4gYCR7dGhpcy5pZH1fX3dyYXBwZXJgXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICAgKi9cbiAgICBvbkNvbHVtbnNNdXRhdGUoZGF0YSkge1xuICAgICAgICB0aGlzLnVwZGF0ZUNvbENvdW50KClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIG9uQ29uc3RydWN0ZWQoKSB7XG4gICAgICAgIHN1cGVyLm9uQ29uc3RydWN0ZWQoKTtcblxuICAgICAgICBsZXQgbWUgPSB0aGlzO1xuXG4gICAgICAgIG1lLnNjcm9sbE1hbmFnZXIgPSBOZW8uY3JlYXRlKHtcbiAgICAgICAgICAgIGdyaWRCb2R5ICAgICA6IG1lLmJvZHksXG4gICAgICAgICAgICBtb2R1bGUgICAgICAgOiBTY3JvbGxNYW5hZ2VyLFxuICAgICAgICAgICAgZ3JpZENvbnRhaW5lcjogbWVcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxuICAgICAqL1xuICAgIGFzeW5jIG9uUmVzaXplKGRhdGEpIHtcbiAgICAgICAgbGV0IG1lID0gdGhpcztcblxuICAgICAgICBpZiAoIW1lLmluaXRpYWxSZXNpemVFdmVudCkge1xuICAgICAgICAgICAgYXdhaXQgbWUucGFzc1NpemVUb0JvZHkodHJ1ZSk7XG5cbiAgICAgICAgICAgIG1lLmJvZHkudXBkYXRlTW91bnRlZEFuZFZpc2libGVDb2x1bW5zKCk7XG5cbiAgICAgICAgICAgIGF3YWl0IG1lLmhlYWRlclRvb2xiYXIucGFzc1NpemVUb0JvZHkoKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWUuaW5pdGlhbFJlc2l6ZUV2ZW50ID0gZmFsc2VcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG9wdHMuZGlyZWN0aW9uXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG9wdHMucHJvcGVydHlcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgb25Tb3J0Q29sdW1uKG9wdHMpIHtcbiAgICAgICAgbGV0IG1lID0gdGhpcztcblxuICAgICAgICBtZS5zdG9yZS5zb3J0KG9wdHMpO1xuICAgICAgICBtZS5yZW1vdmVTb3J0aW5nQ3NzKG9wdHMucHJvcGVydHkpO1xuICAgICAgICBvcHRzLmRpcmVjdGlvbiAmJiBtZS5ib2R5Lm9uU3RvcmVMb2FkKHtpdGVtczogbWUuc3RvcmUuaXRlbXN9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIG9uU3RvcmVGaWx0ZXIoKSB7XG4gICAgICAgIHRoaXMudXBkYXRlUm93Q291bnQoKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgIGRhdGFcbiAgICAgKiBAcGFyYW0ge09iamVjdFtdfSBkYXRhLml0ZW1zXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9ICAgW2RhdGEudG90YWxdXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIG9uU3RvcmVMb2FkKGRhdGEpIHtcbiAgICAgICAgbGV0IG1lICAgICAgICAgPSB0aGlzLFxuICAgICAgICAgICAgdG90YWxDb3VudCA9IGRhdGEudG90YWwgPyBkYXRhLnRvdGFsIDogdGhpcy5zdG9yZS5jb3VudDtcblxuICAgICAgICBtZS51cGRhdGVSb3dDb3VudCh0b3RhbENvdW50KTtcblxuICAgICAgICBpZiAobWUuc3RvcmUuc29ydGVycz8ubGVuZ3RoIDwgMSkge1xuICAgICAgICAgICAgbWUucmVtb3ZlU29ydGluZ0NzcygpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHNpbGVudD1mYWxzZVxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxuICAgICAqL1xuICAgIGFzeW5jIHBhc3NTaXplVG9Cb2R5KHNpbGVudD1mYWxzZSkge1xuICAgICAgICBsZXQgbWUgICAgICAgICAgICAgICAgICAgICAgICAgID0gdGhpcyxcbiAgICAgICAgICAgIFtjb250YWluZXJSZWN0LCBoZWFkZXJSZWN0XSA9IGF3YWl0IG1lLmdldERvbVJlY3QoW21lLmlkLCBtZS5oZWFkZXJUb29sYmFyLmlkXSk7XG5cbiAgICAgICAgLy8gZGVsYXkgZm9yIHNsb3cgY29ubmVjdGlvbnMsIHdoZXJlIHRoZSBjb250YWluZXItc2l6aW5nIGlzIG5vdCBkb25lIHlldFxuICAgICAgICBpZiAoY29udGFpbmVyUmVjdC5oZWlnaHQgPT09IGhlYWRlclJlY3QuaGVpZ2h0KSB7XG4gICAgICAgICAgICBhd2FpdCBtZS50aW1lb3V0KDEwMCk7XG4gICAgICAgICAgICBhd2FpdCBtZS5wYXNzU2l6ZVRvQm9keShzaWxlbnQpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtZS5ib2R5W3NpbGVudCA/ICdzZXRTaWxlbnQnIDogJ3NldCddKHtcbiAgICAgICAgICAgICAgICBhdmFpbGFibGVIZWlnaHQ6IGNvbnRhaW5lclJlY3QuaGVpZ2h0IC0gaGVhZGVyUmVjdC5oZWlnaHQsXG4gICAgICAgICAgICAgICAgY29udGFpbmVyV2lkdGggOiBjb250YWluZXJSZWN0LndpZHRoXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGFGaWVsZFxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICByZW1vdmVTb3J0aW5nQ3NzKGRhdGFGaWVsZCkge1xuICAgICAgICB0aGlzLmhlYWRlclRvb2xiYXI/Lml0ZW1zLmZvckVhY2goY29sdW1uID0+IHtcbiAgICAgICAgICAgIGlmIChjb2x1bW4uZGF0YUZpZWxkICE9PSBkYXRhRmllbGQpIHtyZXR1cm47XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coY29sdW1uLCBkYXRhRmllbGQpXG4gICAgICAgICAgICAgICAgY29sdW1uLnJlbW92ZVNvcnRpbmdDc3MoKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgZm9yIGtleWJvYXJkIG5hdmlnYXRpb24gKHNlbGVjdGlvbiBtb2RlbHMpXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGluZGV4XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHN0ZXBcbiAgICAgKi9cbiAgICBzY3JvbGxCeUNvbHVtbnMoaW5kZXgsIHN0ZXApIHtcbiAgICAgICAgbGV0IG1lICAgICAgICAgICA9IHRoaXMsXG4gICAgICAgICAgICB7Ym9keX0gICAgICAgPSBtZSxcbiAgICAgICAgICAgIHtjb2x1bW5Qb3NpdGlvbnMsIGNvbnRhaW5lcldpZHRoLCBtb3VudGVkQ29sdW1ucywgdmlzaWJsZUNvbHVtbnN9ID0gYm9keSxcbiAgICAgICAgICAgIGNvdW50Q29sdW1ucyA9IGNvbHVtblBvc2l0aW9ucy5nZXRDb3VudCgpLFxuICAgICAgICAgICAgbmV3SW5kZXggICAgID0gaW5kZXggKyBzdGVwLFxuICAgICAgICAgICAgY29sdW1uLCBtb3VudGVkLCBzY3JvbGxMZWZ0LCB2aXNpYmxlO1xuXG4gICAgICAgIGlmIChuZXdJbmRleCA+PSBjb3VudENvbHVtbnMpIHtcbiAgICAgICAgICAgIG5ld0luZGV4ICU9IGNvdW50Q29sdW1ucztcbiAgICAgICAgICAgIHN0ZXAgICAgID0gbmV3SW5kZXggLSBpbmRleFxuICAgICAgICB9XG5cbiAgICAgICAgd2hpbGUgKG5ld0luZGV4IDwgMCkge1xuICAgICAgICAgICAgbmV3SW5kZXggKz0gY291bnRDb2x1bW5zO1xuICAgICAgICAgICAgc3RlcCAgICAgKz0gY291bnRDb2x1bW5zXG4gICAgICAgIH1cblxuICAgICAgICBtb3VudGVkID0gbmV3SW5kZXggPj0gbW91bnRlZENvbHVtbnNbMF0gJiYgbmV3SW5kZXggPD0gbW91bnRlZENvbHVtbnNbMV07XG5cbiAgICAgICAgLy8gTm90IHVzaW5nID49IG9yIDw9LCBzaW5jZSB0aGUgZmlyc3QgLyBsYXN0IGNvbHVtbiBtaWdodCBub3QgYmUgZnVsbHkgdmlzaWJsZVxuICAgICAgICB2aXNpYmxlID0gbmV3SW5kZXggPiB2aXNpYmxlQ29sdW1uc1swXSAmJiBuZXdJbmRleCA8IHZpc2libGVDb2x1bW5zWzFdO1xuXG4gICAgICAgIGlmICghdmlzaWJsZSkge1xuICAgICAgICAgICAgLy8gTGVhdmluZyB0aGUgbW91bnRlZCBhcmVhIHdpbGwgcmUtY2FsY3VsYXRlIHRoZSB2aXNpYmxlQ29sdW1ucyBmb3IgdXNcbiAgICAgICAgICAgIGlmIChtb3VudGVkKSB7XG4gICAgICAgICAgICAgICAgdmlzaWJsZUNvbHVtbnNbMF0gKz0gc3RlcDtcbiAgICAgICAgICAgICAgICB2aXNpYmxlQ29sdW1uc1sxXSArPSBzdGVwXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbHVtbiA9IGNvbHVtblBvc2l0aW9ucy5nZXRBdChuZXdJbmRleCk7XG5cbiAgICAgICAgICAgIGlmIChzdGVwIDwgMCkge1xuICAgICAgICAgICAgICAgIHNjcm9sbExlZnQgPSBjb2x1bW4ueFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzY3JvbGxMZWZ0ID0gY29sdW1uLnggLSBjb250YWluZXJXaWR0aCArIGNvbHVtbi53aWR0aFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBOZW8ubWFpbi5Eb21BY2Nlc3Muc2Nyb2xsVG8oe1xuICAgICAgICAgICAgICAgIGRpcmVjdGlvbjogJ2xlZnQnLFxuICAgICAgICAgICAgICAgIGlkICAgICAgIDogbWUuaWQsXG4gICAgICAgICAgICAgICAgdmFsdWUgICAgOiBzY3JvbGxMZWZ0LFxuICAgICAgICAgICAgICAgIHdpbmRvd0lkIDogbWUud2luZG93SWRcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtzaWxlbnQ9ZmFsc2VdXG4gICAgICovXG4gICAgdXBkYXRlQ29sQ291bnQoc2lsZW50PWZhbHNlKSB7XG4gICAgICAgIGxldCBtZSA9IHRoaXM7XG5cbiAgICAgICAgbWUuZ2V0VmRvbVJvb3QoKVsnYXJpYS1jb2xjb3VudCddID0gbWUuY29sdW1ucy5jb3VudDtcbiAgICAgICAgIXNpbGVudCAmJiBtZS51cGRhdGUoKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY291bnRdIFRoZSB0b3RhbCBudW1iZXIgb2Ygcm93cyBpbiB0aGUgc3RvcmUuIE9wdGlvbmFsLCB3aWxsIHVzZSBzdG9yZS5jb3VudCBpZiBub3QgcHJvdmlkZWQuXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbc2lsZW50PWZhbHNlXVxuICAgICAqL1xuICAgIHVwZGF0ZVJvd0NvdW50KGNvdW50LCBzaWxlbnQ9ZmFsc2UpIHtcbiAgICAgICAgbGV0IG1lICAgICAgICAgPSB0aGlzLFxuICAgICAgICAgICAgZmluYWxDb3VudCA9IGNvdW50ID8gY291bnQgOiBtZS5zdG9yZS5jb3VudDtcblxuICAgICAgICBtZS5nZXRWZG9tUm9vdCgpWydhcmlhLXJvd2NvdW50J10gPSBmaW5hbENvdW50ICsgMTtcbiAgICAgICAgIXNpbGVudCAmJiBtZS51cGRhdGUoKVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTmVvLnNldHVwQ2xhc3MoR3JpZENvbnRhaW5lcik7XG4iLCJpbXBvcnQgQmFzZSBmcm9tICcuLi9jb3JlL0Jhc2UubWpzJztcblxuLyoqXG4gKiBAY2xhc3MgTmVvLmdyaWQuU2Nyb2xsTWFuYWdlclxuICogQGV4dGVuZHMgTmVvLmNvcmUuQmFzZVxuICovXG5jbGFzcyBTY3JvbGxNYW5hZ2VyIGV4dGVuZHMgQmFzZSB7XG4gICAgLyoqXG4gICAgICogQG1lbWJlciB7T2JqZWN0fSBkZWxheWFibGVcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIHN0YXRpYyBkZWxheWFibGUgPSB7XG4gICAgICAgIG9uQm9keVNjcm9sbCAgICAgOiB7dHlwZTogJ3Rocm90dGxlJywgdGltZXI6ICAxNn0sXG4gICAgICAgIG9uQm9keVNjcm9sbEVuZCAgOiB7dHlwZTogJ2J1ZmZlcicsICAgdGltZXI6IDE1MH0sXG4gICAgICAgIG9uQ29udGFpbmVyU2Nyb2xsOiB7dHlwZTogJ3Rocm90dGxlJywgdGltZXI6ICAxNn1cbiAgICB9XG5cbiAgICBzdGF0aWMgY29uZmlnID0ge1xuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSBjbGFzc05hbWU9J05lby5ncmlkLlNjcm9sbE1hbmFnZXInXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIGNsYXNzTmFtZTogJ05lby5ncmlkLlNjcm9sbE1hbmFnZXInLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7TnVtYmVyfSBzY3JvbGxMZWZ0Xz0wXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICogQHJlYWN0aXZlXG4gICAgICAgICAqL1xuICAgICAgICBzY3JvbGxMZWZ0XzogMCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge051bWJlcn0gc2Nyb2xsVG9wXz0wXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICogQHJlYWN0aXZlXG4gICAgICAgICAqL1xuICAgICAgICBzY3JvbGxUb3BfOiAwXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG1lbWJlciB7TmVvLmdyaWQuQm9keXxudWxsfSBncmlkQm9keT1udWxsXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGdyaWRCb2R5ID0gbnVsbFxuICAgIC8qKlxuICAgICAqIEBtZW1iZXIge05lby5ncmlkLkNvbnRhaW5lcnxudWxsfSBncmlkQ29udGFpbmVyPW51bGxcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgZ3JpZENvbnRhaW5lciA9IG51bGxcbiAgICAvKipcbiAgICAgKiBTdG9yaW5nIHRvdWNobW92ZSBwb3NpdGlvbiBmb3IgbW9iaWxlIGVudnNcbiAgICAgKiBAbWVtYmVyIHtOdW1iZXJ9IGxhc3RUb3VjaFg9MFxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBsYXN0VG91Y2hYID0gMFxuICAgIC8qKlxuICAgICAqIFN0b3JpbmcgdG91Y2htb3ZlIHBvc2l0aW9uIGZvciBtb2JpbGUgZW52c1xuICAgICAqIEBtZW1iZXIge051bWJlcn0gbGFzdFRvdWNoWT0wXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGxhc3RUb3VjaFkgPSAwXG4gICAgLyoqXG4gICAgICogRmxhZyBmb3IgaWRlbnRpZnlpbmcgdGhlIG93bmVyc2hpcCBvZiBhIHRvdWNobW92ZSBvcGVyYXRpb25cbiAgICAgKiBAbWVtYmVyIHsnYm9keSd8J2NvbnRhaW5lcid8bnVsbH0gdG91Y2hNb3ZlT3duZXI9bnVsbFxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICB0b3VjaE1vdmVPd25lciA9IG51bGxcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3QoY29uZmlnKSB7XG4gICAgICAgIHN1cGVyLmNvbnN0cnVjdChjb25maWcpO1xuXG4gICAgICAgIGxldCBtZSA9IHRoaXM7XG5cbiAgICAgICAgbWUuZ3JpZEJvZHkuYWRkRG9tTGlzdGVuZXJzKHtcbiAgICAgICAgICAgIHNjcm9sbCAgICAgOiBtZS5vbkJvZHlTY3JvbGwsXG4gICAgICAgICAgICB0b3VjaGNhbmNlbDogbWUub25Ub3VjaENhbmNlbCxcbiAgICAgICAgICAgIHRvdWNoZW5kICAgOiBtZS5vblRvdWNoRW5kLFxuICAgICAgICAgICAgc2NvcGUgICAgICA6IG1lXG4gICAgICAgIH0pO1xuXG4gICAgICAgIG1lLmdyaWRDb250YWluZXIuYWRkRG9tTGlzdGVuZXJzKHtcbiAgICAgICAgICAgIHNjcm9sbDogbWUub25Db250YWluZXJTY3JvbGwsXG4gICAgICAgICAgICBzY29wZSA6IG1lXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT25seSB0cmlnZ2VycyBmb3IgdmVydGljYWwgc2Nyb2xsaW5nXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgb25Cb2R5U2Nyb2xsKHtzY3JvbGxUb3AsIHRvdWNoZXN9KSB7XG4gICAgICAgIGxldCBtZSAgID0gdGhpcyxcbiAgICAgICAgICAgIGJvZHkgPSBtZS5ncmlkQm9keSxcbiAgICAgICAgICAgIGRlbHRhWCwgbGFzdFRvdWNoWDtcblxuICAgICAgICBtZS5zY3JvbGxUb3AgPSBzY3JvbGxUb3A7XG5cbiAgICAgICAgYm9keS5zZXQoe2lzU2Nyb2xsaW5nOiB0cnVlLCBzY3JvbGxUb3B9KTtcblxuICAgICAgICBtZS5vbkJvZHlTY3JvbGxFbmQoKTtcblxuICAgICAgICBpZiAodG91Y2hlcykge1xuICAgICAgICAgICAgaWYgKG1lLnRvdWNoTW92ZU93bmVyICE9PSAnY29udGFpbmVyJykge1xuICAgICAgICAgICAgICAgIG1lLnRvdWNoTW92ZU93bmVyID0gJ2JvZHknXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChtZS50b3VjaE1vdmVPd25lciA9PT0gJ2JvZHknKSB7XG4gICAgICAgICAgICAgICAgbGFzdFRvdWNoWCA9IHRvdWNoZXMubGFzdFRvdWNoLmNsaWVudFggLSB0b3VjaGVzLmZpcnN0VG91Y2guY2xpZW50WDtcbiAgICAgICAgICAgICAgICBkZWx0YVggICAgID0gbWUubGFzdFRvdWNoWCAtIGxhc3RUb3VjaFg7XG5cbiAgICAgICAgICAgICAgICBkZWx0YVggIT09IDAgJiYgTmVvLm1haW4uRG9tQWNjZXNzLnNjcm9sbFRvKHtcbiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uOiAnbGVmdCcsXG4gICAgICAgICAgICAgICAgICAgIGlkICAgICAgIDogbWUuZ3JpZENvbnRhaW5lci5pZCxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgICAgOiBtZS5zY3JvbGxMZWZ0ICsgZGVsdGFYXG4gICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgICAgIG1lLmxhc3RUb3VjaFggPSBsYXN0VG91Y2hYXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgb25Cb2R5U2Nyb2xsRW5kKCkge1xuICAgICAgICB0aGlzLmdyaWRCb2R5LmlzU2Nyb2xsaW5nID0gZmFsc2VcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkYXRhLnNjcm9sbExlZnRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YS50YXJnZXRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YS50b3VjaGVzXG4gICAgICovXG4gICAgb25Db250YWluZXJTY3JvbGwoe3Njcm9sbExlZnQsIHRhcmdldCwgdG91Y2hlc30pIHtcbiAgICAgICAgbGV0IG1lICAgID0gdGhpcyxcbiAgICAgICAgICAgIGJvZHkgPSBtZS5ncmlkQm9keSxcbiAgICAgICAgICAgIGRlbHRhWSwgbGFzdFRvdWNoWTtcblxuICAgICAgICAvLyBXZSBtdXN0IGlnbm9yZSBldmVudHMgZm9yIGdyaWQtc2Nyb2xsYmFyXG4gICAgICAgIGlmICh0YXJnZXQuaWQuaW5jbHVkZXMoJ2dyaWQtY29udGFpbmVyJykpIHtcbiAgICAgICAgICAgIGJvZHkuaXNTY3JvbGxpbmcgPSB0cnVlO1xuICAgICAgICAgICAgbWUub25Cb2R5U2Nyb2xsRW5kKCk7XG5cbiAgICAgICAgICAgIG1lICAuc2Nyb2xsTGVmdCA9IHNjcm9sbExlZnQ7XG4gICAgICAgICAgICBib2R5LnNjcm9sbExlZnQgPSBzY3JvbGxMZWZ0O1xuXG4gICAgICAgICAgICBtZS5ncmlkQ29udGFpbmVyLmhlYWRlclRvb2xiYXIuc2Nyb2xsTGVmdCA9IHNjcm9sbExlZnQ7XG5cbiAgICAgICAgICAgIGlmICh0b3VjaGVzICYmICFtZS5ncmlkQ29udGFpbmVyLmhlYWRlclRvb2xiYXIuY2xzLmluY2x1ZGVzKCduZW8taXMtZHJhZ2dpbmcnKSkge1xuICAgICAgICAgICAgICAgIGlmIChtZS50b3VjaE1vdmVPd25lciAhPT0gJ2JvZHknKSB7XG4gICAgICAgICAgICAgICAgICAgIG1lLnRvdWNoTW92ZU93bmVyID0gJ2NvbnRhaW5lcidcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAobWUudG91Y2hNb3ZlT3duZXIgPT09ICdjb250YWluZXInKSB7XG4gICAgICAgICAgICAgICAgICAgIGxhc3RUb3VjaFkgPSB0b3VjaGVzLmxhc3RUb3VjaC5jbGllbnRZIC0gdG91Y2hlcy5maXJzdFRvdWNoLmNsaWVudFk7XG4gICAgICAgICAgICAgICAgICAgIGRlbHRhWSAgICAgPSBtZS5sYXN0VG91Y2hZIC0gbGFzdFRvdWNoWTtcblxuICAgICAgICAgICAgICAgICAgICBkZWx0YVkgIT09IDAgJiYgTmVvLm1haW4uRG9tQWNjZXNzLnNjcm9sbFRvKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbjogJ3RvcCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBpZCAgICAgICA6IGJvZHkudmRvbS5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlICAgIDogbWUuc2Nyb2xsVG9wICsgZGVsdGFZXG4gICAgICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgICAgICAgICAgbWUubGFzdFRvdWNoWSA9IGxhc3RUb3VjaFlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICAgICAqL1xuICAgIG9uVG91Y2hDYW5jZWwoZGF0YSkge1xuICAgICAgICB0aGlzLm9uVG91Y2hFbmQoZGF0YSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICAgICAqL1xuICAgIG9uVG91Y2hFbmQoZGF0YSkge1xuICAgICAgICBsZXQgbWUgPSB0aGlzO1xuXG4gICAgICAgIG1lLnRvdWNoTW92ZU93bmVyID0gbnVsbDtcbiAgICAgICAgbWUubGFzdFRvdWNoWCAgICAgPSAwO1xuICAgICAgICBtZS5sYXN0VG91Y2hZICAgICA9IDBcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE5lby5zZXR1cENsYXNzKFNjcm9sbE1hbmFnZXIpO1xuIiwiaW1wb3J0IENvbXBvbmVudCBmcm9tICcuLi9jb21wb25lbnQvQmFzZS5tanMnO1xuXG4vKipcbiAqIFdlIGRvIG5vdCB3YW50IHRvIHVzZSB0aGUgZGVmYXVsdCBzY3JvbGxiYXIgZm9yIHZlcnRpY2FsIHNjcm9sbGluZywgc2luY2UgaXQgd291bGQgc2hvdyB1cCBhdCB0aGUgcmlnaHQgZWRnZVxuICogb2YgdGhlIGxhc3QgY29sdW1uLiBJbnN0ZWFkLCB3ZSB3YW50IHRvIHNob3cgaXQgYXQgdGhlIHJpZ2h0IGVkZ2Ugb2YgdGhlIGNvbnRhaW5lciAoYWx3YXlzIHZpc2libGUgd2hlbiBzY3JvbGxpbmcpLlxuICogQGNsYXNzIE5lby5ncmlkLlZlcnRpY2FsU2Nyb2xsYmFyXG4gKiBAZXh0ZW5kcyBOZW8uY29tcG9uZW50LkJhc2VcbiAqL1xuY2xhc3MgVmVydGljYWxTY3JvbGxiYXIgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIHN0YXRpYyBjb25maWcgPSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IGNsYXNzTmFtZT0nTmVvLmdyaWQuVmVydGljYWxTY3JvbGxiYXInXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIGNsYXNzTmFtZTogJ05lby5ncmlkLlZlcnRpY2FsU2Nyb2xsYmFyJyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gbnR5cGU9J2dyaWQtdmVydGljYWwtc2Nyb2xsYmFyJ1xuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBudHlwZTogJ2dyaWQtdmVydGljYWwtc2Nyb2xsYmFyJyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ1tdfSBiYXNlQ2xzPVsnbmVvLWdyaWQtdmVydGljYWwtc2Nyb2xsYmFyJ11cbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgYmFzZUNsczogWyduZW8tZ3JpZC12ZXJ0aWNhbC1zY3JvbGxiYXInXSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE51bWJlciBpbiBweFxuICAgICAgICAgKiBAbWVtYmVyIHtOdW1iZXJ9IHJvd0hlaWdodF89MFxuICAgICAgICAgKiBAcmVhY3RpdmVcbiAgICAgICAgICovXG4gICAgICAgIHJvd0hlaWdodF86IDAsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtOZW8uZGF0YS5TdG9yZXxudWxsfSBzdG9yZV89bnVsbFxuICAgICAgICAgKiBAcmVhY3RpdmVcbiAgICAgICAgICovXG4gICAgICAgIHN0b3JlXzogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge09iamVjdH0gX3Zkb21cbiAgICAgICAgICovXG4gICAgICAgIF92ZG9tOlxuICAgICAgICB7Y246IFtcbiAgICAgICAgICAgIHtjbHM6IFsnbmVvLWdyaWQtc2Nyb2xsYmFyLWNvbnRlbnQnXX1cbiAgICAgICAgXX1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IG1vdW50ZWRcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgYXN5bmMgYWRkU2Nyb2xsU3luYyhtb3VudGVkKSB7XG4gICAgICAgIGxldCBtZSAgICAgICAgID0gdGhpcyxcbiAgICAgICAgICAgIHt3aW5kb3dJZH0gPSBtZSxcbiAgICAgICAgICAgIFNjcm9sbFN5bmMgPSBhd2FpdCBOZW8uY3VycmVudFdvcmtlci5nZXRBZGRvbignU2Nyb2xsU3luYycsIHdpbmRvd0lkKSxcbiAgICAgICAgICAgIHBhcmFtcyAgICAgPSB7aWQ6IG1lLmlkLCB3aW5kb3dJZH07XG5cbiAgICAgICAgaWYgKG1vdW50ZWQpIHtcbiAgICAgICAgICAgIFNjcm9sbFN5bmMucmVnaXN0ZXIoe1xuICAgICAgICAgICAgICAgIGZyb21JZDogbWUucGFyZW50LmJvZHkudmRvbS5pZCxcbiAgICAgICAgICAgICAgICB0b0lkICA6IG1lLmlkLFxuICAgICAgICAgICAgICAgIHR3b1dheTogIU5lby5jb25maWcuaGFzVG91Y2hFdmVudHMsIC8vIFN5bmNpbmcgdGhlIHNjcm9sbGVyIGJhY2sgdG8gdGhlIGJvZHkgYWZmZWN0cyBtb2JpbGUgc2Nyb2xsaW5nXG4gICAgICAgICAgICAgICAgLi4ucGFyYW1zXG4gICAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgU2Nyb2xsU3luYy51bnJlZ2lzdGVyKHBhcmFtcylcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJlZCBhZnRlciB0aGUgbW91bnRlZCBjb25maWcgZ290IGNoYW5nZWRcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHZhbHVlXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBvbGRWYWx1ZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBhZnRlclNldE1vdW50ZWQodmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgIHN1cGVyLmFmdGVyU2V0TW91bnRlZCh2YWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgICBvbGRWYWx1ZSAhPT0gdW5kZWZpbmVkICYmIHRoaXMuYWRkU2Nyb2xsU3luYyh2YWx1ZSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgYWZ0ZXIgdGhlIHJvd0hlaWdodCBjb25maWcgZ290IGNoYW5nZWRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdmFsdWVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gb2xkVmFsdWVcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgYWZ0ZXJTZXRSb3dIZWlnaHQodmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgIHZhbHVlID4gMCAmJiB0aGlzLnVwZGF0ZVNjcm9sbEhlaWdodCgpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIGFmdGVyIHRoZSBzdG9yZSBjb25maWcgZ290IGNoYW5nZWRcbiAgICAgKiBAcGFyYW0ge05lby5kYXRhLlN0b3JlfG51bGx9IHZhbHVlXG4gICAgICogQHBhcmFtIHtOZW8uZGF0YS5TdG9yZXxudWxsfSBvbGRWYWx1ZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBhZnRlclNldFN0b3JlKHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIGxldCBtZSA9IHRoaXM7XG5cbiAgICAgICAgICAgIHZhbHVlLm9uKHtcbiAgICAgICAgICAgICAgICBmaWx0ZXI6IG1lLnVwZGF0ZVNjcm9sbEhlaWdodCxcbiAgICAgICAgICAgICAgICBsb2FkICA6IG1lLnVwZGF0ZVNjcm9sbEhlaWdodCxcbiAgICAgICAgICAgICAgICBzY29wZSA6IG1lXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgZGF0YVxuICAgICAqIEBwYXJhbSB7T2JqZWN0W119IGRhdGEuaXRlbXNcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gICBbZGF0YS50b3RhbF1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgdXBkYXRlU2Nyb2xsSGVpZ2h0KGRhdGEpIHtcbiAgICAgICAgbGV0IG1lICAgICAgICAgICA9IHRoaXMsXG4gICAgICAgICAgICBjb3VudFJlY29yZHMgPSBkYXRhPy50b3RhbCA/IGRhdGEudG90YWwgOiBtZS5zdG9yZS5jb3VudCxcbiAgICAgICAgICAgIHtyb3dIZWlnaHR9ICA9IG1lO1xuXG4gICAgICAgIGlmIChjb3VudFJlY29yZHMgPiAwICYmIHJvd0hlaWdodCA+IDApIHtcbiAgICAgICAgICAgIG1lLnZkb20uY25bMF0uaGVpZ2h0ID0gYCR7KGNvdW50UmVjb3JkcyArIDEpICogcm93SGVpZ2h0fXB4YDtcbiAgICAgICAgICAgIG1lLnVwZGF0ZSgpXG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE5lby5zZXR1cENsYXNzKFZlcnRpY2FsU2Nyb2xsYmFyKTtcbiIsImltcG9ydCBDb2x1bW4gICBmcm9tICcuL0Jhc2UubWpzJztcbmltcG9ydCBOZW9BcnJheSBmcm9tICcuLi8uLi91dGlsL0FycmF5Lm1qcyc7XG5pbXBvcnQgVmRvbVV0aWwgZnJvbSAnLi4vLi4vdXRpbC9WRG9tLm1qcyc7XG5cbi8qKlxuICogQGNsYXNzIE5lby5ncmlkLmNvbHVtbi5BbmltYXRlZENoYW5nZVxuICogQGV4dGVuZHMgTmVvLmdyaWQuY29sdW1uLkJhc2VcbiAqL1xuY2xhc3MgQW5pbWF0ZWRDaGFuZ2UgZXh0ZW5kcyBDb2x1bW4ge1xuICAgIHN0YXRpYyBjb25maWcgPSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IGNsYXNzTmFtZT0nTmVvLmdyaWQuY29sdW1uLkFuaW1hdGVkQ2hhbmdlJ1xuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBjbGFzc05hbWU6ICdOZW8uZ3JpZC5jb2x1bW4uQW5pbWF0ZWRDaGFuZ2UnLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSBhbmltYXRpb25DbHM9J25lby1hbmltYXRlZCdcbiAgICAgICAgICovXG4gICAgICAgIGFuaW1hdGlvbkNsczogJ25lby1hbmltYXRlZCcsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IHR5cGU9J2FuaW1hdGVkQ2hhbmdlJ1xuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICB0eXBlOiAnYW5pbWF0ZWRDaGFuZ2UnXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZ1xuICAgICAqL1xuICAgIGNvbnN0cnVjdChjb25maWcpIHtcbiAgICAgICAgc3VwZXIuY29uc3RydWN0KGNvbmZpZyk7XG5cbiAgICAgICAgbGV0IG1lID0gdGhpcztcblxuICAgICAgICBtZS5wYXJlbnQuc3RvcmUub24oe1xuICAgICAgICAgICAgcmVjb3JkQ2hhbmdlOiBtZS5vblJlY29yZENoYW5nZSxcbiAgICAgICAgICAgIHNjb3BlICAgICAgIDogbWVcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZSBhcyBuZWVkZWQgZm9yIGR5bmFtaWMgcmVjb3JkLWJhc2VkIGFuaW1hdGlvbiBjbGFzc2VzXG4gICAgICogQHBhcmFtIHtSZWNvcmR9IHJlY29yZFxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9XG4gICAgICovXG4gICAgZ2V0QW5pbWF0aW9uQ2xzKHJlY29yZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hbmltYXRpb25DbHNcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICBkYXRhXG4gICAgICogQHBhcmFtIHtPYmplY3RbXX0gICAgICAgZGF0YS5maWVsZHMgRWFjaCBmaWVsZCBvYmplY3QgY29udGFpbnMgdGhlIGtleXM6IG5hbWUsIG9sZFZhbHVlLCB2YWx1ZVxuICAgICAqIEBwYXJhbSB7TmVvLmRhdGEuTW9kZWx9IGRhdGEubW9kZWwgVGhlIG1vZGVsIGluc3RhbmNlIG9mIHRoZSBjaGFuZ2VkIHJlY29yZFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgIGRhdGEucmVjb3JkXG4gICAgICovXG4gICAgYXN5bmMgb25SZWNvcmRDaGFuZ2Uoe2ZpZWxkcywgcmVjb3JkfSkge1xuICAgICAgICBsZXQgbWUgICAgID0gdGhpcyxcbiAgICAgICAgICAgIHtib2R5fSA9IG1lLnBhcmVudCxcbiAgICAgICAgICAgIGNlbGxJZCwgZmllbGQsIG5vZGU7XG5cbiAgICAgICAgZm9yIChmaWVsZCBvZiBmaWVsZHMpIHtcbiAgICAgICAgICAgIGlmIChmaWVsZC5uYW1lID09PSBtZS5kYXRhRmllbGQpIHtcbiAgICAgICAgICAgICAgICAvLyBXYWl0IGZvciB0aGUgbmV4dCBhbmltYXRpb24gZnJhbWVcbiAgICAgICAgICAgICAgICBhd2FpdCBtZS50aW1lb3V0KDIwKTtcblxuICAgICAgICAgICAgICAgIGNlbGxJZCA9IGJvZHkuZ2V0Q2VsbElkKG1lLnBhcmVudC5zdG9yZS5pbmRleE9mKHJlY29yZCksIG1lLmRhdGFGaWVsZCk7XG4gICAgICAgICAgICAgICAgbm9kZSAgID0gVmRvbVV0aWwuZmluZChib2R5LnZkb20sIGNlbGxJZCk/LnZkb207XG5cbiAgICAgICAgICAgICAgICBpZiAobm9kZSkge1xuICAgICAgICAgICAgICAgICAgICBOZW9BcnJheS5hZGQobm9kZS5jbHMsIG1lLmdldEFuaW1hdGlvbkNscyhyZWNvcmQpKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIHdpbGwgdHJpZ2dlciBhIDJuZCBib2R5IHVwZGF0ZSwgYWZ0ZXIgZ3JpZC5Cb2R5OiBvblN0b3JlUmVjb3JkQ2hhbmdlKClcbiAgICAgICAgICAgICAgICAgICAgLy8gSXQgaXMgY3J1Y2lhbCB0byByZXN0YXJ0IHRoZSBrZXlmcmFtZSBiYXNlZCBhbmltYXRpb25cbiAgICAgICAgICAgICAgICAgICAgLy8gPT4gVGhlIHByZXZpb3VzIHVwZGF0ZSBjYWxsIHdpbGwgcmVtb3ZlIHRoZSBsYXN0IGFuaW1hdGlvbkNsc1xuICAgICAgICAgICAgICAgICAgICBib2R5LnVwZGF0ZSgpXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTmVvLnNldHVwQ2xhc3MoQW5pbWF0ZWRDaGFuZ2UpO1xuIiwiaW1wb3J0IEFuaW1hdGVkQ2hhbmdlIGZyb20gJy4vQW5pbWF0ZWRDaGFuZ2UubWpzJztcblxuLyoqXG4gKiBAY2xhc3MgTmVvLmdyaWQuY29sdW1uLkFuaW1hdGVkQ3VycmVuY3lcbiAqIEBleHRlbmRzIE5lby5ncmlkLmNvbHVtbi5BbmltYXRlZENoYW5nZVxuICovXG5jbGFzcyBBbmltYXRlZEN1cnJlbmN5IGV4dGVuZHMgQW5pbWF0ZWRDaGFuZ2Uge1xuICAgIHN0YXRpYyBjb25maWcgPSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IGNsYXNzTmFtZT0nTmVvLmdyaWQuY29sdW1uLkFuaW1hdGVkQ3VycmVuY3knXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIGNsYXNzTmFtZTogJ05lby5ncmlkLmNvbHVtbi5BbmltYXRlZEN1cnJlbmN5JyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gdHlwZT0nYW5pbWF0ZWRDdXJyZW5jeSdcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgdHlwZTogJ2FuaW1hdGVkQ3VycmVuY3knLFxuICAgICAgICAvKipcbiAgICAgICAgICogU2V0IGEgZGlmZmVyZW50IHJlY29yZCBmaWVsZCB0byBiYXNlIHRoZSBjaGFuZ2Ugb24uXG4gICAgICAgICAqIERlZmF1bHRzIHRoaXMuZGF0YUZpZWxkXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ3xudWxsfSBjb21wYXJlRmllbGQ9bnVsbFxuICAgICAgICAgKi9cbiAgICAgICAgY29tcGFyZUZpZWxkOiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSBjdXJyZW5jeT0nVVNEJ1xuICAgICAgICAgKi9cbiAgICAgICAgY3VycmVuY3k6ICdVU0QnLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSBsb2NhbGU9J2RlZmF1bHQnXG4gICAgICAgICAqL1xuICAgICAgICBsb2NhbGU6ICdkZWZhdWx0J1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXIge0ludGwuTnVtYmVyRm9ybWF0fG51bGx9IGZvcm1hdHRlcj1udWxsXG4gICAgICovXG4gICAgZm9ybWF0dGVyID0gbnVsbFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZ1xuICAgICAqL1xuICAgIGNvbnN0cnVjdChjb25maWcpIHtcbiAgICAgICAgc3VwZXIuY29uc3RydWN0KGNvbmZpZyk7XG4gICAgICAgIHRoaXMuY3JlYXRlRm9ybWF0dGVyKClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgZGF0YVxuICAgICAqIEBwYXJhbSB7TmVvLmJ1dHRvbi5CYXNlfSAgICBkYXRhLmNvbHVtblxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSAgICAgICAgICAgICBkYXRhLmNvbHVtbkluZGV4XG4gICAgICogQHBhcmFtIHtTdHJpbmd9ICAgICAgICAgICAgIGRhdGEuZGF0YUZpZWxkXG4gICAgICogQHBhcmFtIHtOZW8uZ3JpZC5Db250YWluZXJ9IGRhdGEuZ3JpZENvbnRhaW5lclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICBkYXRhLnJlY29yZFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSAgICAgICAgICAgICBkYXRhLnJvd0luZGV4XG4gICAgICogQHBhcmFtIHtOZW8uZGF0YS5TdG9yZX0gICAgIGRhdGEuc3RvcmVcbiAgICAgKiBAcGFyYW0ge051bWJlcnxTdHJpbmd9ICAgICAgZGF0YS52YWx1ZVxuICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAqL1xuICAgIGNlbGxSZW5kZXJlcih7Y29sdW1uLCB2YWx1ZX0pIHtcbiAgICAgICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiAnJ1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbHVtbi5mb3JtYXR0ZXIuZm9ybWF0KHZhbHVlKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgY3JlYXRlRm9ybWF0dGVyKCkge1xuICAgICAgICBsZXQgbWUgPSB0aGlzO1xuXG4gICAgICAgIG1lLmZvcm1hdHRlciA9IG5ldyBJbnRsLk51bWJlckZvcm1hdChtZS5sb2NhbGUsIHtzdHlsZTogJ2N1cnJlbmN5JywgY3VycmVuY3k6IG1lLmN1cnJlbmN5fSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZSBhcyBuZWVkZWQgZm9yIGR5bmFtaWMgcmVjb3JkLWJhc2VkIGFuaW1hdGlvbiBjbGFzc2VzXG4gICAgICogQHBhcmFtIHtSZWNvcmR9IHJlY29yZFxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9XG4gICAgICovXG4gICAgZ2V0QW5pbWF0aW9uQ2xzKHJlY29yZCkge1xuICAgICAgICByZXR1cm4gcmVjb3JkW3RoaXMuY29tcGFyZUZpZWxkIHx8IHRoaXMuZGF0YUZpZWxkXSA8IDAgPyAnbmVvLWFuaW1hdGVkLW5lZ2F0aXZlJyA6ICduZW8tYW5pbWF0ZWQtcG9zaXRpdmUnXG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBOZW8uc2V0dXBDbGFzcyhBbmltYXRlZEN1cnJlbmN5KTtcbiIsImltcG9ydCBCYXNlICAgICAgICAgICAgICBmcm9tICcuLi8uLi9jb3JlL0Jhc2UubWpzJztcbmltcG9ydCB7cmVzb2x2ZUNhbGxiYWNrfSBmcm9tICcuLi8uLi91dGlsL0Z1bmN0aW9uLm1qcyc7XG5cbi8qKlxuICogQGNsYXNzIE5lby5ncmlkLmNvbHVtbi5CYXNlXG4gKiBAZXh0ZW5kcyBOZW8uY29yZS5CYXNlXG4gKi9cbmNsYXNzIENvbHVtbiBleHRlbmRzIEJhc2Uge1xuICAgIHN0YXRpYyBjb25maWcgPSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IGNsYXNzTmFtZT0nTmVvLmdyaWQuY29sdW1uLkJhc2UnXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIGNsYXNzTmFtZTogJ05lby5ncmlkLmNvbHVtbi5CYXNlJyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ3xudWxsfSBkYXRhRmllbGQ9bnVsbFxuICAgICAgICAgKi9cbiAgICAgICAgZGF0YUZpZWxkOiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7TmVvLmdyaWQuQ29udGFpbmVyfG51bGx9IHBhcmVudD1udWxsXG4gICAgICAgICAqL1xuICAgICAgICBwYXJlbnQ6IG51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtGdW5jdGlvbnxTdHJpbmd8bnVsbH0gcmVuZGVyZXJfPSdjZWxsUmVuZGVyZXInXG4gICAgICAgICAqIEByZWFjdGl2ZVxuICAgICAgICAgKi9cbiAgICAgICAgcmVuZGVyZXJfOiAnY2VsbFJlbmRlcmVyJyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNjb3BlIHRvIGV4ZWN1dGUgdGhlIGNvbHVtbiByZW5kZXJlci5cbiAgICAgICAgICogRGVmYXVsdHMgdG8gdGhlIGdyaWQuQm9keS5cbiAgICAgICAgICogWW91IGNhbiBwYXNzIHRoZSBzdHJpbmdzICd0aGlzJyBvciAnbWUnXG4gICAgICAgICAqIEBtZW1iZXIge05lby5jb3JlLkJhc2V8U3RyaW5nfG51bGx9IHJlbmRlcmVyU2NvcGU9bnVsbFxuICAgICAgICAgKi9cbiAgICAgICAgcmVuZGVyZXJTY29wZTogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gdHlwZT0nY29sdW1uJ1xuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICB0eXBlOiAnY29sdW1uJyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge051bWJlcnxudWxsfSB3aW5kb3dJZF89bnVsbFxuICAgICAgICAgKiBAcmVhY3RpdmVcbiAgICAgICAgICovXG4gICAgICAgIHdpbmRvd0lkXzogbnVsbFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJlZCBhZnRlciB0aGUgd2luZG93SWQgY29uZmlnIGdvdCBjaGFuZ2VkXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ8bnVsbH0gb2xkVmFsdWVcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgYWZ0ZXJTZXRXaW5kb3dJZCh2YWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgdmFsdWUgJiYgTmVvLmN1cnJlbnRXb3JrZXIuaW5zZXJ0VGhlbWVGaWxlcyh2YWx1ZSwgdGhpcy5fX3Byb3RvX18pXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIGJlZm9yZSB0aGUgcmVuZGVyZXIgY29uZmlnIGdldHMgY2hhbmdlZFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258U3RyaW5nfG51bGx9IHZhbHVlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxTdHJpbmd8bnVsbH0gb2xkVmFsdWVcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgYmVmb3JlU2V0UmVuZGVyZXIodmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgIC8vIElmIG5vIGZuIGlzIGZvdW5kIGluc2lkZSB0aGUgcGFyZW50IHRyZWUsIHJldHVybiB0aGUgcGxhaW4gdmFsdWUgZm9yIHZpZXcgY29udHJvbGxlcnMgdG8gbWF0Y2hcbiAgICAgICAgcmV0dXJuIHJlc29sdmVDYWxsYmFjayh2YWx1ZSwgdGhpcykuZm4gfHwgdmFsdWVcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgZGF0YVxuICAgICAqIEBwYXJhbSB7TmVvLmJ1dHRvbi5CYXNlfSAgICBkYXRhLmNvbHVtblxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSAgICAgICAgICAgICBkYXRhLmNvbHVtbkluZGV4XG4gICAgICogQHBhcmFtIHtTdHJpbmd9ICAgICAgICAgICAgIGRhdGEuZGF0YUZpZWxkXG4gICAgICogQHBhcmFtIHtOZW8uZ3JpZC5Db250YWluZXJ9IGRhdGEuZ3JpZENvbnRhaW5lclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICBkYXRhLnJlY29yZFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSAgICAgICAgICAgICBkYXRhLnJvd0luZGV4XG4gICAgICogQHBhcmFtIHtOZW8uZGF0YS5TdG9yZX0gICAgIGRhdGEuc3RvcmVcbiAgICAgKiBAcGFyYW0ge051bWJlcnxTdHJpbmd9ICAgICAgZGF0YS52YWx1ZVxuICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAqL1xuICAgIGNlbGxSZW5kZXJlcih7dmFsdWV9KSB7XG4gICAgICAgIHJldHVybiB2YWx1ZVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTmVvLnNldHVwQ2xhc3MoQ29sdW1uKTtcbiIsImltcG9ydCBDb2x1bW4gZnJvbSAnLi9CYXNlLm1qcyc7XG5cbi8qKlxuICogQGNsYXNzIE5lby5ncmlkLmNvbHVtbi5Db21wb25lbnRcbiAqIEBleHRlbmRzIE5lby5ncmlkLmNvbHVtbi5CYXNlXG4gKi9cbmNsYXNzIENvbXBvbmVudCBleHRlbmRzIENvbHVtbiB7XG4gICAgc3RhdGljIGNvbmZpZyA9IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gY2xhc3NOYW1lPSdOZW8uZ3JpZC5jb2x1bW4uQ29tcG9uZW50J1xuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBjbGFzc05hbWU6ICdOZW8uZ3JpZC5jb2x1bW4uQ29tcG9uZW50JyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge0Z1bmN0aW9ufE9iamVjdHxudWxsfSBjb21wb25lbnQ9bnVsbFxuICAgICAgICAgKi9cbiAgICAgICAgY29tcG9uZW50OiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7T2JqZWN0fSBkZWZhdWx0c1xuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBkZWZhdWx0czogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbXBvbmVudHMgY2FuIGRlbGVnYXRlIGV2ZW50IGxpc3RlbmVycyAob3IgYnV0dG9uIGhhbmRsZXJzKSBpbnRvIG1ldGhvZHMgc29tZXdoZXJlIGluc2lkZVxuICAgICAgICAgKiB0aGUgdmlldyBjb250cm9sbGVyIG9yIGNvbXBvbmVudCB0cmVlIGhpZXJhcmNoeS5cbiAgICAgICAgICpcbiAgICAgICAgICogSW4gdGhpcyBjYXNlLCBpdCBpcyBoZWxwZnVsIHRvIGtub3cgd2hhdCB0aGUgcmVsYXRlZCByZWNvcmQgaXMsIHNvIHdlIGFyZSBhZGRpbmcgdGhlIHJlY29yZFxuICAgICAgICAgKiB0byB0aGUgY29tcG9uZW50IGFzIGEgcHJvcGVydHkuIEJ5IGRlZmF1bHQsIGFzICdyZWNvcmQnLCBidXQgdGhpcyBjb25maWcgY2FuIGNoYW5nZSB0aGUgcHJvcGVydHkgbmFtZS5cbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSByZWNvcmRQcm9wZXJ0eT0ncmVjb3JkJ1xuICAgICAgICAgKi9cbiAgICAgICAgcmVjb3JkUHJvcGVydHk6ICdyZWNvcmQnLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSByZW5kZXJlclNjb3BlPSd0aGlzJ1xuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICByZW5kZXJlclNjb3BlOiAndGhpcycsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IHR5cGU9J2NvbXBvbmVudCdcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgdHlwZTogJ2NvbXBvbmVudCcsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZXQgdGhpcyBjb25maWcgdG8gdHJ1ZSwgaW4gY2FzZSB5b3Ugd2FudCB0byB1c2UgJ2JpbmQnIGluc2lkZSB5b3VyIGNlbGwgYmFzZWQgY29tcG9uZW50LlxuICAgICAgICAgKiBAbWVtYmVyIHtCb29sZWFufSB1c2VCaW5kaW5ncz1mYWxzZVxuICAgICAgICAgKi9cbiAgICAgICAgdXNlQmluZGluZ3M6IGZhbHNlXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG1lbWJlciB7TWFwfSBtYXA9bmV3IE1hcCgpXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIG1hcCA9IG5ldyBNYXAoKVxuXG4gICAgLyoqXG4gICAgICogT3ZlcnJpZGUgYXMgbmVlZGVkIGluc2lkZSBjbGFzcyBleHRlbnNpb25zXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZ1xuICAgICAqIEBwYXJhbSB7UmVjb3JkfSByZWNvcmRcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICAqL1xuICAgIGFwcGx5UmVjb3JkQ29uZmlncyhjb25maWcsIHJlY29yZCkge1xuICAgICAgICByZXR1cm4gY29uZmlnXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgIGRhdGFcbiAgICAgKiBAcGFyYW0ge05lby5jb2x1bW4uQmFzZX0gICAgZGF0YS5jb2x1bW5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gICAgICAgICAgICAgZGF0YS5jb2x1bW5JbmRleFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSAgICAgICAgICAgICBkYXRhLmRhdGFGaWVsZFxuICAgICAqIEBwYXJhbSB7TmVvLmdyaWQuQ29udGFpbmVyfSBkYXRhLmdyaWRDb250YWluZXJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgZGF0YS5yZWNvcmRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gICAgICAgICAgICAgZGF0YS5yb3dJbmRleFxuICAgICAqIEBwYXJhbSB7TmVvLmRhdGEuU3RvcmV9ICAgICBkYXRhLnN0b3JlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ8U3RyaW5nfSAgICAgIGRhdGEudmFsdWVcbiAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgKi9cbiAgICBjZWxsUmVuZGVyZXIoZGF0YSkge1xuICAgICAgICBsZXQge2dyaWRDb250YWluZXIsIHJlY29yZCwgcm93SW5kZXh9ID0gZGF0YSxcbiAgICAgICAgICAgIHthcHBOYW1lLCBib2R5LCB3aW5kb3dJZH0gICAgICAgICA9IGdyaWRDb250YWluZXIsXG4gICAgICAgICAgICBtZSAgICAgICAgICAgICAgID0gdGhpcyxcbiAgICAgICAgICAgIHtyZWNvcmRQcm9wZXJ0eX0gPSBtZSxcbiAgICAgICAgICAgIGlkICAgICAgICAgICAgICAgPSBtZS5nZXRDb21wb25lbnRJZChyb3dJbmRleCksXG4gICAgICAgICAgICBjb21wb25lbnQgICAgICAgID0gbWUubWFwLmdldChpZCksXG4gICAgICAgICAgICBjb21wb25lbnRDb25maWcgID0gbWUuY29tcG9uZW50O1xuXG4gICAgICAgIGlmIChOZW8udHlwZU9mKGNvbXBvbmVudENvbmZpZykgPT09ICdGdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNvbXBvbmVudENvbmZpZyA9IGNvbXBvbmVudENvbmZpZyhkYXRhKVxuICAgICAgICB9XG5cbiAgICAgICAgY29tcG9uZW50Q29uZmlnID0gbWUuYXBwbHlSZWNvcmRDb25maWdzKGNvbXBvbmVudENvbmZpZywgcmVjb3JkKTtcbiAgICAgICAgY29tcG9uZW50Q29uZmlnID0gey4uLmNvbXBvbmVudENvbmZpZ307XG5cbiAgICAgICAgaWYgKGNvbXBvbmVudCkge1xuICAgICAgICAgICAgZGVsZXRlIGNvbXBvbmVudENvbmZpZy5jbGFzc05hbWU7XG4gICAgICAgICAgICBkZWxldGUgY29tcG9uZW50Q29uZmlnLm1vZHVsZTtcbiAgICAgICAgICAgIGRlbGV0ZSBjb21wb25lbnRDb25maWcubnR5cGU7XG5cbiAgICAgICAgICAgIGNvbXBvbmVudENvbmZpZ1tyZWNvcmRQcm9wZXJ0eV0gPSByZWNvcmQ7XG5cbiAgICAgICAgICAgIGNvbXBvbmVudC5zZXQoY29tcG9uZW50Q29uZmlnKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29tcG9uZW50ID0gTmVvLmNyZWF0ZSh7XG4gICAgICAgICAgICAgICAgLi4ubWUuZGVmYXVsdHMsXG4gICAgICAgICAgICAgICAgLi4uY29tcG9uZW50Q29uZmlnLFxuICAgICAgICAgICAgICAgIGFwcE5hbWUsXG4gICAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgICAgcGFyZW50Q29tcG9uZW50IDogYm9keSxcbiAgICAgICAgICAgICAgICBbcmVjb3JkUHJvcGVydHldOiByZWNvcmQsXG4gICAgICAgICAgICAgICAgd2luZG93SWRcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBXZSBuZWVkIHRvIGVuc3VyZSB0aGF0IHdyYXBwZWQgY29tcG9uZW50cyBhbHdheXMgZ2V0IHRoZSBzYW1lIGluZGV4LWJhc2VkIGlkLlxuICAgICAgICAgICAgaWYgKCFjb21wb25lbnQudmRvbS5pZCkge1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudC52ZG9tLmlkID0gaWQgKyAnX193cmFwcGVyJ1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBtZS5tYXAuc2V0KGlkLCBjb21wb25lbnQpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWUudXNlQmluZGluZ3MpIHtcbiAgICAgICAgICAgIGJvZHkuZ2V0U3RhdGVQcm92aWRlcigpPy5jcmVhdGVCaW5kaW5ncyhjb21wb25lbnQpXG4gICAgICAgIH1cblxuICAgICAgICBib2R5LnVwZGF0ZURlcHRoID0gLTE7XG5cbiAgICAgICAgcmV0dXJuIGNvbXBvbmVudC5jcmVhdGVWZG9tUmVmZXJlbmNlKClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gcm93SW5kZXhcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxuICAgICAqL1xuICAgIGdldENvbXBvbmVudElkKHJvd0luZGV4KSB7XG4gICAgICAgIGxldCBtZSAgICAgPSB0aGlzLFxuICAgICAgICAgICAge2JvZHl9ID0gbWUucGFyZW50LFxuICAgICAgICAgICAgc3RvcmUgID0gYm9keS5zdG9yZTsgLy8gQWNjZXNzIHRoZSBzdG9yZSBmcm9tIHRoZSBib2R5XG5cbiAgICAgICAgaWYgKHN0b3JlLmNodW5raW5nVG90YWwpIHsgLy8gQ2hlY2sgaWYgY2h1bmtpbmcgaXMgYWN0aXZlXG4gICAgICAgICAgICByZXR1cm4gYCR7bWUuaWR9LWNvbXBvbmVudC0ke3Jvd0luZGV4fWA7IC8vIFVzZSByb3dJbmRleCBkaXJlY3RseVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGAke21lLmlkfS1jb21wb25lbnQtJHtyb3dJbmRleCAlIChib2R5LmF2YWlsYWJsZVJvd3MgKyAyICogYm9keS5idWZmZXJSb3dSYW5nZSl9YFxuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBOZW8uc2V0dXBDbGFzcyhDb21wb25lbnQpO1xuIiwiaW1wb3J0IENvbHVtbiBmcm9tICcuL0Jhc2UubWpzJztcblxuLyoqXG4gKiBAY2xhc3MgTmVvLmdyaWQuY29sdW1uLkN1cnJlbmN5XG4gKiBAZXh0ZW5kcyBOZW8uZ3JpZC5jb2x1bW4uQmFzZVxuICovXG5jbGFzcyBDdXJyZW5jeSBleHRlbmRzIENvbHVtbiB7XG4gICAgc3RhdGljIGNvbmZpZyA9IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gY2xhc3NOYW1lPSdOZW8uZ3JpZC5jb2x1bW4uQ3VycmVuY3knXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIGNsYXNzTmFtZTogJ05lby5ncmlkLmNvbHVtbi5DdXJyZW5jeScsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IHR5cGU9J2N1cnJlbmN5J1xuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICB0eXBlOiAnY3VycmVuY3knLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSBjdXJyZW5jeT0nVVNEJ1xuICAgICAgICAgKi9cbiAgICAgICAgY3VycmVuY3k6ICdVU0QnLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSBsb2NhbGU9J2RlZmF1bHQnXG4gICAgICAgICAqL1xuICAgICAgICBsb2NhbGU6ICdkZWZhdWx0J1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXIge0ludGwuTnVtYmVyRm9ybWF0fG51bGx9IGZvcm1hdHRlcj1udWxsXG4gICAgICovXG4gICAgZm9ybWF0dGVyID0gbnVsbFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZ1xuICAgICAqL1xuICAgIGNvbnN0cnVjdChjb25maWcpIHtcbiAgICAgICAgc3VwZXIuY29uc3RydWN0KGNvbmZpZyk7XG4gICAgICAgIHRoaXMuY3JlYXRlRm9ybWF0dGVyKClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgZGF0YVxuICAgICAqIEBwYXJhbSB7TmVvLmJ1dHRvbi5CYXNlfSAgICBkYXRhLmNvbHVtblxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSAgICAgICAgICAgICBkYXRhLmNvbHVtbkluZGV4XG4gICAgICogQHBhcmFtIHtTdHJpbmd9ICAgICAgICAgICAgIGRhdGEuZGF0YUZpZWxkXG4gICAgICogQHBhcmFtIHtOZW8uZ3JpZC5Db250YWluZXJ9IGRhdGEuZ3JpZENvbnRhaW5lclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgICAgICBkYXRhLnJlY29yZFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSAgICAgICAgICAgICBkYXRhLnJvd0luZGV4XG4gICAgICogQHBhcmFtIHtOZW8uZGF0YS5TdG9yZX0gICAgIGRhdGEuc3RvcmVcbiAgICAgKiBAcGFyYW0ge051bWJlcnxTdHJpbmd9ICAgICAgZGF0YS52YWx1ZVxuICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAqL1xuICAgIGNlbGxSZW5kZXJlcih7dmFsdWV9KSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gJydcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmZvcm1hdHRlci5mb3JtYXQodmFsdWUpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICBjcmVhdGVGb3JtYXR0ZXIoKSB7XG4gICAgICAgIGxldCBtZSA9IHRoaXM7XG5cbiAgICAgICAgbWUuZm9ybWF0dGVyID0gbmV3IEludGwuTnVtYmVyRm9ybWF0KG1lLmxvY2FsZSwge3N0eWxlOiAnY3VycmVuY3knLCBjdXJyZW5jeTogbWUuY3VycmVuY3l9KVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTmVvLnNldHVwQ2xhc3MoQ3VycmVuY3kpO1xuIiwiaW1wb3J0IENvbHVtbiBmcm9tICcuL0Jhc2UubWpzJztcblxuLyoqXG4gKiBAY2xhc3MgTmVvLmdyaWQuY29sdW1uLkluZGV4XG4gKiBAZXh0ZW5kcyBOZW8uZ3JpZC5jb2x1bW4uQmFzZVxuICovXG5jbGFzcyBJbmRleCBleHRlbmRzIENvbHVtbiB7XG4gICAgc3RhdGljIGNvbmZpZyA9IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gY2xhc3NOYW1lPSdOZW8uZ3JpZC5jb2x1bW4uSW5kZXgnXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIGNsYXNzTmFtZTogJ05lby5ncmlkLmNvbHVtbi5JbmRleCcsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IHR5cGU9J2luZGV4J1xuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICB0eXBlOiAnaW5kZXgnLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7Qm9vbGVhbn0gemVyb0Jhc2VkPWZhbHNlXG4gICAgICAgICAqL1xuICAgICAgICB6ZXJvQmFzZWQ6IGZhbHNlXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgIGRhdGFcbiAgICAgKiBAcGFyYW0ge05lby5idXR0b24uQmFzZX0gICAgZGF0YS5jb2x1bW5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gICAgICAgICAgICAgZGF0YS5jb2x1bW5JbmRleFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSAgICAgICAgICAgICBkYXRhLmRhdGFGaWVsZFxuICAgICAqIEBwYXJhbSB7TmVvLmdyaWQuQ29udGFpbmVyfSBkYXRhLmdyaWRDb250YWluZXJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgZGF0YS5yZWNvcmRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gICAgICAgICAgICAgZGF0YS5yb3dJbmRleFxuICAgICAqIEBwYXJhbSB7TmVvLmRhdGEuU3RvcmV9ICAgICBkYXRhLnN0b3JlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ8U3RyaW5nfSAgICAgIGRhdGEudmFsdWVcbiAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgKi9cbiAgICBjZWxsUmVuZGVyZXIoe3Jvd0luZGV4fSkge1xuICAgICAgICByZXR1cm4gcm93SW5kZXggKyAodGhpcy56ZXJvQmFzZWQgPyAwIDogMSlcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE5lby5zZXR1cENsYXNzKEluZGV4KTtcbiIsImltcG9ydCBDb21wb25lbnRDb2x1bW4gICBmcm9tICcuL0NvbXBvbmVudC5tanMnO1xuaW1wb3J0IFByb2dyZXNzQ29tcG9uZW50IGZyb20gJy4uLy4uL2NvbXBvbmVudC9Qcm9ncmVzcy5tanMnO1xuXG4vKipcbiAqIEBjbGFzcyBOZW8uZ3JpZC5jb2x1bW4uUHJvZ3Jlc3NcbiAqIEBleHRlbmRzIE5lby5ncmlkLmNvbHVtbi5Db21wb25lbnRcbiAqL1xuY2xhc3MgUHJvZ3Jlc3MgZXh0ZW5kcyBDb21wb25lbnRDb2x1bW4ge1xuICAgIHN0YXRpYyBjb25maWcgPSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IGNsYXNzTmFtZT0nTmVvLmdyaWQuY29sdW1uLlByb2dyZXNzJ1xuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBjbGFzc05hbWU6ICdOZW8uZ3JpZC5jb2x1bW4uUHJvZ3Jlc3MnLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7T2JqZWN0fSBkZWZhdWx0c1xuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBkZWZhdWx0czoge1xuICAgICAgICAgICAgbW9kdWxlOiBQcm9ncmVzc0NvbXBvbmVudFxuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSB0eXBlPSdwcm9ncmVzcydcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgdHlwZTogJ3Byb2dyZXNzJ1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdcbiAgICAgKiBAcGFyYW0ge1JlY29yZH0gcmVjb3JkXG4gICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAgKi9cbiAgICBhcHBseVJlY29yZENvbmZpZ3MoY29uZmlnLCByZWNvcmQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmRbdGhpcy5kYXRhRmllbGRdLFxuICAgICAgICAgICAgLi4uY29uZmlnXG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE5lby5zZXR1cENsYXNzKFByb2dyZXNzKTtcbiIsImltcG9ydCBBbmltYXRlZENoYW5nZSAgIGZyb20gJy4vQW5pbWF0ZWRDaGFuZ2UubWpzJztcbmltcG9ydCBBbmltYXRlZEN1cnJlbmN5IGZyb20gJy4vQW5pbWF0ZWRDdXJyZW5jeS5tanMnO1xuaW1wb3J0IEJhc2UgICAgICAgICAgICAgZnJvbSAnLi9CYXNlLm1qcyc7XG5pbXBvcnQgQ29tcG9uZW50ICAgICAgICBmcm9tICcuL0NvbXBvbmVudC5tanMnO1xuaW1wb3J0IEN1cnJlbmN5ICAgICAgICAgZnJvbSAnLi9DdXJyZW5jeS5tanMnO1xuaW1wb3J0IEluZGV4ICAgICAgICAgICAgZnJvbSAnLi9JbmRleC5tanMnO1xuaW1wb3J0IFByb2dyZXNzICAgICAgICAgZnJvbSAnLi9Qcm9ncmVzcy5tanMnO1xuXG5leHBvcnQge0FuaW1hdGVkQ2hhbmdlLCBBbmltYXRlZEN1cnJlbmN5LCBCYXNlLCBDb21wb25lbnQsIEN1cnJlbmN5LCBJbmRleCwgUHJvZ3Jlc3N9O1xuIiwiaW1wb3J0IEJhc2VCdXR0b24gZnJvbSAnLi4vLi4vYnV0dG9uL0Jhc2UubWpzJztcbmltcG9ydCBOZW9BcnJheSAgIGZyb20gJy4uLy4uL3V0aWwvQXJyYXkubWpzJztcbmltcG9ydCBUZXh0RmllbGQgIGZyb20gJy4uLy4uL2Zvcm0vZmllbGQvVGV4dC5tanMnO1xuXG4vKipcbiAqIEBjbGFzcyBOZW8uZ3JpZC5oZWFkZXIuQnV0dG9uXG4gKiBAZXh0ZW5kcyBOZW8uYnV0dG9uLkJhc2VcbiAqL1xuY2xhc3MgQnV0dG9uIGV4dGVuZHMgQmFzZUJ1dHRvbiB7XG4gICAgLyoqXG4gICAgICogVmFsaWQgdmFsdWVzIGZvciBhbGlnblxuICAgICAqIEBtZW1iZXIge1N0cmluZ1tdfSBjZWxsQWxpZ25WYWx1ZXM6IFsnbGVmdCcsJ2NlbnRlcicsJ3JpZ2h0J11cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIHN0YXRpYyBjZWxsQWxpZ25WYWx1ZXMgPSBbJ2xlZnQnLCAnY2VudGVyJywgJ3JpZ2h0J11cblxuICAgIHN0YXRpYyBjb25maWcgPSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IGNsYXNzTmFtZT0nTmVvLmdyaWQuaGVhZGVyLkJ1dHRvbidcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgY2xhc3NOYW1lOiAnTmVvLmdyaWQuaGVhZGVyLkJ1dHRvbicsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IG50eXBlPSdncmlkLWhlYWRlci1idXR0b24nXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIG50eXBlOiAnZ3JpZC1oZWFkZXItYnV0dG9uJyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ1tdfSBiYXNlQ2xzPVsnbmVvLWdyaWQtaGVhZGVyLWJ1dHRvbicsJ25lby1idXR0b24nXVxuICAgICAgICAgKi9cbiAgICAgICAgYmFzZUNsczogWyduZW8tZ3JpZC1oZWFkZXItYnV0dG9uJywgJ25lby1idXR0b24nXSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFsaWdubWVudCBvZiB0aGUgbWF0Y2hpbmcgZ3JpZCBjZWxscy4gVmFsaWQgdmFsdWVzIGFyZSBsZWZ0LCBjZW50ZXIsIHJpZ2h0XG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gY2VsbEFsaWduXz0nbGVmdCdcbiAgICAgICAgICogQHJlYWN0aXZlXG4gICAgICAgICAqL1xuICAgICAgICBjZWxsQWxpZ25fOiAnbGVmdCcsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd8bnVsbH0gZGF0YUZpZWxkPW51bGxcbiAgICAgICAgICovXG4gICAgICAgIGRhdGFGaWVsZDogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNvcnQgZGlyZWN0aW9uIHdoZW4gY2xpY2tpbmcgb24gYW4gdW5zb3J0ZWQgYnV0dG9uXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gZGVmYXVsdFNvcnREaXJlY3Rpb249J0FTQydcbiAgICAgICAgICovXG4gICAgICAgIGRlZmF1bHRTb3J0RGlyZWN0aW9uOiAnQVNDJyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge09iamVjdH0gZWRpdG9yQ29uZmlnPW51bGxcbiAgICAgICAgICovXG4gICAgICAgIGVkaXRvckNvbmZpZzogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge09iamVjdH0gZmlsdGVyQ29uZmlnPW51bGxcbiAgICAgICAgICovXG4gICAgICAgIGZpbHRlckNvbmZpZzogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge05lby5mb3JtLmZpZWxkLkJhc2V8bnVsbH0gZmlsdGVyRmllbGQ9bnVsbFxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBmaWx0ZXJGaWVsZDogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gaWNvbkNscz0nZmEgZmEtYXJyb3ctY2lyY2xlLXVwJ1xuICAgICAgICAgKiBAcmVhY3RpdmVcbiAgICAgICAgICovXG4gICAgICAgIGljb25DbHM6ICdmYSBmYS1hcnJvdy1jaXJjbGUtdXAnLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSBpY29uUG9zaXRpb249J3JpZ2h0J1xuICAgICAgICAgKiBAcmVhY3RpdmVcbiAgICAgICAgICovXG4gICAgICAgIGljb25Qb3NpdGlvbjogJ3JpZ2h0JyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqICdBU0MnLCAnREVTQycgb3IgbnVsbFxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd8bnVsbH0gaXNTb3J0ZWRfPW51bGxcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKiBAcmVhY3RpdmVcbiAgICAgICAgICovXG4gICAgICAgIGlzU29ydGVkXzogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gcm9sZT0nY29sdW1uaGVhZGVyJ1xuICAgICAgICAgKiBAcmVhY3RpdmVcbiAgICAgICAgICovXG4gICAgICAgIHJvbGU6ICdjb2x1bW5oZWFkZXInLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7Qm9vbGVhbn0gc2hvd0hlYWRlckZpbHRlcl89ZmFsc2VcbiAgICAgICAgICogQHJlYWN0aXZlXG4gICAgICAgICAqL1xuICAgICAgICBzaG93SGVhZGVyRmlsdGVyXzogZmFsc2UsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtCb29sZWFufSBzb3J0YWJsZV89dHJ1ZVxuICAgICAgICAgKiBAcmVhY3RpdmVcbiAgICAgICAgICovXG4gICAgICAgIHNvcnRhYmxlXzogdHJ1ZVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJlZCBhZnRlciB0aGUgaXNTb3J0ZWQgY29uZmlnIGdvdCBjaGFuZ2VkXG4gICAgICogQHBhcmFtIHtTdHJpbmd8bnVsbH0gdmFsdWVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xudWxsfSBvbGRWYWx1ZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBhZnRlclNldElzU29ydGVkKHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICBsZXQgbWUgICAgICAgID0gdGhpcyxcbiAgICAgICAgICAgIHtjbHN9ICAgICA9IG1lLFxuICAgICAgICAgICAgY29udGFpbmVyID0gbWUudXAoJ2dyaWQtY29udGFpbmVyJyk7XG5cbiAgICAgICAgc3dpdGNoICh2YWx1ZSkge1xuICAgICAgICAgICAgY2FzZSBudWxsOlxuICAgICAgICAgICAgICAgIE5lb0FycmF5LmFkZChjbHMsICduZW8tc29ydC1oaWRkZW4nKTtcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgY2FzZSAnQVNDJzpcbiAgICAgICAgICAgICAgICBOZW9BcnJheS5yZW1vdmUoY2xzLCAnbmVvLXNvcnQtZGVzYycpO1xuICAgICAgICAgICAgICAgIE5lb0FycmF5LnJlbW92ZShjbHMsICduZW8tc29ydC1oaWRkZW4nKTtcbiAgICAgICAgICAgICAgICBOZW9BcnJheS5hZGQoY2xzLCAnbmVvLXNvcnQtYXNjJyk7XG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIGNhc2UgJ0RFU0MnOlxuICAgICAgICAgICAgICAgIE5lb0FycmF5LnJlbW92ZShjbHMsICduZW8tc29ydC1hc2MnKTtcbiAgICAgICAgICAgICAgICBOZW9BcnJheS5yZW1vdmUoY2xzLCAnbmVvLXNvcnQtaGlkZGVuJyk7XG4gICAgICAgICAgICAgICAgTmVvQXJyYXkuYWRkKGNscywgJ25lby1zb3J0LWRlc2MnKTtcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICB9XG5cbiAgICAgICAgbWUuY2xzID0gY2xzO1xuXG4gICAgICAgIC8vIHRlc3RpbmcgY2hlY2sgdW50aWwgYWxsIGV4YW1wbGUgZ3JpZHMgaGF2ZSBhIHN0b3JlXG4gICAgICAgIGlmICghY29udGFpbmVyIHx8ICFjb250YWluZXIuc3RvcmUpIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG5cbiAgICAgICAgbWUubW91bnRlZCAmJiBtZS5maXJlKCdzb3J0Jywge1xuICAgICAgICAgICAgZGlyZWN0aW9uOiB2YWx1ZSxcbiAgICAgICAgICAgIHByb3BlcnR5IDogbWUuZGF0YUZpZWxkXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIGFmdGVyIHRoZSBzaG93SGVhZGVyRmlsdGVyIGNvbmZpZyBnb3QgY2hhbmdlZFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gdmFsdWVcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IG9sZFZhbHVlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGFmdGVyU2V0U2hvd0hlYWRlckZpbHRlcih2YWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgbGV0IG1lID0gdGhpcztcblxuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICghbWUuZmlsdGVyRmllbGQpIHtcbiAgICAgICAgICAgICAgICBtZS5maWx0ZXJGaWVsZCA9IE5lby5jcmVhdGUoe1xuICAgICAgICAgICAgICAgICAgICBtb2R1bGUgICA6IFRleHRGaWVsZCxcbiAgICAgICAgICAgICAgICAgICAgYXBwTmFtZSAgOiBtZS5hcHBOYW1lLFxuICAgICAgICAgICAgICAgICAgICBmbGFnICAgICA6ICdmaWx0ZXItZmllbGQnLFxuICAgICAgICAgICAgICAgICAgICBoaWRlTGFiZWw6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudElkIDogbWUuaWQsXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlICAgIDoge21hcmdpbkxlZnQ6ICcuNWVtJywgbWFyZ2luUmlnaHQ6ICcuNWVtJ30sXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvd0lkIDogbWUud2luZG93SWQsXG5cbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2UgICAgICAgIDogbWUuY2hhbmdlRmlsdGVyVmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVyYXRvckNoYW5nZTogbWUuY2hhbmdlRmlsdGVyT3BlcmF0b3IsXG4gICAgICAgICAgICAgICAgICAgICAgICBzY29wZSAgICAgICAgIDogbWVcbiAgICAgICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgICAgICAuLi5tZS5lZGl0b3JDb25maWdcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIG1lLnZkb20uY24ucHVzaChtZS5maWx0ZXJGaWVsZC5jcmVhdGVWZG9tUmVmZXJlbmNlKCkpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBtZS5maWx0ZXJGaWVsZC52ZG9tLnJlbW92ZURvbVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKG1lLmZpbHRlckZpZWxkKSB7XG4gICAgICAgICAgICBtZS5maWx0ZXJGaWVsZC52ZG9tLnJlbW92ZURvbSA9IHRydWVcbiAgICAgICAgfVxuXG4gICAgICAgIG1lLnVwZGF0ZURlcHRoID0gMjtcbiAgICAgICAgbWUudXBkYXRlKClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgYWZ0ZXIgdGhlIHNvcnRhYmxlIGNvbmZpZyBnb3QgY2hhbmdlZFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gdmFsdWVcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IG9sZFZhbHVlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGFmdGVyU2V0U29ydGFibGUodmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgIGxldCBtZSAgICA9IHRoaXMsXG4gICAgICAgICAgICB7Y2xzfSA9IG1lO1xuXG4gICAgICAgIE5lb0FycmF5LnRvZ2dsZShjbHMsICduZW8tc29ydC1oaWRkZW4nLCAhdmFsdWUpO1xuXG4gICAgICAgIG1lLmNscyA9IGNscztcbiAgICAgICAgbWUudXBkYXRlKClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgYmVmb3JlIHRoZSBjZWxsQWxpZ24gY29uZmlnIGdldHMgY2hhbmdlZFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBvbGRWYWx1ZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBiZWZvcmVTZXRDZWxsQWxpZ24odmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJlZm9yZVNldEVudW1WYWx1ZSh2YWx1ZSwgb2xkVmFsdWUsICdjZWxsQWxpZ24nLCAnY2VsbEFsaWduVmFsdWVzJylcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIGRlc3Ryb3koLi4uYXJncykge1xuICAgICAgICB0aGlzLmZpbHRlckZpZWxkPy5kZXN0cm95KCk7XG4gICAgICAgIHN1cGVyLmRlc3Ryb3koLi4uYXJncylcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBvbkNsaWNrKGRhdGEpIHtcbiAgICAgICAgbGV0IG1lID0gdGhpcyxcbiAgICAgICAgICAgIG1hcDtcblxuICAgICAgICBpZiAobWUuZGVmYXVsdFNvcnREaXJlY3Rpb24gPT09ICdERVNDJykge1xuICAgICAgICAgICAgbWFwID0ge1xuICAgICAgICAgICAgICAgIEFTQyA6IG51bGwsXG4gICAgICAgICAgICAgICAgREVTQzogJ0FTQycsXG4gICAgICAgICAgICAgICAgbnVsbDogJ0RFU0MnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtYXAgPSB7XG4gICAgICAgICAgICAgICAgQVNDIDogJ0RFU0MnLFxuICAgICAgICAgICAgICAgIERFU0M6IG51bGwsXG4gICAgICAgICAgICAgICAgbnVsbDogJ0FTQydcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG1lLmlzU29ydGVkID0gbWFwW21lLmlzU29ydGVkICsgJyddO1xuXG4gICAgICAgIHN1cGVyLm9uQ2xpY2soZGF0YSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICAgICAqL1xuICAgIGNoYW5nZUZpbHRlck9wZXJhdG9yKGRhdGEpIHtcbiAgICAgICAgbGV0IG1lICAgICAgICAgICAgPSB0aGlzLFxuICAgICAgICAgICAgZ3JpZENvbnRhaW5lciA9IG1lLnVwKCdncmlkLWNvbnRhaW5lcicpLFxuICAgICAgICAgICAgc3RvcmUgICAgICAgICA9IGdyaWRDb250YWluZXI/LnN0b3JlLFxuICAgICAgICAgICAgb3BlcmF0b3IgICAgICA9IGRhdGEudmFsdWUsXG4gICAgICAgICAgICBmaWx0ZXIsIGZpbHRlcnM7XG5cbiAgICAgICAgaWYgKHN0b3JlKSB7XG4gICAgICAgICAgICBmaWx0ZXIgPSBzdG9yZS5nZXRGaWx0ZXIobWUuZGF0YUZpZWxkKTtcblxuICAgICAgICAgICAgaWYgKCFmaWx0ZXIpIHtcbiAgICAgICAgICAgICAgICBmaWx0ZXJzID0gc3RvcmUuZmlsdGVycztcblxuICAgICAgICAgICAgICAgIGZpbHRlcnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5OiBtZS5kYXRhRmllbGQsXG4gICAgICAgICAgICAgICAgICAgIG9wZXJhdG9yLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSAgIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgLi4ubWUuZmlsdGVyQ29uZmlnXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBzdG9yZS5maWx0ZXJzID0gZmlsdGVyc1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmaWx0ZXIub3BlcmF0b3IgPSBvcGVyYXRvclxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICAgKi9cbiAgICBjaGFuZ2VGaWx0ZXJWYWx1ZShkYXRhKSB7XG4gICAgICAgIGxldCBtZSAgICAgICAgICAgID0gdGhpcyxcbiAgICAgICAgICAgIGdyaWRDb250YWluZXIgPSBtZS51cCgnZ3JpZC1jb250YWluZXInKSxcbiAgICAgICAgICAgIHN0b3JlICAgICAgICAgPSBncmlkQ29udGFpbmVyPy5zdG9yZSxcbiAgICAgICAgICAgIHt2YWx1ZX0gICAgICAgPSBkYXRhLFxuICAgICAgICAgICAgZmllbGQsIGZpbHRlciwgZmlsdGVycywgbW9kZWw7XG5cbiAgICAgICAgaWYgKHN0b3JlKSB7XG4gICAgICAgICAgICBmaWx0ZXIgPSBzdG9yZS5nZXRGaWx0ZXIobWUuZGF0YUZpZWxkKTtcbiAgICAgICAgICAgIG1vZGVsICA9IHN0b3JlLm1vZGVsO1xuICAgICAgICAgICAgZmllbGQgID0gbW9kZWwuZ2V0RmllbGQobWUuZGF0YUZpZWxkKTtcblxuICAgICAgICAgICAgaWYgKHZhbHVlICYmIGZpZWxkPy50eXBlLnRvTG93ZXJDYXNlKCkgPT09ICdkYXRlJykge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gbmV3IERhdGUodmFsdWUpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghZmlsdGVyKSB7XG4gICAgICAgICAgICAgICAgZmlsdGVycyA9IHN0b3JlLmZpbHRlcnM7XG5cbiAgICAgICAgICAgICAgICBmaWx0ZXJzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eTogbWUuZGF0YUZpZWxkLFxuICAgICAgICAgICAgICAgICAgICBvcGVyYXRvcjogJ2xpa2UnLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgLi4ubWUuZmlsdGVyQ29uZmlnXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBzdG9yZS5maWx0ZXJzID0gZmlsdGVyc1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmaWx0ZXIudmFsdWUgPSB2YWx1ZVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHJlbW92ZVNvcnRpbmdDc3MoKSB7XG4gICAgICAgIGxldCBtZSAgICA9IHRoaXMsXG4gICAgICAgICAgICB7Y2xzfSA9IG1lO1xuXG4gICAgICAgIE5lb0FycmF5LmFkZChjbHMsICduZW8tc29ydC1oaWRkZW4nKTtcblxuICAgICAgICBtZS5jbHMgICAgICAgPSBjbHM7XG4gICAgICAgIG1lLl9pc1NvcnRlZCA9IG51bGxcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE5lby5zZXR1cENsYXNzKEJ1dHRvbik7XG4iLCJpbXBvcnQgQmFzZVRvb2xiYXIgZnJvbSAnLi4vLi4vdG9vbGJhci9CYXNlLm1qcyc7XG5cbi8qKlxuICogQGNsYXNzIE5lby5ncmlkLmhlYWRlci5Ub29sYmFyXG4gKiBAZXh0ZW5kcyBOZW8udG9vbGJhci5CYXNlXG4gKi9cbmNsYXNzIFRvb2xiYXIgZXh0ZW5kcyBCYXNlVG9vbGJhciB7XG4gICAgc3RhdGljIGNvbmZpZyA9IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gY2xhc3NOYW1lPSdOZW8uZ3JpZC5oZWFkZXIuVG9vbGJhcidcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgY2xhc3NOYW1lOiAnTmVvLmdyaWQuaGVhZGVyLlRvb2xiYXInLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSBudHlwZT0nZ3JpZC1oZWFkZXItdG9vbGJhcidcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgbnR5cGU6ICdncmlkLWhlYWRlci10b29sYmFyJyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ1tdfSBiYXNlQ2xzPVsnbmVvLWdyaWQtaGVhZGVyLXRvb2xiYXInLCduZW8tdG9vbGJhciddXG4gICAgICAgICAqL1xuICAgICAgICBiYXNlQ2xzOiBbJ25lby1ncmlkLWhlYWRlci10b29sYmFyJywgJ25lby10b29sYmFyJ10sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtCb29sZWFufSBkcmFnZ2FibGVfPXRydWVcbiAgICAgICAgICogQHJlYWN0aXZlXG4gICAgICAgICAqL1xuICAgICAgICBkcmFnZ2FibGVfOiB0cnVlLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7T2JqZWN0fSBpdGVtRGVmYXVsdHM9e250eXBlOiAnZ3JpZC1oZWFkZXItYnV0dG9uJ31cbiAgICAgICAgICogQHJlYWN0aXZlXG4gICAgICAgICAqL1xuICAgICAgICBpdGVtRGVmYXVsdHM6IHtcbiAgICAgICAgICAgIG50eXBlOiAnZ3JpZC1oZWFkZXItYnV0dG9uJ1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSByb2xlPSdyb3cnXG4gICAgICAgICAqIEByZWFjdGl2ZVxuICAgICAgICAgKi9cbiAgICAgICAgcm9sZTogJ3JvdycsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtOdW1iZXJ9IHNjcm9sbExlZnRfPTBcbiAgICAgICAgICogQHJlYWN0aXZlXG4gICAgICAgICAqL1xuICAgICAgICBzY3JvbGxMZWZ0XzogMCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge0Jvb2xlYW59IHNob3dIZWFkZXJGaWx0ZXJzXz1mYWxzZVxuICAgICAgICAgKiBAcmVhY3RpdmVcbiAgICAgICAgICovXG4gICAgICAgIHNob3dIZWFkZXJGaWx0ZXJzXzogZmFsc2UsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb252ZW5pZW5jZSBzaG9ydGN1dCB0byBwYXNzIHNvcnRhYmxlIHRvIGFsbCB0b29sYmFyIGl0ZW1zLlxuICAgICAgICAgKiBJZiBzZXQgdG8gdHJ1ZSwgaGVhZGVyIGNsaWNrcyB3aWxsIHNvcnQgdGhlIG1hdGNoaW5nIGNvbHVtbiAoQVNDLCBERVNDLCBudWxsKVxuICAgICAgICAgKiBAbWVtYmVyIHtCb29sZWFufSBzb3J0YWJsZT10cnVlXG4gICAgICAgICAqIEByZWFjdGl2ZVxuICAgICAgICAgKi9cbiAgICAgICAgc29ydGFibGU6IHRydWUsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtPYmplY3R9IF92ZG9tXG4gICAgICAgICAqL1xuICAgICAgICBfdmRvbTpcbiAgICAgICAgeydhcmlhLXJvd2luZGV4JzogMSwgY246IFt7Y246IFtdfV19XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIGFmdGVyIHRoZSBkcmFnZ2FibGUgY29uZmlnIGdvdCBjaGFuZ2VkXG4gICAgICogQHBhcmFtIHtCb29sZWFufSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gb2xkVmFsdWVcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgYWZ0ZXJTZXREcmFnZ2FibGUodmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgIGxldCBtZSA9IHRoaXM7XG5cbiAgICAgICAgaWYgKHZhbHVlICYmICFtZS5zb3J0Wm9uZSkge1xuICAgICAgICAgICAgaW1wb3J0KCcuLi8uLi9kcmFnZ2FibGUvZ3JpZC9oZWFkZXIvdG9vbGJhci9Tb3J0Wm9uZS5tanMnKS50aGVuKG1vZHVsZSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHthcHBOYW1lLCBpZCwgc2Nyb2xsTGVmdCwgd2luZG93SWR9ID0gbWU7XG5cbiAgICAgICAgICAgICAgICBtZS5zb3J0Wm9uZSA9IE5lby5jcmVhdGUoe1xuICAgICAgICAgICAgICAgICAgICBtb2R1bGUgICAgICAgICAgICAgOiBtb2R1bGUuZGVmYXVsdCxcbiAgICAgICAgICAgICAgICAgICAgYXBwTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgYm91bmRhcnlDb250YWluZXJJZDogW2lkLCBtZS5wYXJlbnQuaWRdLFxuICAgICAgICAgICAgICAgICAgICBvd25lciAgICAgICAgICAgICAgOiBtZSxcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsTGVmdCxcbiAgICAgICAgICAgICAgICAgICAgd2luZG93SWQsXG4gICAgICAgICAgICAgICAgICAgIC4uLm1lLnNvcnRab25lQ29uZmlnXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgYWZ0ZXIgdGhlIG1vdW50ZWQgY29uZmlnIGdvdCBjaGFuZ2VkXG4gICAgICogQHBhcmFtIHtCb29sZWFufSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gb2xkVmFsdWVcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgYWZ0ZXJTZXRNb3VudGVkKHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICBzdXBlci5hZnRlclNldE1vdW50ZWQodmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgICAgdmFsdWUgJiYgdGhpcy5wYXNzU2l6ZVRvQm9keSgpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIGFmdGVyIHRoZSBzaG93SGVhZGVyRmlsdGVycyBjb25maWcgZ290IGNoYW5nZWRcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHZhbHVlXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBvbGRWYWx1ZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBhZnRlclNldFNob3dIZWFkZXJGaWx0ZXJzKHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICBpZiAob2xkVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbGV0IG1lID0gdGhpcztcblxuICAgICAgICAgICAgbWUuaXRlbXMuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgICAgICAgICAgICBpdGVtLnNldFNpbGVudCh7XG4gICAgICAgICAgICAgICAgICAgIHNob3dIZWFkZXJGaWx0ZXI6IHZhbHVlXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBtZS51cGRhdGVEZXB0aCA9IC0xOyAvLyBmaWx0ZXJzIGNhbiBiZSBkZWVwbHkgbmVzdGVkXG4gICAgICAgICAgICBtZS51cGRhdGUoKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIGFmdGVyIHRoZSBzY3JvbGxMZWZ0IGNvbmZpZyBnb3QgY2hhbmdlZFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBvbGRWYWx1ZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBhZnRlclNldFNjcm9sbExlZnQodmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgIGlmIChvbGRWYWx1ZSAhPT0gdW5kZWZpbmVkICYmIHRoaXMuc29ydFpvbmUpIHtcbiAgICAgICAgICAgIHRoaXMuc29ydFpvbmUuc2Nyb2xsTGVmdCA9IHZhbHVlXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgYWZ0ZXIgdGhlIHNvcnRhYmxlIGNvbmZpZyBnb3QgY2hhbmdlZFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gdmFsdWVcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IG9sZFZhbHVlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGFmdGVyU2V0U29ydGFibGUodmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgIGlmIChvbGRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBsZXQgbWUgPSB0aGlzO1xuXG4gICAgICAgICAgICBtZS5pdGVtcy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgICAgICAgICAgIGl0ZW0uc2V0U2lsZW50KHtcbiAgICAgICAgICAgICAgICAgICAgc29ydGFibGU6IHZhbHVlXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBtZS51cGRhdGVEZXB0aCA9IDI7XG4gICAgICAgICAgICBtZS51cGRhdGUoKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICBjcmVhdGVJdGVtcygpIHtcbiAgICAgICAgbGV0IG1lICAgICAgICA9IHRoaXMsXG4gICAgICAgICAgICB7bW91bnRlZH0gPSBtZTtcblxuICAgICAgICBtZS5pdGVtRGVmYXVsdHMuc2hvd0hlYWRlckZpbHRlciA9IG1lLnNob3dIZWFkZXJGaWx0ZXJzO1xuXG4gICAgICAgIG1lLml0ZW1zLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgICAgICBpZiAoIU9iamVjdC5oYXNPd24oaXRlbSwgJ3NvcnRhYmxlJykpIHtcbiAgICAgICAgICAgICAgICBpdGVtLnNvcnRhYmxlID0gbWUuc29ydGFibGVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgc3VwZXIuY3JlYXRlSXRlbXMoKTtcblxuICAgICAgICBsZXQge2l0ZW1zfSA9IG1lLFxuICAgICAgICAgICAgc3R5bGU7XG5cbiAgICAgICAgaXRlbXMuZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGl0ZW0udmRvbVsnYXJpYS1jb2xpbmRleCddID0gaW5kZXggKyAxOyAvLyAxIGJhc2VkXG5cbiAgICAgICAgICAgIHN0eWxlID0gaXRlbS53cmFwcGVyU3R5bGU7XG5cbiAgICAgICAgICAgIC8vIHRvZG86IG9ubHkgYWRkIHB4IGlmIG51bWJlclxuICAgICAgICAgICAgaWYgKGl0ZW0ubWF4V2lkdGgpIHtzdHlsZS5tYXhXaWR0aCA9IGl0ZW0ubWF4V2lkdGggKyAncHgnfVxuICAgICAgICAgICAgaWYgKGl0ZW0ubWluV2lkdGgpIHtzdHlsZS5taW5XaWR0aCA9IGl0ZW0ubWluV2lkdGggKyAncHgnfVxuICAgICAgICAgICAgaWYgKGl0ZW0ud2lkdGgpICAgIHtzdHlsZS53aWR0aCAgICA9IGl0ZW0ud2lkdGggICAgKyAncHgnfVxuXG4gICAgICAgICAgICBpdGVtLndyYXBwZXJTdHlsZSA9IHN0eWxlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIG1lLnByb21pc2VVcGRhdGUoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIC8vIFRvIHByZXZlbnQgZHVwbGljYXRlIGNhbGxzLCB3ZSBuZWVkIHRvIGNoZWNrIHRoZSBtb3VudGVkIHN0YXRlIGJlZm9yZSB0aGUgdXBkYXRlIGNhbGxcbiAgICAgICAgICAgIG1vdW50ZWQgJiYgbWUucGFzc1NpemVUb0JvZHkoKVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhRmllbGRcbiAgICAgKiBAcmV0dXJucyB7TmVvLmJ1dHRvbi5CYXNlfG51bGx9XG4gICAgICovXG4gICAgZ2V0Q29sdW1uKGRhdGFGaWVsZCkge1xuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdGhpcy5pdGVtcykge1xuICAgICAgICAgICAgaWYgKGl0ZW0uZGF0YUZpZWxkID09PSBkYXRhRmllbGQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHNpbGVudD1mYWxzZVxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxuICAgICAqL1xuICAgIGFzeW5jIHBhc3NTaXplVG9Cb2R5KHNpbGVudD1mYWxzZSkge1xuICAgICAgICBsZXQgbWUgICAgICAgICAgICAgID0gdGhpcyxcbiAgICAgICAgICAgIHtpdGVtc30gICAgICAgICA9IG1lLFxuICAgICAgICAgICAge2JvZHl9ICAgICAgICAgID0gbWUucGFyZW50LFxuICAgICAgICAgICAgcmVjdHMgICAgICAgICAgID0gYXdhaXQgbWUuZ2V0RG9tUmVjdChpdGVtcy5tYXAoaXRlbSA9PiBpdGVtLmlkKSksXG4gICAgICAgICAgICBsYXN0SXRlbSAgICAgICAgPSByZWN0c1tyZWN0cy5sZW5ndGggLSAxXSxcbiAgICAgICAgICAgIGNvbHVtblBvc2l0aW9ucyA9IHJlY3RzLm1hcCgoaXRlbSwgaW5kZXgpID0+ICh7ZGF0YUZpZWxkOiBpdGVtc1tpbmRleF0uZGF0YUZpZWxkLCB3aWR0aDogaXRlbS53aWR0aCwgeDogaXRlbS54IC0gcmVjdHNbMF0ueH0pKSxcbiAgICAgICAgICAgIGkgICAgICAgICAgICAgICA9IDEsXG4gICAgICAgICAgICBsZW4gICAgICAgICAgICAgPSBjb2x1bW5Qb3NpdGlvbnMubGVuZ3RoLFxuICAgICAgICAgICAgbGF5b3V0RmluaXNoZWQgID0gdHJ1ZTtcblxuICAgICAgICAvLyBJZiB0aGUgY3NzIHNpemluZyBpcyBub3QgZG9uZSwgY29sdW1ucyBhZnRlciB0aGUgZmlyc3Qgb25lIGNhbiBnZXQgeCA9IDBcbiAgICAgICAgZm9yICg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgaWYgKGNvbHVtblBvc2l0aW9uc1tpXS54ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgbGF5b3V0RmluaXNoZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERlbGF5IGZvciBzbG93IGNvbm5lY3Rpb25zLCB3aGVyZSB0aGUgY29udGFpbmVyLXNpemluZyBpcyBub3QgZG9uZSB5ZXRcbiAgICAgICAgaWYgKCFsYXlvdXRGaW5pc2hlZCkge1xuICAgICAgICAgICAgYXdhaXQgbWUudGltZW91dCgxMDApO1xuICAgICAgICAgICAgYXdhaXQgbWUucGFzc1NpemVUb0JvZHkoc2lsZW50KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYm9keS5jb2x1bW5Qb3NpdGlvbnMuY2xlYXIoKTtcbiAgICAgICAgICAgIGJvZHkuY29sdW1uUG9zaXRpb25zLmFkZChjb2x1bW5Qb3NpdGlvbnMpO1xuXG4gICAgICAgICAgICBib2R5W3NpbGVudCA/ICdzZXRTaWxlbnQnIDogJ3NldCddKHtcbiAgICAgICAgICAgICAgICBhdmFpbGFibGVXaWR0aDogbGFzdEl0ZW0ueCArIGxhc3RJdGVtLndpZHRoIC0gcmVjdHNbMF0ueFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICFzaWxlbnQgJiYgYm9keS51cGRhdGVNb3VudGVkQW5kVmlzaWJsZUNvbHVtbnMoKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9ICBpbmRleFxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxuICAgICAqL1xuICAgIGFzeW5jIHNjcm9sbFRvSW5kZXgoaW5kZXgpIHtcbiAgICAgICAgYXdhaXQgTmVvLm1haW4uRG9tQWNjZXNzLnNjcm9sbEludG9WaWV3KHtcbiAgICAgICAgICAgIGRlbGF5ICAgOiAxMjUsXG4gICAgICAgICAgICBpZCAgICAgIDogdGhpcy5pdGVtc1tpbmRleF0uaWQsXG4gICAgICAgICAgICB3aW5kb3dJZDogdGhpcy53aW5kb3dJZFxuICAgICAgICB9KVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTmVvLnNldHVwQ2xhc3MoVG9vbGJhcik7XG4iLCJpbXBvcnQgQnV0dG9uICBmcm9tICcuL0J1dHRvbi5tanMnO1xuaW1wb3J0IFRvb2xiYXIgZnJvbSAnLi9Ub29sYmFyLm1qcyc7XG5cbmV4cG9ydCB7QnV0dG9uLCBUb29sYmFyfTsiLCJpbXBvcnQgQmFzZSAgICAgICAgICAgZnJvbSAnLi4vY29yZS9CYXNlLm1qcyc7XG5pbXBvcnQgTmVvQXJyYXkgICAgICAgZnJvbSAnLi4vdXRpbC9BcnJheS5tanMnO1xuaW1wb3J0IE9ic2VydmFibGUgICAgIGZyb20gJy4uL2NvcmUvT2JzZXJ2YWJsZS5tanMnO1xuaW1wb3J0IHtpc0Rlc2NyaXB0b3J9IGZyb20gJy4uL2NvcmUvQ29uZmlnU3ltYm9scy5tanMnO1xuXG4vKipcbiAqIEBjbGFzcyBOZW8uc2VsZWN0aW9uLk1vZGVsXG4gKiBAZXh0ZW5kcyBOZW8uY29yZS5CYXNlXG4gKiBAbWl4ZXMgTmVvLmNvcmUuT2JzZXJ2YWJsZVxuICovXG5jbGFzcyBNb2RlbCBleHRlbmRzIEJhc2Uge1xuICAgIC8qKlxuICAgICAqIFRydWUgYXV0b21hdGljYWxseSBhcHBsaWVzIHRoZSBjb3JlLk9ic2VydmFibGUgbWl4aW5cbiAgICAgKiBAbWVtYmVyIHtCb29sZWFufSBvYnNlcnZhYmxlPXRydWVcbiAgICAgKiBAc3RhdGljXG4gICAgICovXG4gICAgc3RhdGljIG9ic2VydmFibGUgPSB0cnVlXG5cbiAgICBzdGF0aWMgY29uZmlnID0ge1xuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSBjbGFzc05hbWU9J05lby5zZWxlY3Rpb24uTW9kZWwnXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIGNsYXNzTmFtZTogJ05lby5zZWxlY3Rpb24uTW9kZWwnLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSBudHlwZT0nc2VsZWN0aW9uLW1vZGVsJ1xuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBudHlwZTogJ3NlbGVjdGlvbi1tb2RlbCcsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQbGFjZWhvbGRlciBmb3IgZXh0ZW5kZWQgY2xhc3NlcyB0byBhZGQgYSBjdXN0b20gY3NzIHJ1bGUgdG8gdGhpcyBvd25lciBjb21wb25lbnRcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfG51bGx9IGNscz1udWxsXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIGNsczogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge0FycmF5fSBpdGVtc19cbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKiBAcmVhY3RpdmVcbiAgICAgICAgICovXG4gICAgICAgIGl0ZW1zXzoge1xuICAgICAgICAgICAgW2lzRGVzY3JpcHRvcl06IHRydWUsXG4gICAgICAgICAgICBjbG9uZSAgICAgICAgIDogJ3NoYWxsb3cnLFxuICAgICAgICAgICAgY2xvbmVPbkdldCAgICA6ICdub25lJyxcbiAgICAgICAgICAgIGlzRXF1YWwgICAgICAgOiAoKSA9PiBmYWxzZSxcbiAgICAgICAgICAgIHZhbHVlICAgICAgICAgOiBbXVxuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSBzZWxlY3RlZENscz0nc2VsZWN0ZWQnXG4gICAgICAgICAqL1xuICAgICAgICBzZWxlY3RlZENsczogJ25lby1zZWxlY3RlZCcsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtCb29sZWFufSBzaW5nbGVTZWxlY3Q9dHJ1ZVxuICAgICAgICAgKi9cbiAgICAgICAgc2luZ2xlU2VsZWN0OiB0cnVlLFxuICAgICAgICAvKipcbiAgICAgICAgICogSW50ZXJuYWxseSBzYXZlcyB0aGUgdmlldyBpZCwgYnV0IHRoZSBnZXR0ZXIgd2lsbCByZXR1cm4gdGhlIG1hdGNoaW5nIGluc3RhbmNlXG4gICAgICAgICAqIEBtZW1iZXIge09iamVjdH0gdmlld189bnVsbFxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqIEByZWFjdGl2ZVxuICAgICAgICAgKi9cbiAgICAgICAgdmlld186IG51bGxcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRyaWdnZXJlZCBiZWZvcmUgZ2V0dGluZyB0aGUgdmFsdWUgb2YgdGhlIHZpZXcgY29uZmlnXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlXG4gICAgICogQHJldHVybnMge05lby5jb21wb25lbnQuQmFzZX1cbiAgICAgKi9cbiAgICBiZWZvcmVHZXRWaWV3KHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBOZW8uZ2V0Q29tcG9uZW50KHRoaXMuX3ZpZXcpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0cmlnZ2VyZWQgYmVmb3JlIHNldHRpbmcgdGhlIHZhbHVlIG9mIHRoZSB2aWV3IGNvbmZpZ1xuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IHRoZSB2aWV3IGlkXG4gICAgICovXG4gICAgYmVmb3JlU2V0Vmlldyh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgJiYgdmFsdWUuaWRcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIGFkZERvbUxpc3RlbmVyKCkge31cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpdGVtXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbc2lsZW50XSB0cnVlIHRvIHByZXZlbnQgYSB2ZG9tIHVwZGF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0W118U3RyaW5nW119IGl0ZW1Db2xsZWN0aW9uPXRoaXMuaXRlbXNcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW3NlbGVjdGVkQ2xzXVxuICAgICAqL1xuICAgIGRlc2VsZWN0KGl0ZW0sIHNpbGVudCwgaXRlbUNvbGxlY3Rpb249dGhpcy5pdGVtcywgc2VsZWN0ZWRDbHMpIHtcbiAgICAgICAgbGV0IG1lICAgICA9IHRoaXMsXG4gICAgICAgICAgICB7dmlld30gPSBtZSxcbiAgICAgICAgICAgIG5vZGU7XG5cbiAgICAgICAgLy8gV2UgaG9sZCB2ZG9tIGlkcyBmb3Igbm93LCBzbyBhbGwgaW5jb21pbmcgc2VsZWN0aW9ucyBtdXN0IGJlIGNvbnZlcnRlZC5cbiAgICAgICAgaXRlbSA9IGl0ZW0uaXNSZWNvcmQgPyB2aWV3LmdldEl0ZW1JZChpdGVtKSA6IE5lby5pc09iamVjdChpdGVtKSA/IGl0ZW0uaWQgOiBpdGVtO1xuXG4gICAgICAgIGlmIChpdGVtQ29sbGVjdGlvbi5pbmNsdWRlcyhpdGVtKSkge1xuICAgICAgICAgICAgbm9kZSA9IHZpZXcuZ2V0VmRvbUNoaWxkKGl0ZW0pO1xuXG4gICAgICAgICAgICBpZiAobm9kZSkge1xuICAgICAgICAgICAgICAgIG5vZGUuY2xzID0gTmVvQXJyYXkucmVtb3ZlKG5vZGUuY2xzIHx8IFtdLCBzZWxlY3RlZENscyB8fCBtZS5zZWxlY3RlZENscyk7XG4gICAgICAgICAgICAgICAgZGVsZXRlIG5vZGVbJ2FyaWEtc2VsZWN0ZWQnXVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBOZW9BcnJheS5yZW1vdmUoaXRlbUNvbGxlY3Rpb24sIGl0ZW0pO1xuXG4gICAgICAgICAgICBpZiAoIXNpbGVudCkge1xuICAgICAgICAgICAgICAgIHZpZXcudXBkYXRlKCk7XG5cbiAgICAgICAgICAgICAgICB2aWV3LnBhcmVudD8ub25EZXNlbGVjdD8uKCk7IC8vIGdyaWQuQ29udGFpbmVyICYgdGFibGUuQ29udGFpbmVyXG4gICAgICAgICAgICAgICAgdmlldy5vbkRlc2VsZWN0Py4oKTtcblxuICAgICAgICAgICAgICAgIG1lLmZpcmUoJ3NlbGVjdGlvbkNoYW5nZScsIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uOiBpdGVtQ29sbGVjdGlvblxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIXNpbGVudCkge1xuICAgICAgICAgICAgbWUuZmlyZSgnbm9DaGFuZ2UnKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbc2lsZW50XSB0cnVlIHRvIHByZXZlbnQgYSB2ZG9tIHVwZGF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0W118U3RyaW5nW119IGl0ZW1Db2xsZWN0aW9uPXRoaXMuaXRlbXNcbiAgICAgKi9cbiAgICBkZXNlbGVjdEFsbChzaWxlbnQsIGl0ZW1Db2xsZWN0aW9uPXRoaXMuaXRlbXMpIHtcbiAgICAgICAgbGV0IG1lICAgICA9IHRoaXMsXG4gICAgICAgICAgICBpdGVtcyAgPSBbLi4uaXRlbUNvbGxlY3Rpb25dLFxuICAgICAgICAgICAge3ZpZXd9ID0gbWU7XG5cbiAgICAgICAgaWYgKGl0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgaXRlbXMuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgICAgICAgICAgICBtZS5kZXNlbGVjdChpdGVtLCB0cnVlKVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmICghc2lsZW50ICYmIGl0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB2aWV3LnVwZGF0ZSgpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG1lLmZpcmUoJ3NlbGVjdGlvbkNoYW5nZScsIHtcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb246IHRoaXMuaXRlbXNcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSBpZiAoIXNpbGVudCkge1xuICAgICAgICAgICAgbWUuZmlyZSgnbm9DaGFuZ2UnKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICBkZXN0cm95KC4uLmFyZ3MpIHtcbiAgICAgICAgdGhpcy51bnJlZ2lzdGVyKCk7XG4gICAgICAgIHN1cGVyLmRlc3Ryb3koLi4uYXJncylcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbXBvcnRhbnQgZm9yIG1hcHBpbmcgbGlzdGVuZXJzIHRvIHZpZXcgY29udHJvbGxlcnNcbiAgICAgKiBAcmV0dXJucyB7TmVvLmNvbnRyb2xsZXIuQ29tcG9uZW50fG51bGx9XG4gICAgICovXG4gICAgZ2V0Q29udHJvbGxlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlldy5nZXRDb250cm9sbGVyKClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IHRoaXMuaXRlbXNcbiAgICAgKi9cbiAgICBnZXRTZWxlY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLml0ZW1zXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAgICovXG4gICAgaGFzU2VsZWN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pdGVtcy5sZW5ndGggPiAwXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGlkXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59IHRydWUgaW4gY2FzZSB0aGUgaXRlbSBpcyBzZWxlY3RlZFxuICAgICAqL1xuICAgIGlzU2VsZWN0ZWQoaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXRlbXMuaW5jbHVkZXMoaWQpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtOZW8uY29tcG9uZW50LkJhc2V9IGNvbXBvbmVudFxuICAgICAqL1xuICAgIHJlZ2lzdGVyKGNvbXBvbmVudCkge1xuICAgICAgICBsZXQgbWUgID0gdGhpcyxcbiAgICAgICAgICAgIGNscyA9IGNvbXBvbmVudC53cmFwcGVyQ2xzIHx8IFtdO1xuXG4gICAgICAgIGlmIChtZS5jbHMgJiYgIWNscy5pbmNsdWRlcyhtZS5jbHMpKSB7XG4gICAgICAgICAgICBjbHMucHVzaChtZS5jbHMpO1xuICAgICAgICAgICAgY29tcG9uZW50LndyYXBwZXJDbHMgPSBjbHNcbiAgICAgICAgfVxuXG4gICAgICAgIG1lLnZpZXcgPSBjb21wb25lbnQ7XG4gICAgICAgIG1lLmFkZERvbUxpc3RlbmVyKCk7XG5cbiAgICAgICAgY29tcG9uZW50LmZpcmUoJ3NlbGVjdGlvbk1vZGVsQ2hhbmdlJywge1xuICAgICAgICAgICAgdmFsdWU6IG1lXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICByZW1vdmVEb21MaXN0ZW5lcnMoKSB7XG4gICAgICAgIGxldCBtZSAgICAgICAgICAgPSB0aGlzLFxuICAgICAgICAgICAgY29tcG9uZW50ICAgID0gbWUudmlldyxcbiAgICAgICAgICAgIGRvbUxpc3RlbmVycyA9IFsuLi5jb21wb25lbnQuZG9tTGlzdGVuZXJzXTtcblxuICAgICAgICBjb21wb25lbnQuZG9tTGlzdGVuZXJzLmZvckVhY2gobGlzdGVuZXIgPT4ge1xuICAgICAgICAgICAgaWYgKGxpc3RlbmVyLnNjb3BlID09PSBtZSkge1xuICAgICAgICAgICAgICAgIE5lb0FycmF5LnJlbW92ZShkb21MaXN0ZW5lcnMsIGxpc3RlbmVyKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBjb21wb25lbnQuZG9tTGlzdGVuZXJzID0gZG9tTGlzdGVuZXJzXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3R8T2JqZWN0W118U3RyaW5nW119IGl0ZW1zXG4gICAgICogQHBhcmFtIHtPYmplY3RbXXxTdHJpbmdbXX0gaXRlbUNvbGxlY3Rpb249dGhpcy5pdGVtc1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbc2VsZWN0ZWRDbHNdXG4gICAgICovXG4gICAgc2VsZWN0KGl0ZW1zLCBpdGVtQ29sbGVjdGlvbj10aGlzLml0ZW1zLCBzZWxlY3RlZENscykge1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoaXRlbXMpKSB7XG4gICAgICAgICAgICBpdGVtcyA9IFtpdGVtc11cbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBtZSAgICAgID0gdGhpcyxcbiAgICAgICAgICAgIHt2aWV3fSAgPSBtZSxcbiAgICAgICAgICAgIHJlY29yZHMgPSBbLi4uaXRlbXNdOyAvLyBQb3RlbnRpYWwgcmVjb3Jkc1xuXG4gICAgICAgIC8vIFdlIGhvbGQgdmRvbSBpZHMgZm9yIG5vdywgc28gYWxsIGluY29taW5nIHNlbGVjdGlvbnMgbXVzdCBiZSBjb252ZXJ0ZWQuXG4gICAgICAgIGl0ZW1zID0gaXRlbXMubWFwKGl0ZW0gPT4gaXRlbS5pc1JlY29yZCA/IHZpZXcuZ2V0SXRlbUlkKGl0ZW0pIDogTmVvLmlzT2JqZWN0KGl0ZW0pID8gaXRlbS5pZCA6IGl0ZW0pO1xuXG4gICAgICAgIGlmICghTmVvLmlzRXF1YWwoaXRlbUNvbGxlY3Rpb24sIGl0ZW1zKSkge1xuICAgICAgICAgICAgaWYgKG1lLnNpbmdsZVNlbGVjdCAmJiBpdGVtQ29sbGVjdGlvbiA9PT0gbWUuaXRlbXMpIHtcbiAgICAgICAgICAgICAgICBtZS5kZXNlbGVjdEFsbCh0cnVlLCBpdGVtQ29sbGVjdGlvbilcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaXRlbXMuZm9yRWFjaChub2RlID0+IHtcbiAgICAgICAgICAgICAgICBub2RlID0gdmlldy5nZXRWZG9tQ2hpbGQobm9kZSk7XG5cbiAgICAgICAgICAgICAgICBpZiAobm9kZSkge1xuICAgICAgICAgICAgICAgICAgICBub2RlLmNscyA9IE5lb0FycmF5LmFkZChub2RlLmNscyB8fCBbXSwgc2VsZWN0ZWRDbHMgfHwgbWUuc2VsZWN0ZWRDbHMpO1xuICAgICAgICAgICAgICAgICAgICBub2RlWydhcmlhLXNlbGVjdGVkJ10gPSB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIE5lb0FycmF5LmFkZChpdGVtQ29sbGVjdGlvbiwgaXRlbXMpO1xuXG4gICAgICAgICAgICBpZiAoIXZpZXcuc2lsZW50U2VsZWN0KSB7XG4gICAgICAgICAgICAgICAgdmlldy51cGRhdGUoKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2aWV3LnBhcmVudD8ub25TZWxlY3Q/LihpdGVtcyk7IC8vIGdyaWQuQ29udGFpbmVyICYgdGFibGUuQ29udGFpbmVyXG4gICAgICAgICAgICB2aWV3Lm9uU2VsZWN0Py4oaXRlbXMpO1xuXG4gICAgICAgICAgICBtZS5maXJlKCdzZWxlY3Rpb25DaGFuZ2UnLCB7XG4gICAgICAgICAgICAgICAgcmVjb3JkcyxcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb246IGl0ZW1Db2xsZWN0aW9uXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbWUuZmlyZSgnbm9DaGFuZ2UnKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGl0ZW1cbiAgICAgKi9cbiAgICB0b2dnbGVTZWxlY3Rpb24oaXRlbSkge1xuICAgICAgICBsZXQgbWUgPSB0aGlzO1xuXG4gICAgICAgIGlmIChtZS5pc1NlbGVjdGVkKGl0ZW0pKSB7XG4gICAgICAgICAgICBtZS5kZXNlbGVjdChpdGVtKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWUuc2VsZWN0KGl0ZW0pXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIHVucmVnaXN0ZXIoKSB7XG4gICAgICAgIGxldCBtZSAgPSB0aGlzLFxuICAgICAgICAgICAgY2xzID0gbWUudmlldy53cmFwcGVyQ2xzIHx8IFtdO1xuXG4gICAgICAgIGlmIChtZS5jbHMgJiYgY2xzLmluY2x1ZGVzKG1lLmNscykpIHtcbiAgICAgICAgICAgIE5lb0FycmF5LnJlbW92ZShjbHMsIG1lLmNscyk7XG4gICAgICAgICAgICBtZS52aWV3LndyYXBwZXJDbHMgPSBjbHNcbiAgICAgICAgfVxuXG4gICAgICAgIG1lLmRlc2VsZWN0QWxsKCk7XG5cbiAgICAgICAgbWUucmVtb3ZlRG9tTGlzdGVuZXJzKClcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE5lby5zZXR1cENsYXNzKE1vZGVsKTtcbiIsImltcG9ydCBNb2RlbCAgICBmcm9tICcuLi9Nb2RlbC5tanMnO1xuaW1wb3J0IE5lb0FycmF5IGZyb20gJy4uLy4uL3V0aWwvQXJyYXkubWpzJztcblxuLyoqXG4gKiBBYnN0cmFjdCBiYXNlIGNsYXNzIGZvciBhbGwgZ3JpZCByZWxhdGVkIHNlbGVjdGlvbiBtb2RlbHNcbiAqIEBjbGFzcyBOZW8uc2VsZWN0aW9uLmdyaWQuQmFzZU1vZGVsXG4gKiBAZXh0ZW5kcyBOZW8uc2VsZWN0aW9uLk1vZGVsXG4gKiBAYWJzdHJhY3RcbiAqL1xuY2xhc3MgQmFzZU1vZGVsIGV4dGVuZHMgTW9kZWwge1xuICAgIHN0YXRpYyBjb25maWcgPSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IGNsYXNzTmFtZT0nTmVvLnNlbGVjdGlvbi5ncmlkLkJhc2VNb2RlbCdcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgY2xhc3NOYW1lOiAnTmVvLnNlbGVjdGlvbi5ncmlkLkJhc2VNb2RlbCcsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTdG9yaW5nIHRoZSBjb2x1bW4gZGF0YUZpZWxkc1xuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmdbXX0gc2VsZWN0ZWRDb2x1bW5zPVtdXG4gICAgICAgICAqL1xuICAgICAgICBzZWxlY3RlZENvbHVtbnM6IFtdLFxuICAgICAgICAvKipcbiAgICAgICAgICogU3RvcmluZyB0aGUgcmVjb3JkIGlkc1xuICAgICAgICAgKiBAbWVtYmVyIHtOdW1iZXJbXXxTdHJpbmdbXX0gc2VsZWN0ZWRSb3dzPVtdXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIHNlbGVjdGVkUm93czogW11cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZW5pZW5jZSBzaG9ydGN1dFxuICAgICAqIEBtZW1iZXIge1N0cmluZ1tdfSBkYXRhRmllbGRzXG4gICAgICovXG4gICAgZ2V0IGRhdGFGaWVsZHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXcucGFyZW50LmNvbHVtbnMuaXRlbXMubWFwKGNvbHVtbiA9PiBjb2x1bW4uZGF0YUZpZWxkKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW3NpbGVudD1mYWxzZV0gdHJ1ZSB0byBwcmV2ZW50IGEgdmRvbSB1cGRhdGVcbiAgICAgKi9cbiAgICBkZXNlbGVjdEFsbFJvd3Moc2lsZW50PWZhbHNlKSB7XG4gICAgICAgIGxldCBtZSAgICAgPSB0aGlzLFxuICAgICAgICAgICAgaXRlbXMgID0gWy4uLm1lLnNlbGVjdGVkUm93c10sXG4gICAgICAgICAgICB7dmlld30gPSBtZTtcblxuICAgICAgICBpZiAoaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBpdGVtcy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgICAgICAgICAgIG1lLmRlc2VsZWN0Um93KGl0ZW0sIHRydWUpXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKCFzaWxlbnQgJiYgaXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHZpZXcudXBkYXRlKClcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbWUuZmlyZSgnc2VsZWN0aW9uQ2hhbmdlJywge1xuICAgICAgICAgICAgICAgIHJlY29yZHMgIDogbWUuc2VsZWN0ZWRSb3dzLm1hcChpZCA9PiB2aWV3LnN0b3JlLmdldChpZCkpLFxuICAgICAgICAgICAgICAgIHNlbGVjdGlvbjogbWUuc2VsZWN0ZWRSb3dzXG4gICAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2UgaWYgKCFzaWxlbnQpIHtcbiAgICAgICAgICAgIG1lLmZpcmUoJ25vQ2hhbmdlJylcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfFN0cmluZ30gcmVjb3JkSWRcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59ICAgICAgIFtzaWxlbnQ9ZmFsc2VdXG4gICAgICovXG4gICAgZGVzZWxlY3RSb3cocmVjb3JkSWQsIHNpbGVudD1mYWxzZSkge1xuICAgICAgICBsZXQgbWUgICAgICA9IHRoaXMsXG4gICAgICAgICAgICB7dmlld30gID0gbWUsXG4gICAgICAgICAgICB7c3RvcmV9ID0gdmlldyxcbiAgICAgICAgICAgIHJlY29yZCAgPSBzdG9yZS5nZXQocmVjb3JkSWQpLFxuICAgICAgICAgICAgcm93SWQgICA9IHZpZXcuZ2V0Um93SWQoc3RvcmUuaW5kZXhPZihyZWNvcmQpKSxcbiAgICAgICAgICAgIG5vZGUgICAgPSB2aWV3LmdldFZkb21DaGlsZChyb3dJZCk7XG5cbiAgICAgICAgaWYgKG5vZGUpIHtcbiAgICAgICAgICAgIG5vZGUuY2xzID0gTmVvQXJyYXkucmVtb3ZlKG5vZGUuY2xzIHx8IFtdLCBtZS5zZWxlY3RlZENscyk7XG4gICAgICAgICAgICBkZWxldGUgbm9kZVsnYXJpYS1zZWxlY3RlZCddXG4gICAgICAgIH1cblxuICAgICAgICBtZS5zZWxlY3RlZFJvd3MgPSBbcmVjb3JkSWRdO1xuXG4gICAgICAgICFzaWxlbnQgJiYgdmlldy51cGRhdGUoKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgcmVjb3JkIGZvciBhIGdpdmVuIGV2ZW50IHBhdGhcbiAgICAgKiBAcGFyYW0ge09iamVjdFtdfSBwYXRoXG4gICAgICogQHJldHVybnMge051bWJlcnxTdHJpbmd8bnVsbH1cbiAgICAgKi9cbiAgICBnZXRSZWNvcmQocGF0aCkge1xuICAgICAgICBsZXQgbm9kZSwgcm93SW5kZXg7XG5cbiAgICAgICAgZm9yIChub2RlIG9mIHBhdGgpIHtcbiAgICAgICAgICAgIGlmIChub2RlLmFyaWEucm93aW5kZXgpIHtcbiAgICAgICAgICAgICAgICByb3dJbmRleCA9IHBhcnNlSW50KG5vZGUuYXJpYS5yb3dpbmRleCk7XG5cbiAgICAgICAgICAgICAgICAvLyBhcmlhLXJvd2luZGV4IGlzIDEgYmFzZWQgJiBhbHNvIGluY2x1ZGVzIHRoZSBoZWFkZXJcbiAgICAgICAgICAgICAgICByb3dJbmRleCAtPSAyO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudmlldy5zdG9yZS5nZXRBdChyb3dJbmRleClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtSZWNvcmR9IHJlY29yZFxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqL1xuICAgIGhhc0Fubm90YXRpb25zKHJlY29yZCkge1xuICAgICAgICByZXR1cm4gISFPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHJlY29yZC5fX3Byb3RvX18sIHRoaXMudmlldy5zZWxlY3RlZFJlY29yZEZpZWxkKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhbiBldmVudCBwYXRoIGNvbnRhaW5zIGEgZ3JpZCBjZWxsIGVkaXRvclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgIGRhdGFcbiAgICAgKiBAcGFyYW0ge09iamVjdFtdfSBkYXRhLnBhdGhcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBoYXNFZGl0b3JGb2N1cyh7cGF0aH0pIHtcbiAgICAgICAgZm9yIChjb25zdCBub2RlIG9mIHBhdGgpIHtcbiAgICAgICAgICAgIGlmIChub2RlLmNscz8uaW5jbHVkZXMoJ25lby1ncmlkLWVkaXRvcicpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhRmllbGRcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gdHJ1ZSBpbiBjYXNlIHRoZSBjb2x1bW4gaXMgc2VsZWN0ZWRcbiAgICAgKi9cbiAgICBpc1NlbGVjdGVkQ29sdW1uKGRhdGFGaWVsZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3RlZENvbHVtbnMuaW5jbHVkZXMoZGF0YUZpZWxkKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfFN0cmluZ30gcmVjb3JkSWRcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gdHJ1ZSBpbiBjYXNlIHRoZSByb3cgaXMgc2VsZWN0ZWRcbiAgICAgKi9cbiAgICBpc1NlbGVjdGVkUm93KHJlY29yZElkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbGVjdGVkUm93cy5pbmNsdWRlcyhyZWNvcmRJZClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge051bWJlcnxTdHJpbmd9IHJlY29yZElkXG4gICAgICogQHBhcmFtIHtCb29sZWFufSAgICAgICBbc2lsZW50PWZhbHNlXVxuICAgICAqL1xuICAgIHNlbGVjdFJvdyhyZWNvcmRJZCwgc2lsZW50PWZhbHNlKSB7XG4gICAgICAgIGxldCBtZSAgICAgID0gdGhpcyxcbiAgICAgICAgICAgIHt2aWV3fSAgPSBtZSxcbiAgICAgICAgICAgIHtzdG9yZX0gPSB2aWV3LFxuICAgICAgICAgICAgcmVjb3JkICA9IHN0b3JlLmdldChyZWNvcmRJZCksXG4gICAgICAgICAgICByb3dJZCAgID0gdmlldy5nZXRSb3dJZChzdG9yZS5pbmRleE9mKHJlY29yZCkpLFxuICAgICAgICAgICAgbm9kZSAgICA9IHZpZXcuZ2V0VmRvbUNoaWxkKHJvd0lkKTtcblxuICAgICAgICBpZiAobWUuc2luZ2xlU2VsZWN0KSB7XG4gICAgICAgICAgICBtZS5kZXNlbGVjdEFsbFJvd3ModHJ1ZSlcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChub2RlKSB7XG4gICAgICAgICAgICBub2RlLmNscyA9IE5lb0FycmF5LmFkZChub2RlLmNscyB8fCBbXSwgbWUuc2VsZWN0ZWRDbHMpO1xuICAgICAgICAgICAgbm9kZVsnYXJpYS1zZWxlY3RlZCddID0gdHJ1ZVxuICAgICAgICB9XG5cbiAgICAgICAgbWUuc2VsZWN0ZWRSb3dzID0gW3JlY29yZElkXTtcblxuICAgICAgICAhc2lsZW50ICYmIHZpZXcudXBkYXRlKClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge051bWJlcnxTdHJpbmd9IHJlY29yZElkXG4gICAgICogQHBhcmFtIHtCb29sZWFufSAgICAgICBbc2lsZW50PWZhbHNlXVxuICAgICAqL1xuICAgIHRvZ2dsZVJvd1NlbGVjdGlvbihyZWNvcmRJZCwgc2lsZW50PWZhbHNlKSB7XG4gICAgICAgIHRoaXNbdGhpcy5pc1NlbGVjdGVkUm93KHJlY29yZElkKSA/ICdkZXNlbGVjdFJvdycgOiAnc2VsZWN0Um93J10ocmVjb3JkSWQsIHNpbGVudClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIHVucmVnaXN0ZXIoKSB7XG4gICAgICAgIGxldCBtZSAgICAgICAgPSB0aGlzLFxuICAgICAgICAgICAgY291bnRSb3dzID0gbWUuc2VsZWN0ZWRSb3dzLmxlbmd0aDtcblxuICAgICAgICBtZS5zZWxlY3RlZFJvd3MgPSBbXTtcblxuICAgICAgICBjb3VudFJvd3MgPiAwICYmIG1lLnZpZXcuY3JlYXRlVmlld0RhdGEoKTtcblxuICAgICAgICBzdXBlci51bnJlZ2lzdGVyKClcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE5lby5zZXR1cENsYXNzKEJhc2VNb2RlbCk7XG4iLCJpbXBvcnQgQmFzZU1vZGVsIGZyb20gJy4vQmFzZU1vZGVsLm1qcyc7XG5cbi8qKlxuICogQGNsYXNzIE5lby5zZWxlY3Rpb24uZ3JpZC5Sb3dNb2RlbFxuICogQGV4dGVuZHMgTmVvLnNlbGVjdGlvbi5ncmlkLkJhc2VNb2RlbFxuICovXG5jbGFzcyBSb3dNb2RlbCBleHRlbmRzIEJhc2VNb2RlbCB7XG4gICAgc3RhdGljIGNvbmZpZyA9IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gY2xhc3NOYW1lPSdOZW8uc2VsZWN0aW9uLmdyaWQuUm93TW9kZWwnXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIGNsYXNzTmFtZTogJ05lby5zZWxlY3Rpb24uZ3JpZC5Sb3dNb2RlbCcsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IG50eXBlPSdzZWxlY3Rpb24tZ3JpZC1yb3dtb2RlbCdcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgbnR5cGU6ICdzZWxlY3Rpb24tZ3JpZC1yb3dtb2RlbCcsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IGNscz0nbmVvLXNlbGVjdGlvbi1yb3dtb2RlbCdcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgY2xzOiAnbmVvLXNlbGVjdGlvbi1yb3dtb2RlbCdcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIGFkZERvbUxpc3RlbmVyKCkge1xuICAgICAgICBsZXQgbWUgPSB0aGlzO1xuXG4gICAgICAgIG1lLnZpZXcucGFyZW50Lm9uKCdyb3dDbGljaycsIG1lLm9uUm93Q2xpY2ssIG1lKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBhcmdzXG4gICAgICovXG4gICAgZGVzdHJveSguLi5hcmdzKSB7XG4gICAgICAgIGxldCBtZSA9IHRoaXM7XG5cbiAgICAgICAgbWUudmlldy5wYXJlbnQudW4oJ3Jvd0NsaWNrJywgbWUub25Sb3dDbGljaywgbWUpO1xuXG4gICAgICAgIHN1cGVyLmRlc3Ryb3koLi4uYXJncylcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICAgICAqL1xuICAgIG9uS2V5RG93bkRvd24oZGF0YSkge1xuICAgICAgICAhdGhpcy5oYXNFZGl0b3JGb2N1cyhkYXRhKSAmJiB0aGlzLm9uTmF2S2V5Um93KDEpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICAgKi9cbiAgICBvbktleURvd25VcChkYXRhKSB7XG4gICAgICAgICF0aGlzLmhhc0VkaXRvckZvY3VzKGRhdGEpICYmIHRoaXMub25OYXZLZXlSb3coLTEpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHN0ZXBcbiAgICAgKi9cbiAgICBvbk5hdktleVJvdyhzdGVwKSB7XG4gICAgICAgIGxldCBtZSAgICAgICAgICAgPSB0aGlzLFxuICAgICAgICAgICAge3ZpZXd9ICAgICAgID0gbWUsXG4gICAgICAgICAgICB7c3RvcmV9ICAgICAgPSB2aWV3LFxuICAgICAgICAgICAgY291bnRSZWNvcmRzID0gc3RvcmUuZ2V0Q291bnQoKSxcbiAgICAgICAgICAgIGtleVByb3BlcnR5ICA9IHN0b3JlLmdldEtleVByb3BlcnR5KCksXG4gICAgICAgICAgICByZWNvcmRJZCAgICAgPSBtZS5zZWxlY3RlZFJvd3NbMF0gfHwgc3RvcmUuZ2V0QXQoMClba2V5UHJvcGVydHldLFxuICAgICAgICAgICAgcmVjb3JkICAgICAgID0gc3RvcmUuZ2V0KHJlY29yZElkKSxcbiAgICAgICAgICAgIGluZGV4ICAgICAgICA9IHN0b3JlLmluZGV4T2YocmVjb3JkKSxcbiAgICAgICAgICAgIG5ld0luZGV4ICAgICA9IChpbmRleCArIHN0ZXApICUgY291bnRSZWNvcmRzO1xuXG4gICAgICAgIHdoaWxlIChuZXdJbmRleCA8IDApIHtcbiAgICAgICAgICAgIG5ld0luZGV4ICs9IGNvdW50UmVjb3Jkc1xuICAgICAgICB9XG5cbiAgICAgICAgcmVjb3JkID0gc3RvcmUuZ2V0QXQobmV3SW5kZXgpO1xuXG4gICAgICAgIGlmIChtZS5oYXNBbm5vdGF0aW9ucyhyZWNvcmQpKSB7XG4gICAgICAgICAgICBtZS51cGRhdGVBbm5vdGF0aW9ucyhyZWNvcmQpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWNvcmRJZCA9IHJlY29yZFtrZXlQcm9wZXJ0eV07XG5cbiAgICAgICAgICAgIGlmIChyZWNvcmRJZCkge1xuICAgICAgICAgICAgICAgIG1lLnNlbGVjdFJvdyhyZWNvcmRJZCk7XG5cbiAgICAgICAgICAgICAgICB2aWV3LnNjcm9sbEJ5Um93cyhpbmRleCwgc3RlcCk7XG4gICAgICAgICAgICAgICAgdmlldy5maXJlKCdzZWxlY3QnLCB7cmVjb3JkfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAgICovXG4gICAgb25Sb3dDbGljayh7ZGF0YX0pIHtcbiAgICAgICAgbGV0IG1lICAgICA9IHRoaXMsXG4gICAgICAgICAgICB7dmlld30gPSBtZSxcbiAgICAgICAgICAgIHJlY29yZCA9IG1lLmdldFJlY29yZChkYXRhLnBhdGgpLFxuICAgICAgICAgICAgcmVjb3JkSWQ7XG5cbiAgICAgICAgaWYgKHJlY29yZCkge1xuICAgICAgICAgICAgaWYgKG1lLmhhc0Fubm90YXRpb25zKHJlY29yZCkpIHtcbiAgICAgICAgICAgICAgICBtZS51cGRhdGVBbm5vdGF0aW9ucyhyZWNvcmQpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlY29yZElkID0gcmVjb3JkW3ZpZXcuc3RvcmUuZ2V0S2V5UHJvcGVydHkoKV07XG5cbiAgICAgICAgICAgICAgICBtZS50b2dnbGVSb3dTZWxlY3Rpb24ocmVjb3JkSWQpO1xuXG4gICAgICAgICAgICAgICAgdmlldy5maXJlKG1lLmlzU2VsZWN0ZWRSb3cocmVjb3JkSWQpID8gJ3NlbGVjdCcgOiAnZGVzZWxlY3QnLCB7cmVjb3JkfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7TmVvLmNvbXBvbmVudC5CYXNlfSBjb21wb25lbnRcbiAgICAgKi9cbiAgICByZWdpc3Rlcihjb21wb25lbnQpIHtcbiAgICAgICAgc3VwZXIucmVnaXN0ZXIoY29tcG9uZW50KTtcblxuICAgICAgICBsZXQge2lkLCB2aWV3fSA9IHRoaXM7XG5cbiAgICAgICAgdmlldy5rZXlzPy5fa2V5cy5wdXNoKFxuICAgICAgICAgICAge2ZuOiAnb25LZXlEb3duRG93bicsIGtleTogJ0Rvd24nLCBzY29wZTogaWR9LFxuICAgICAgICAgICAge2ZuOiAnb25LZXlEb3duVXAnLCAgIGtleTogJ1VwJywgICBzY29wZTogaWR9XG4gICAgICAgIClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIHVucmVnaXN0ZXIoKSB7XG4gICAgICAgIGxldCB7aWQsIHZpZXd9ID0gdGhpcztcblxuICAgICAgICB2aWV3LmtleXM/LnJlbW92ZUtleXMoW1xuICAgICAgICAgICAge2ZuOiAnb25LZXlEb3duRG93bicsIGtleTogJ0Rvd24nLCBzY29wZTogaWR9LFxuICAgICAgICAgICAge2ZuOiAnb25LZXlEb3duVXAnLCAgIGtleTogJ1VwJywgICBzY29wZTogaWR9XG4gICAgICAgIF0pO1xuXG4gICAgICAgIHN1cGVyLnVucmVnaXN0ZXIoKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7UmVjb3JkfSByZWNvcmRcbiAgICAgKi9cbiAgICB1cGRhdGVBbm5vdGF0aW9ucyhyZWNvcmQpIHtcbiAgICAgICAgbGV0IG1lICAgICAgICAgICAgICAgPSB0aGlzLFxuICAgICAgICAgICAge3ZpZXd9ICAgICAgICAgICA9IG1lLFxuICAgICAgICAgICAge3N0b3JlfSAgICAgICAgICA9IHZpZXcsXG4gICAgICAgICAgICByZWNvcmRJZCAgICAgICAgID0gcmVjb3JkW3N0b3JlLmdldEtleVByb3BlcnR5KCldLFxuICAgICAgICAgICAgaXNTZWxlY3RlZCAgICAgICA9IG1lLmlzU2VsZWN0ZWRSb3cocmVjb3JkSWQpLFxuICAgICAgICAgICAgYW5ub3RhdGlvbnNGaWVsZCA9IHZpZXcuc2VsZWN0ZWRSZWNvcmRGaWVsZDtcblxuICAgICAgICBpZiAobWUuc2luZ2xlU2VsZWN0KSB7XG4gICAgICAgICAgICBpZiAoaXNTZWxlY3RlZCkge1xuICAgICAgICAgICAgICAgIHJlY29yZFthbm5vdGF0aW9uc0ZpZWxkXSA9IGZhbHNlXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1lLnNlbGVjdGVkUm93cy5mb3JFYWNoKHJlY29yZElkID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgY2FuIHVzZSBzZXRTaWxlbnQoKSwgc2luY2UgdGhlIGxhc3QgY2hhbmdlIHdpbGwgdHJpZ2dlciBhIHZpZXcgdXBkYXRlXG4gICAgICAgICAgICAgICAgICAgIHN0b3JlLmdldChyZWNvcmRJZCkuc2V0U2lsZW50KHtbYW5ub3RhdGlvbnNGaWVsZF06IGZhbHNlfSlcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJlY29yZFthbm5vdGF0aW9uc0ZpZWxkXSA9IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlY29yZFthbm5vdGF0aW9uc0ZpZWxkXSA9ICFyZWNvcmRbYW5ub3RhdGlvbnNGaWVsZF1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTmVvLnNldHVwQ2xhc3MoUm93TW9kZWwpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9