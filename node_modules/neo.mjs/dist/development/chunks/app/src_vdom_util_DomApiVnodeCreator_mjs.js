"use strict";
(self["webpackChunkneo_mjs"] = self["webpackChunkneo_mjs"] || []).push([["src_vdom_util_DomApiVnodeCreator_mjs"],{

/***/ "./src/vdom/util/DomApiVnodeCreator.mjs":
/*!**********************************************!*\
  !*** ./src/vdom/util/DomApiVnodeCreator.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const DomApiVnodeCreator = {
    /**
     * Recursively creates a VNode tree suitable for direct DOM API insertion.
     * This tree excludes any nodes that are marked as 'moved' within the movedNodes map,
     * as their DOM manipulation will be handled by separate moveNode deltas.
     *
     * @param {Neo.vdom.VNode} vnode        The VNode to process.
     * @param {Map}            [movedNodes] A map of VNodes that are being moved.
     * @returns {Object|null} A new VNode tree (or subtree) with moved nodes pruned, or null if the root is a moved node.
     */
    create(vnode, movedNodes) {
        /*
         * A vnode itself can be null (removeDom: true) => opt out.
         *
         * If the node has a componentId, there is nothing to do (scoped vdom updates), opt out.
         *
         * If this specific vnode is in the movedNodes map, it means its DOM element
         * will be moved by a separate delta. So, we should not include it in this fragment.
         */
        if (!vnode || vnode.componentId || (vnode.id && movedNodes?.get(vnode.id))) {
            return null // Prune this branch
        }

        // For text nodes, we can return the original VNode directly, as they have no childNodes array to modify.
        if (vnode.vtype === 'text') {
            return vnode
        }

        // For other VNodes (vnode or root), create a shallow clone first.
        let clonedVnode = {...vnode, childNodes: []};

        // Recursively process children
        if (vnode.childNodes.length > 0) {
            vnode.childNodes.forEach(child => {
                const processedChild = DomApiVnodeCreator.create(child, movedNodes);

                // Only add if not pruned
                if (processedChild) {
                    clonedVnode.childNodes.push(processedChild)
                }
            });
        }

        return clonedVnode
    }
};

const ns = Neo.ns('Neo.vdom.util', true);
ns.DomApiVnodeCreator = DomApiVnodeCreator;

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DomApiVnodeCreator);


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2h1bmtzL2FwcC9zcmNfdmRvbV91dGlsX0RvbUFwaVZub2RlQ3JlYXRvcl9tanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsZ0JBQWdCO0FBQy9CLGVBQWUsZ0JBQWdCO0FBQy9CLGlCQUFpQixhQUFhO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMkJBQTJCOztBQUUzQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxpRUFBZSxrQkFBa0IsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL25lby5tanMvLi9zcmMvdmRvbS91dGlsL0RvbUFwaVZub2RlQ3JlYXRvci5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgRG9tQXBpVm5vZGVDcmVhdG9yID0ge1xuICAgIC8qKlxuICAgICAqIFJlY3Vyc2l2ZWx5IGNyZWF0ZXMgYSBWTm9kZSB0cmVlIHN1aXRhYmxlIGZvciBkaXJlY3QgRE9NIEFQSSBpbnNlcnRpb24uXG4gICAgICogVGhpcyB0cmVlIGV4Y2x1ZGVzIGFueSBub2RlcyB0aGF0IGFyZSBtYXJrZWQgYXMgJ21vdmVkJyB3aXRoaW4gdGhlIG1vdmVkTm9kZXMgbWFwLFxuICAgICAqIGFzIHRoZWlyIERPTSBtYW5pcHVsYXRpb24gd2lsbCBiZSBoYW5kbGVkIGJ5IHNlcGFyYXRlIG1vdmVOb2RlIGRlbHRhcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7TmVvLnZkb20uVk5vZGV9IHZub2RlICAgICAgICBUaGUgVk5vZGUgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0ge01hcH0gICAgICAgICAgICBbbW92ZWROb2Rlc10gQSBtYXAgb2YgVk5vZGVzIHRoYXQgYXJlIGJlaW5nIG1vdmVkLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R8bnVsbH0gQSBuZXcgVk5vZGUgdHJlZSAob3Igc3VidHJlZSkgd2l0aCBtb3ZlZCBub2RlcyBwcnVuZWQsIG9yIG51bGwgaWYgdGhlIHJvb3QgaXMgYSBtb3ZlZCBub2RlLlxuICAgICAqL1xuICAgIGNyZWF0ZSh2bm9kZSwgbW92ZWROb2Rlcykge1xuICAgICAgICAvKlxuICAgICAgICAgKiBBIHZub2RlIGl0c2VsZiBjYW4gYmUgbnVsbCAocmVtb3ZlRG9tOiB0cnVlKSA9PiBvcHQgb3V0LlxuICAgICAgICAgKlxuICAgICAgICAgKiBJZiB0aGUgbm9kZSBoYXMgYSBjb21wb25lbnRJZCwgdGhlcmUgaXMgbm90aGluZyB0byBkbyAoc2NvcGVkIHZkb20gdXBkYXRlcyksIG9wdCBvdXQuXG4gICAgICAgICAqXG4gICAgICAgICAqIElmIHRoaXMgc3BlY2lmaWMgdm5vZGUgaXMgaW4gdGhlIG1vdmVkTm9kZXMgbWFwLCBpdCBtZWFucyBpdHMgRE9NIGVsZW1lbnRcbiAgICAgICAgICogd2lsbCBiZSBtb3ZlZCBieSBhIHNlcGFyYXRlIGRlbHRhLiBTbywgd2Ugc2hvdWxkIG5vdCBpbmNsdWRlIGl0IGluIHRoaXMgZnJhZ21lbnQuXG4gICAgICAgICAqL1xuICAgICAgICBpZiAoIXZub2RlIHx8IHZub2RlLmNvbXBvbmVudElkIHx8ICh2bm9kZS5pZCAmJiBtb3ZlZE5vZGVzPy5nZXQodm5vZGUuaWQpKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGwgLy8gUHJ1bmUgdGhpcyBicmFuY2hcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZvciB0ZXh0IG5vZGVzLCB3ZSBjYW4gcmV0dXJuIHRoZSBvcmlnaW5hbCBWTm9kZSBkaXJlY3RseSwgYXMgdGhleSBoYXZlIG5vIGNoaWxkTm9kZXMgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAgICBpZiAodm5vZGUudnR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgICAgICAgcmV0dXJuIHZub2RlXG4gICAgICAgIH1cblxuICAgICAgICAvLyBGb3Igb3RoZXIgVk5vZGVzICh2bm9kZSBvciByb290KSwgY3JlYXRlIGEgc2hhbGxvdyBjbG9uZSBmaXJzdC5cbiAgICAgICAgbGV0IGNsb25lZFZub2RlID0gey4uLnZub2RlLCBjaGlsZE5vZGVzOiBbXX07XG5cbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgcHJvY2VzcyBjaGlsZHJlblxuICAgICAgICBpZiAodm5vZGUuY2hpbGROb2Rlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB2bm9kZS5jaGlsZE5vZGVzLmZvckVhY2goY2hpbGQgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHByb2Nlc3NlZENoaWxkID0gRG9tQXBpVm5vZGVDcmVhdG9yLmNyZWF0ZShjaGlsZCwgbW92ZWROb2Rlcyk7XG5cbiAgICAgICAgICAgICAgICAvLyBPbmx5IGFkZCBpZiBub3QgcHJ1bmVkXG4gICAgICAgICAgICAgICAgaWYgKHByb2Nlc3NlZENoaWxkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsb25lZFZub2RlLmNoaWxkTm9kZXMucHVzaChwcm9jZXNzZWRDaGlsZClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjbG9uZWRWbm9kZVxuICAgIH1cbn07XG5cbmNvbnN0IG5zID0gTmVvLm5zKCdOZW8udmRvbS51dGlsJywgdHJ1ZSk7XG5ucy5Eb21BcGlWbm9kZUNyZWF0b3IgPSBEb21BcGlWbm9kZUNyZWF0b3I7XG5cbmV4cG9ydCBkZWZhdWx0IERvbUFwaVZub2RlQ3JlYXRvcjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==