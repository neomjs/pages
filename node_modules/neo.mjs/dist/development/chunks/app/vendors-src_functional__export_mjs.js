"use strict";
(self["webpackChunkneo_mjs"] = self["webpackChunkneo_mjs"] || []).push([["vendors-src_functional__export_mjs"],{

/***/ "./src/core/Effect.mjs":
/*!*****************************!*\
  !*** ./src/core/Effect.mjs ***!
  \*****************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Config_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Config.mjs */ "./src/core/Config.mjs");
/* harmony import */ var _EffectManager_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EffectManager.mjs */ "./src/core/EffectManager.mjs");
/* harmony import */ var _EffectBatchManager_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./EffectBatchManager.mjs */ "./src/core/EffectBatchManager.mjs");
/* harmony import */ var _IdGenerator_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./IdGenerator.mjs */ "./src/core/IdGenerator.mjs");





/**
 * Creates a reactive effect that automatically tracks its dependencies and re-runs when any of them change.
 * This is a lightweight, plain JavaScript class for performance.
 * It serves as a core reactive primitive, enabling automatic and dynamic dependency tracking.
 * @class Neo.core.Effect
 */
class Effect {
    /**
     * The optional component id this effect belongs to.
     * @member {String|null} componentId=null
     */
    componentId = null
    /**
     * A Map containing Config instances as keys and their cleanup functions as values.
     * @member {Map} dependencies=new Map()
     * @protected
     */
    dependencies = new Map()
    /**
     * The function to execute.
     * @member {Function|null} _fn=null
     */
    _fn = null
    /**
     * The unique identifier for this effect instance.
     * @member {String|null}
     */
    id = _IdGenerator_mjs__WEBPACK_IMPORTED_MODULE_3__["default"].getId('effect')
    /**
     * @member {Boolean}
     * @protected
     */
    isDestroyed = false
    /**
     * @member {Neo.core.Config}
     * @protected
     */
    isRunning = null

    /**
     * @member fn
     */
    get fn() {
        return this._fn
    }
    set fn(value) {
        this._fn = value;
        // Assigning a new function to `fn` automatically triggers a re-run.
        // This ensures that the effect immediately re-evaluates its dependencies
        // based on the new function's logic, clearing old dependencies and establishing new ones.
        this.run()
    }

    /**
     * @param {Function|Object}  fn              - The function to execute, or a config object for the effect.
     * @param {Function}        [fn.fn]          - The function to execute for the effect (if the first argument is an object).
     * @param {String}          [fn.componentId] - The component id this effect belongs to.
     * @param {Boolean}         [fn.lazy=false]  - If true, the effect will not run immediately upon creation.
     * @param {Object|Object[]} [fn.subscriber]  - A single subscriber or an array of subscribers for the isRunning config.
     * @param {Object}          [options={}]     - Optional. Used if the first argument is a function, this object contains the options.
     * @example
     * // Signature 1: Function and Options
     * const myEffect = new Effect(() => console.log('Run'), {lazy: true});
     * @example
     * // Signature 2: Single Config Object
     * const myEffect = new Effect({fn: () => console.log('Run'), lazy: true});
     */
    constructor(fn, options={}) {
        const me = this;

        // This single statement handles both (fn, options) and ({...}) signatures
        // by normalizing them into a single object that we can destructure.
        const {
              fn: effectFn,
              componentId,
              lazy = false,
              subscriber
        } = (typeof fn === 'function') ? { ...options, fn } : (fn || {});

        if (componentId) {
            me.componentId = componentId
        }

        me.isRunning = new _Config_mjs__WEBPACK_IMPORTED_MODULE_0__["default"](false);

        // The subscriber(s) must be added *before* the first run is triggered.
        // This is critical for consumers like functional components, which need to process
        // the initial VDOM synchronously within the constructor lifecycle.
        if (subscriber) {
            // A concise way to handle both single and array subscribers.
            [].concat(subscriber).forEach(sub => me.isRunning.subscribe(sub))
        }

        // If lazy, just store the function without running it.
        // Otherwise, use the setter to trigger the initial run.
        if (lazy) {
            me._fn = effectFn
        } else {
            me.fn = effectFn
        }
    }

    /**
     * Cleans up all subscriptions and destroys the effect.
     */
    destroy() {
        const me = this;

        me.dependencies.forEach(cleanup => cleanup());
        me.dependencies.clear();
        me.isDestroyed = true
    }

    /**
     * Executes the effect function, tracking its dependencies.
     * This is called automatically on creation and whenever a dependency changes.
     * The dynamic re-tracking ensures the effect always reflects its current dependencies,
     * even if the logic within `fn` changes conditionally.
     * @protected
     */
    run() {
        const me = this;

        _EffectManager_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].pause(); // Pause dependency tracking for isRunning.get()
        if (me.isDestroyed || me.isRunning.get()) {
            _EffectManager_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].resume(); // Resume if we return early
            return
        }

        if (_EffectBatchManager_mjs__WEBPACK_IMPORTED_MODULE_2__["default"].isBatchActive()) {
            _EffectBatchManager_mjs__WEBPACK_IMPORTED_MODULE_2__["default"].queueEffect(me);
            return
        }

        me.isRunning.set(true);

        me.dependencies.forEach(cleanup => cleanup());
        me.dependencies.clear();

        _EffectManager_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].push(me);
        _EffectManager_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].resume();

        try {
            me.fn()
        } finally {
            _EffectManager_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].pop();
            _EffectManager_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].pause(); // Pause dependency tracking for isRunning.set(false)
            me.isRunning.set(false);
            _EffectManager_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].resume() // Resume after isRunning.set(false)
        }
    }

    /**
     * Adds a `Neo.core.Config` instance as a dependency for this effect.
     * @param {Neo.core.Config} config The config instance to subscribe to.
     * @protected
     */
    addDependency(config) {
        const me = this;

        // Only add if not already a dependency. Map uses strict equality (===) for object keys.
        if (!me.dependencies.has(config)) {
            const cleanup = config.subscribe({
                id: me.id,
                fn: me.run.bind(me)
            });

            me.dependencies.set(config, cleanup)
        }
    }
}

Neo.core ??= {};

if (!Neo.core.Effect) {
    Neo.core.Effect = Effect;

    /**
     * Factory shortcut to create a new Neo.core.Effect instance.
     * @function Neo.effect
     * @param {Function|Object} fn - The function to execute, or a config object for the effect.
     * @param {Object} [options] - Optional. Used if the first argument is a function.
     * @returns {Neo.core.Effect}
     */
    Neo.effect = (fn, options) => new Effect(fn, options)
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.core.Effect);


/***/ }),

/***/ "./src/functional/_export.mjs":
/*!************************************!*\
  !*** ./src/functional/_export.mjs ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Component: () => (/* reexport safe */ _component_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   defineComponent: () => (/* reexport safe */ _defineComponent_mjs__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   useConfig: () => (/* reexport safe */ _useConfig_mjs__WEBPACK_IMPORTED_MODULE_2__["default"]),
/* harmony export */   useEvent: () => (/* reexport safe */ _useEvent_mjs__WEBPACK_IMPORTED_MODULE_3__["default"])
/* harmony export */ });
/* harmony import */ var _component_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component/Base.mjs */ "./src/functional/component/Base.mjs");
/* harmony import */ var _defineComponent_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./defineComponent.mjs */ "./src/functional/defineComponent.mjs");
/* harmony import */ var _useConfig_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./useConfig.mjs */ "./src/functional/useConfig.mjs");
/* harmony import */ var _useEvent_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./useEvent.mjs */ "./src/functional/useEvent.mjs");








/***/ }),

/***/ "./src/functional/component/Base.mjs":
/*!*******************************************!*\
  !*** ./src/functional/component/Base.mjs ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/Base.mjs */ "./src/core/Base.mjs");
/* harmony import */ var _manager_Component_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../manager/Component.mjs */ "./src/manager/Component.mjs");
/* harmony import */ var _mixin_DomEvents_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../mixin/DomEvents.mjs */ "./src/mixin/DomEvents.mjs");
/* harmony import */ var _core_Effect_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/Effect.mjs */ "./src/core/Effect.mjs");
/* harmony import */ var _util_Array_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../util/Array.mjs */ "./src/util/Array.mjs");
/* harmony import */ var _core_Observable_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/Observable.mjs */ "./src/core/Observable.mjs");
/* harmony import */ var _mixin_VdomLifecycle_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../mixin/VdomLifecycle.mjs */ "./src/mixin/VdomLifecycle.mjs");








const
    activeDomListenersSymbol = Symbol.for('activeDomListeners'),
    hookIndexSymbol          = Symbol.for('hookIndex'),
    hooksSymbol              = Symbol.for('hooks'),
    pendingDomEventsSymbol   = Symbol.for('pendingDomEvents'),
    vdomToApplySymbol        = Symbol('vdomToApply');

/**
 * @class Neo.functional.component.Base
 * @extends Neo.core.Base
 * @mixes Neo.component.mixin.DomEvents
 * @mixes Neo.core.Observable
 * @mixes Neo.component.mixin.VdomLifecycle
 */
class FunctionalBase extends _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.functional.component.Base'
         * @protected
         */
        className: 'Neo.functional.component.Base',
        /**
         * @member {String} ntype='functional-component'
         * @protected
         */
        ntype: 'functional-component',
        /**
         * Custom CSS selectors to apply to the root level node of this component
         * @member {String[]} cls=null
         * @reactive
         */
        cls: null,
        /**
         * @member {Neo.core.Base[]} mixins=[DomEvents, Observable, VdomLifecycle]
         */
        mixins: [_mixin_DomEvents_mjs__WEBPACK_IMPORTED_MODULE_2__["default"], _core_Observable_mjs__WEBPACK_IMPORTED_MODULE_5__["default"], _mixin_VdomLifecycle_mjs__WEBPACK_IMPORTED_MODULE_6__["default"]],
        /**
         * True after the component render() method was called. Also fires the rendered event.
         * @member {Boolean} mounted_=false
         * @protected
         * @reactive
         */
        mounted_: false,
        /**
         * @member {String|null} parentId_=null
         * @protected
         * @reactive
         */
        parentId_: null,
        /**
         * The vdom markup for this component.
         * @member {Object} vdom={}
         */
        vdom: {},
        /**
         * The custom windowIs (timestamp) this component belongs to
         * @member {Number|null} windowId_=null
         * @reactive
         */
        windowId_: null
    }

    /**
     * Neo component instances, which got defined inside createVdom()
     * @member {Map|null} childComponents=null
     */
    childComponents = null
    /**
     * Internal flag which will get set to true while a component is waiting for its mountedPromise
     * @member {Boolean} isAwaitingMount=false
     * @protected
     */
    isAwaitingMount = false
    /**
     * Internal Map to store the next set of components after the createVdom() Effect has run.
     * @member {Map|null} nextChildComponents=null
     * @private
     */
    #nextChildComponents = null

    /**
     * A Promise that resolves when the component is mounted to the DOM.
     * This provides a convenient way to wait for the component to be fully
     * available and interactive before executing subsequent logic.
     *
     * It also handles unmounting by resetting the promise, so it can be safely
     * awaited again if the component is remounted.
     * @returns {Promise<Neo.component.Base>}
     */
    get mountedPromise() {
        let me = this;

        if (!me._mountedPromise) {
            me._mountedPromise = new Promise(resolve => {
                if (me.mounted) {
                    resolve(me);
                } else {
                    me.mountedPromiseResolve = resolve
                }
            })
        }

        return me._mountedPromise
    }

    /**
     * Convenience method to access the parent component
     * @returns {Neo.component.Base|null}
     */
    get parent() {
        let me = this;

        return me.parentComponent || (me.parentId === 'document.body' ? null : Neo.getComponent(me.parentId))
    }

    /**
     * @param {Object} config
     */
    construct(config) {
        super.construct(config);

        let me   = this,
            opts = {configurable: true, enumerable: false, writable: true};

        Object.defineProperties(me, {
            [activeDomListenersSymbol]: {...opts, value: []},
            [hookIndexSymbol]         : {...opts, value: 0},
            [hooksSymbol]             : {...opts, value: []},
            [pendingDomEventsSymbol]  : {...opts, value: []},
            [vdomToApplySymbol]       : {...opts, value: null}
        });

        // Creates a reactive effect that re-executes createVdom() when dependencies change.
        me.vdomEffect = new _core_Effect_mjs__WEBPACK_IMPORTED_MODULE_3__["default"]({
            fn: () => {
                me[hookIndexSymbol]        = 0;
                me[pendingDomEventsSymbol] = []; // Clear pending events for new render
                me[vdomToApplySymbol]      = me.createVdom(me, me.data)
            },
            componentId: me.id,
            subscriber : {
                id   : me.id,
                fn   : me.onEffectRunStateChange,
                scope: me
            }
        })
    }

    /**
     * Triggered after the id config got changed
     * @param {String|null} value
     * @param {String|null} oldValue
     * @protected
     */
    afterSetId(value, oldValue) {
        super.afterSetId(value, oldValue);

        oldValue && _manager_Component_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].unregister(oldValue);
        value    && _manager_Component_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].register(this)
    }

    /**
     * Triggered after the mounted config got changed
     * @param {Boolean} value
     * @param {Boolean} oldValue
     * @protected
     */
    afterSetMounted(value, oldValue) {
        if (oldValue !== undefined) {
            const me = this;

            if (value) { // mount
                me.initDomEvents();

                // Initial registration of DOM event listeners when component mounts
                me.applyPendingDomListeners();

                me.mountedPromiseResolve?.(this);
                delete me.mountedPromiseResolve
            } else { // unmount
                delete me._mountedPromise
            }
        }
    }

    /**
     * Triggered after the windowId config got changed
     * @param {Number|null} value
     * @param {Number|null} oldValue
     * @protected
     */
    afterSetWindowId(value, oldValue) {
        const me = this;

        if (value) {
            Neo.currentWorker.insertThemeFiles(value, me.__proto__)
        }

        me.childComponents?.forEach(childData => {
            childData.instance.windowId = value
        })

        // If a component gets moved into a different window, an update cycle might still be running.
        // Since the update might no longer get mapped, we want to re-enable this instance for future updates.
        if (oldValue) {
            me.isVdomUpdating = false
        }
    }

    /**
     * Applies the pending DOM event listeners and updates the active list.
     * @private
     */
    applyPendingDomListeners() {
        const
            me            = this,
            activeEvents  = me[activeDomListenersSymbol],
            pendingEvents = me[pendingDomEventsSymbol];

        if (pendingEvents.length > 0) {
            if (!Neo.isEqual(activeEvents, pendingEvents)) {
                if (activeEvents?.length > 0) {
                    // Remove old dynamic listeners
                    me.removeDomListeners(me[activeDomListenersSymbol])
                }

                me.addDomListeners([...pendingEvents]);

                me[activeDomListenersSymbol] = [...pendingEvents]
            }

            // Clear pending events for next `createVdom()` Effect run
            me[pendingDomEventsSymbol] = []
        }
    }

    /**
     * Override this method in your functional component to return its VDOM structure.
     * This method will be automatically re-executed when any of the component's configs change.
     * @param {Neo.functional.component.Base} config - Mental model: while it contains the instance, it makes it clear to access configs
     * @param {Object}                        data   - Convenience shortcut for accessing `state.Provider` data
     * @returns {Object} The VDOM structure for the component.
     */
    createVdom(config, data) {
        // This method should be overridden by subclasses
        return {}
    }

    /**
     *
     */
    destroy() {
        const me = this;

        me.vdomEffect?.destroy();

        // Destroy all classic components instantiated by this functional component
        me.childComponents?.forEach(childData => {
            childData.instance.destroy()
        });
        me.childComponents?.clear();

        me.removeDomEvents();

        // Remove any pending DOM event listeners that might not have been mounted
        me[pendingDomEventsSymbol] = null;

        _manager_Component_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].unregister(me);

        super.destroy()
    }

    /**
     * This method recursively compares the new VDOM config with the last applied config
     * for a given component instance and its sub-instances.
     * @param {Neo.core.Base} instance The component instance to update.
     * @param {Object} newConfig The new configuration object from the VDOM.
     * @param {Object} lastConfig The last applied configuration object.
     * @private
     */
    diffAndSet(instance, newConfig, lastConfig) {
        const deltaConfig = {};

        for (const key in newConfig) {
            const newValue = newConfig[key],
                  oldValue = lastConfig[key];

            if (!Neo.isEqual(newValue, oldValue)) {
                // If the config property is an object and it maps to a sub-component instance, recurse.
                if (Neo.typeOf(newValue) === 'Object' && Neo.typeOf(instance[key]) === 'NeoInstance') {
                    this.diffAndSet(instance[key], newValue, oldValue || {})
                } else {
                    // Otherwise, add it to the delta to be set on the current instance.
                    deltaConfig[key] = newValue
                }
            }
        }

        // Only call set() if there are actual changes for the current instance.
        if (Object.keys(deltaConfig).length > 0) {
            instance.set(deltaConfig)
        }
    }

    /**
     * This handler runs when the effect's `isRunning` state changes.
     * It runs outside the effect's tracking scope, preventing feedback loops.
     * @param {Boolean} value
     * @param {Boolean} oldValue
     */
    onEffectRunStateChange(value, oldValue) {
        // When the effect has just finished running...
        if (value === false) {
            const me      = this,
                  newVdom = me[vdomToApplySymbol];

            if (newVdom) {
                // Create a new map for components instantiated in this render cycle
                me.#nextChildComponents = new Map();

                // Process the newVdom to instantiate components
                // The parentId for these components will be the functional component's id
                const processedVdom = me.processVdomForComponents(newVdom, me.id);

                // Destroy components that are no longer present in the new VDOM
                if (me.childComponents?.size > 0) {
                    [...me.childComponents].forEach(([key, childData]) => {
                        if (!me.#nextChildComponents.has(key)) {
                            me.childComponents.delete(key);
                            childData.instance.destroy()
                        }
                    })
                }

                // If this component created other classic or functional components,
                // include their full vdom into the next update cycle.
                const oldKeys = me.childComponents ? new Set(me.childComponents.keys()) : new Set();
                let hasNewChildren = false;

                for (const newKey of me.#nextChildComponents.keys()) {
                    if (!oldKeys.has(newKey)) {
                        hasNewChildren = true;
                        break
                    }
                }

                if (hasNewChildren) {
                    // When new child components are created, we need to send their full VDOM
                    // to the vdom-worker, so they can get rendered.
                    // Subsequent updates will be granular via diffAndSet() => set() on the child.
                    me.updateDepth = -1;
                }

                // Update the main map of instantiated components
                me.childComponents = me.#nextChildComponents;

                // Clear the old vdom properties
                for (const key in me.vdom) {
                    delete me.vdom[key]
                }

                // Assign the new properties
                Object.assign(me.vdom, processedVdom); // Use processedVdom here

                me[vdomToApplySymbol] = null;

                const root = me.getVdomRoot();

                if (me.cls) {
                    root.cls = _util_Array_mjs__WEBPACK_IMPORTED_MODULE_4__["default"].union(me.cls, root.cls)
                }

                if (me.id) {
                    root.id = me.id
                }

                me.updateVdom();

                // Update DOM event listeners based on the new render
                if (me.mounted) {
                    me.applyPendingDomListeners()
                }
            }
        }
    }

    /**
     * Recursively processes a VDOM node to instantiate components defined within it.
     * @param {Object} vdomTree The VDOM node to process.
     * @param {String} parentId The ID of the parent component (the functional component hosting it).
     * @param {Number} [parentIndex] The index of the vdomNode within its parent's children.
     * @returns {Object} The processed VDOM node, potentially replaced with a component reference.
     * @private
     */
    processVdomForComponents(vdomTree, parentId, parentIndex) {
        if (!vdomTree) {
            return vdomTree
        }

        // If it's already a component reference, no need to process further
        if (vdomTree.componentId) {
            return vdomTree
        }

        const me = this;

        // Check if it's a component definition (functional or classic)
        if (vdomTree.className || vdomTree.module || vdomTree.ntype) {
            // Components are reconciled based on their `id` property in the VDOM definition.
            // If no `id` is provided, a new instance will be created on every render.
            const componentKey = vdomTree.id;

            if (!componentKey) {
                console.error([
                    'Component definition in functional component VDOM is missing an "id". For stable reconciliation, ',
                    'especially in dynamic lists, provide a unique "id" property.'
                    ].join(''),
                    vdomTree
                )
            }

            let childData = me.childComponents?.get(componentKey),
                newConfig = {...vdomTree}, // Shallow copy
                instance;

            delete newConfig.className;
            delete newConfig.id;
            delete newConfig.module;
            delete newConfig.ntype;

            if (!childData) {
                me.childComponents ??= new Map();

                // Instantiate the component
                instance = Neo[(vdomTree.className || vdomTree.module) ? 'create' : 'ntype']({
                    ...vdomTree,
                    parentId,
                    parentIndex,
                    windowId: me.windowId
                });
            } else {
                instance = childData.instance;

                // Recursively diff and set configs
                this.diffAndSet(instance, newConfig, childData.lastConfig);
            }

            // Add to the new map for tracking in this render cycle
            me.#nextChildComponents.set(componentKey, {
                instance,
                lastConfig: newConfig
            });

            // Replace the definition with a reference using the component's own method
            return instance.createVdomReference();
        }

        // Recursively process children
        if (vdomTree.cn && Array.isArray(vdomTree.cn)) {
            vdomTree.cn = vdomTree.cn.map((child, index) =>
                me.processVdomForComponents(child, parentId, index)
            )
        }

        return vdomTree
    }

    /**
     * Change multiple configs at once, ensuring that all afterSet methods get all new assigned values
     * @param {Object} values={}
     * @param {Boolean} silent=false
     * @returns {Promise<*>}
     */
    set(values={}, silent=false) {
        let me = this;

        me.silentVdomUpdate = true;

        super.set(values);

        me.silentVdomUpdate = false;

        if (silent || !me.needsVdomUpdate) {
            return Promise.resolve()
        }

        return me.promiseUpdate()
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(FunctionalBase));


/***/ }),

/***/ "./src/functional/defineComponent.mjs":
/*!********************************************!*\
  !*** ./src/functional/defineComponent.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   defineComponent: () => (/* binding */ defineComponent)
/* harmony export */ });
/* harmony import */ var _component_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component/Base.mjs */ "./src/functional/component/Base.mjs");


/**
 * Factory function to create a functional component class from a specification object.
 * This enables a "Beginner Mode" for creating components without writing a class,
 * while still providing access to the full class-based feature set.
 *
 * It's important to understand the two ways of managing state:
 *
 * 1.  **Named Configs (Public API):** Defined in the `config` object (e.g., `text_`).
 *     - **Purpose:** Defines the component's public API for external control, similar to props.
 *     - **Use Case:** For data that a parent component will set or change.
 *     - **Features:** Integrates with the full config system (e.g., `afterSetText()` hooks).
 *
 * 2.  **`useConfig()` (Internal State):** Used inside `createVdom` or other methods.
 *     - **Purpose:** Manages private, encapsulated state that is internal to the component.
 *     - **Use Case:** For state that the component manages itself and is not controlled by the parent.
 *     - **Features:** Provides a simple, concise way to handle local reactive state.
 *
 * @param {Object} spec - The specification object for the component.
 * @returns {Neo.functional.component.Base} The generated component class.
 *
 * @example
 * import { defineComponent } from 'neo/functional/defineComponent.mjs';
 * import { useConfig }       from 'neo/functional/useConfig.mjs';
 *
 * const MyComponent = defineComponent({
 *     // 1. Define the Public API via the `config` object.
 *     config: {
 *         className: 'MyApp.MyFunctionalComponent',
 *         ntype    : 'my-functional-component',
 *
 *         // `text_` is a NAMED CONFIG. It's part of the component's public API.
 *         // A parent can create this component with a `text` config.
 *         // It is reactive and will generate `afterSetText()` and `beforeSetText()` hooks.
 *         text_: 'Hello World'
 *     },
 *
 *     // 2. Define the component's logic and VDOM.
 *     createVdom(config) {
 *         // `useConfig` creates ANONYMOUS, INTERNAL STATE.
 *         // The `count` state is private to this component and cannot be set by a parent.
 *         const [count, setCount] = useConfig(0);
 *
 *         return {
 *             tag: 'div',
 *             cn: [{
 *                 tag: 'h1',
 *                 // Access the public, named config via the `config` parameter.
 *                 text: config.text
 *             }, {
 *                 tag: 'p',
 *                 // Access the private, internal state directly.
 *                 text: `You clicked ${count} times`
 *             }, {
 *                 tag: 'button',
 *                 text: 'Click me',
 *                 // The setter from `useConfig` updates the internal state.
 *                 onclick: () => setCount(count + 1)
 *             }]
 *         };
 *     },
 *
 *     // 3. Lifecycle hooks for named configs work automatically.
 *     afterSetText(newValue, oldValue) {
 *         console.log(`Text changed from '${oldValue}' to '${newValue}'`);
 *     }
 * });
 *
 * // The returned MyComponent is a class constructor that can be used with Neo.create()
 * // const instance = Neo.create(MyComponent, {
 * //     text: 'Welcome to Neo.mjs!' // Set the public config on creation.
 * // });
 */
function defineComponent(spec) {
    const configSpec = spec.config;
    delete spec.config;

    if (!configSpec?.className) {
        throw new Error('defineComponent requires a config object with a className.');
    }

    class FunctionalComponent extends _component_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
        static config = {
            ...configSpec
            // We can add our own configurations here
        }
    }

    // Assign instance methods
    Object.entries(spec).forEach(([key, value]) => {
        FunctionalComponent.prototype[key] = value
    });

    // To support multiple envs (like `devmode`, `dist/esm`, `dist/production` in parallel,
    // we must re-assign FunctionalComponent to the setupClass() output.
    FunctionalComponent = Neo.setupClass(FunctionalComponent);

    return FunctionalComponent
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (defineComponent);


/***/ }),

/***/ "./src/functional/useConfig.mjs":
/*!**************************************!*\
  !*** ./src/functional/useConfig.mjs ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   useConfig: () => (/* binding */ useConfig)
/* harmony export */ });
/* harmony import */ var _core_Config_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/Config.mjs */ "./src/core/Config.mjs");
/* harmony import */ var _core_EffectManager_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/EffectManager.mjs */ "./src/core/EffectManager.mjs");



const
    hookIndexSymbol = Symbol.for('hookIndex'),
    hooksSymbol     = Symbol.for('hooks');

/**
 * A hook for managing reactive state within a functional component's `createVdom` method.
 * It mirrors the behavior of React's `useState` but is powered by `Neo.core.Config` for reactivity.
 * @param {*} initialValue The initial value for the state.
 * @returns {Array<any>} A tuple containing the current value and a setter function.
 */
function useConfig(initialValue) {
    _core_EffectManager_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].pause();

    const
        effect    = _core_EffectManager_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].getActiveEffect(),
        component = effect && Neo.getComponent(effect.componentId);

    if (!component) {
        throw new Error('useConfig must be called from within a functional component\'s createVdom method.')
    }

    const currentIndex = component[hookIndexSymbol];

    // Increment the index for the next hook call within the same component render cycle.
    component[hookIndexSymbol]++;

    // If this is the first time this hook is being called for this component, initialize its state.
    if (!component[hooksSymbol][currentIndex]) {
        const config = new _core_Config_mjs__WEBPACK_IMPORTED_MODULE_0__["default"](initialValue);

        const customSetter = (newValue) => {
            if (typeof newValue === 'function') {
                newValue = newValue(config.get())
            }
            config.set(newValue)
        };

        component[hooksSymbol][currentIndex] = [config, customSetter]
    }

    const [config, setter] = component[hooksSymbol][currentIndex];

    _core_EffectManager_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].resume();

    // Call config.get() to ensure this component's effect tracks this config as a dependency.
    return [config.get(), setter]
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useConfig);


/***/ }),

/***/ "./src/functional/useEvent.mjs":
/*!*************************************!*\
  !*** ./src/functional/useEvent.mjs ***!
  \*************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   useEvent: () => (/* binding */ useEvent)
/* harmony export */ });
/* harmony import */ var _core_EffectManager_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/EffectManager.mjs */ "./src/core/EffectManager.mjs");


const pendingDomEventsSymbol = Symbol.for('pendingDomEvents');

/**
 * A hook for registering DOM event listeners within a functional component.
 * Event listeners registered via this hook will be managed by Neo.mjs's
 * delegated DOM event system, ensuring efficient and proper lifecycle handling.
 *
 * @param {String} eventType - The type of DOM event to listen for (e.g., 'click', 'input').
 * @param {Function} handler - The event handler function. It will receive the event data as its argument.
 * @param {String} [delegate] - An optional CSS selector for event delegation. If provided,
 *                               the handler will only fire if the event target matches this selector.
 */
function useEvent(eventType, handler, delegate) {
    const
        activeEffect = _core_EffectManager_mjs__WEBPACK_IMPORTED_MODULE_0__["default"].getActiveEffect(),
        componentId  = activeEffect?.componentId;

    if (!componentId) {
        throw new Error('useEvent must be called from within a functional component\'s createVdom method.')
    }

    _core_EffectManager_mjs__WEBPACK_IMPORTED_MODULE_0__["default"].pause();
    const component = Neo.getComponent(componentId);
    _core_EffectManager_mjs__WEBPACK_IMPORTED_MODULE_0__["default"].resume();

    if (!component) {
        throw new Error(`Component with id ${componentId} not found for useEvent hook.`);
    }

    // Ensure pendingDomEventsSymbol exists on the component instance
    component[pendingDomEventsSymbol] ??= [];

    // Add the event listener configuration to the component's pending list
    component[pendingDomEventsSymbol].push({
        [eventType]: handler,
        delegate,
        scope      : component // The component instance itself will be the scope
    })
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useEvent);


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,