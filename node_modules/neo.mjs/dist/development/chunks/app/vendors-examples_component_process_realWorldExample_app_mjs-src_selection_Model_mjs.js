"use strict";
(self["webpackChunkneo_mjs"] = self["webpackChunkneo_mjs"] || []).push([["vendors-examples_component_process_realWorldExample_app_mjs-src_selection_Model_mjs"],{

/***/ "./examples/component/process/realWorldExample/MainContainer.mjs":
/*!***********************************************************************!*\
  !*** ./examples/component/process/realWorldExample/MainContainer.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _src_button_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../src/button/Base.mjs */ "./src/button/Base.mjs");
/* harmony import */ var _src_form_field_CheckBox_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../src/form/field/CheckBox.mjs */ "./src/form/field/CheckBox.mjs");
/* harmony import */ var _ConfigurationViewport_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../ConfigurationViewport.mjs */ "./examples/ConfigurationViewport.mjs");
/* harmony import */ var _src_form_field_ComboBox_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../src/form/field/ComboBox.mjs */ "./src/form/field/ComboBox.mjs");
/* harmony import */ var _src_component_Base_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../src/component/Base.mjs */ "./src/component/Base.mjs");
/* harmony import */ var _src_container_Base_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../src/container/Base.mjs */ "./src/container/Base.mjs");
/* harmony import */ var _src_form_field_Display_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../src/form/field/Display.mjs */ "./src/form/field/Display.mjs");
/* harmony import */ var _src_form_Container_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../src/form/Container.mjs */ "./src/form/Container.mjs");
/* harmony import */ var _src_form_field_Number_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../src/form/field/Number.mjs */ "./src/form/field/Number.mjs");
/* harmony import */ var _src_component_Process_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../src/component/Process.mjs */ "./src/component/Process.mjs");
/* harmony import */ var _src_form_field_Range_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../src/form/field/Range.mjs */ "./src/form/field/Range.mjs");
/* harmony import */ var _src_form_field_Text_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../src/form/field/Text.mjs */ "./src/form/field/Text.mjs");
/* harmony import */ var _src_component_Toast_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../src/component/Toast.mjs */ "./src/component/Toast.mjs");














/**
 * @class Neo.examples.component.process.realWorldExample.MainContainer
 * @extends Neo.examples.ConfigurationViewport
 */
class MainContainer extends _ConfigurationViewport_mjs__WEBPACK_IMPORTED_MODULE_2__["default"] {
    static config = {
        className           : 'Neo.examples.component.process.realWorldExample.MainContainer',
        configItemLabelWidth: 110,
        configItemWidth     : 250,
        configPanelMinWidth : 250,
        configPanelFlex     : 'none',
        layout              : {ntype: 'hbox', align: 'stretch'}
    }

    createConfigurationComponents() {
        let me = this;

        return [{
            module   : _src_form_field_CheckBox_mjs__WEBPACK_IMPORTED_MODULE_1__["default"],
            checked  : false,
            value    : 5,
            labelText: 'horizontal',
            listeners: {change: me.onConfigChange.bind(me, 'horizontal')}
        }, {
            module   : _src_form_field_Text_mjs__WEBPACK_IMPORTED_MODULE_11__["default"],
            labelText: 'arrowColor',
            listeners: {change: me.onConfigChange.bind(me, 'arrowColor')}
        }, {
            module   : _src_form_field_Text_mjs__WEBPACK_IMPORTED_MODULE_11__["default"],
            labelText: 'iconColor',
            listeners: {change: me.onConfigChange.bind(me, 'iconColor')}
        }]
    }

    createExampleComponent() {
        const me            = this,
              onRangeChange = me.onRangeChange.bind(me),
              // Wetterdaten von Berlin Tiergarten
              weatherUrl    = 'https://api.open-meteo.com/v1/forecast?latitude=52.51239766781255&longitude=13.35733940978727&current_weather=true';

        let weather = fetch(weatherUrl).then(async (response) => {
            let result        = await response.json(),
                temperature   = Math.ceil(result.current_weather.temperature),
                temperatureEl = me.down({flag: 'temperature'})

            temperatureEl.value = temperature
        });

        return Neo.create({
            module      : _src_container_Base_mjs__WEBPACK_IMPORTED_MODULE_5__["default"],
            maxWidth    : 450,
            maxHeight   : '100%',
            style       : {
                overflowY: 'auto',
                margin   : '0 auto'
            },
            itemDefaults: {
                horizontal: false
            },
            items       : [{
                module: _src_component_Base_mjs__WEBPACK_IMPORTED_MODULE_4__["default"],
                vdom  : {
                    cn: [
                        {tag: 'img', src: './RangeHeader.jpg', width: '100%'}
                    ]
                }
            }, {
                module: _src_component_Process_mjs__WEBPACK_IMPORTED_MODULE_9__["default"],
                flag  : 'start-process',
                items : [{
                    iconCls: 'fa fa-plane-departure',
                    title  : 'Start Eingabe',
                    text   : 'Batterie % und Kilometerstand'
                }]
            }, {
                module   : _src_form_Container_mjs__WEBPACK_IMPORTED_MODULE_7__["default"],
                hasFields: true,
                layout   : {ntype: 'vbox', align: 'stretch'},
                items    : [{
                    module   : _src_form_field_Number_mjs__WEBPACK_IMPORTED_MODULE_8__["default"],
                    flag     : 'max-capacity',
                    labelText: 'max. Kapazit√§t kWh',
                    minValue : 1,
                    maxValue : 500,
                    value    : 29
                }, {
                    module           : _src_form_field_Range_mjs__WEBPACK_IMPORTED_MODULE_10__["default"],
                    flag             : 'start-battery',
                    labelText        : 'Batterie %',
                    showResultInLabel: true,
                    minValue         : 1,
                    maxValue         : 100,
                    value            : 100,
                    listeners        : {change: onRangeChange}
                }, {
                    module   : _src_form_field_Number_mjs__WEBPACK_IMPORTED_MODULE_8__["default"],
                    flag     : 'start-km',
                    labelText: 'Kilometerstand',
                    minValue : 0,
                    maxValue : 500000
                }],
                listeners: {fieldFocusLeave: onRangeChange}
            }, {
                module: _src_component_Process_mjs__WEBPACK_IMPORTED_MODULE_9__["default"],
                flag  : 'end-process',
                items : [{
                    iconCls: 'fa fa-plane-arrival',
                    title  : 'Ankunft Eingabe',
                    text   : 'Batterie % und Kilometerstand'
                }]
            }, {
                module   : _src_form_Container_mjs__WEBPACK_IMPORTED_MODULE_7__["default"],
                hasFields: true,
                layout   : {ntype: 'vbox', align: 'stretch'},
                items    : [{
                    module           : _src_form_field_Range_mjs__WEBPACK_IMPORTED_MODULE_10__["default"],
                    flag             : 'end-battery',
                    labelText        : 'Batterie %',
                    showResultInLabel: true,
                    minValue         : 0,
                    maxValue         : 99,
                    value            : 0,
                    listeners        : {change: onRangeChange}
                }, {
                    module   : _src_form_field_Number_mjs__WEBPACK_IMPORTED_MODULE_8__["default"],
                    flag     : 'end-km',
                    labelText: 'Kilometerstand',
                    minValue : 0,
                    maxValue : 500000,
                }],
                listeners: {fieldFocusLeave: onRangeChange}
            }, {
                module    : _src_component_Process_mjs__WEBPACK_IMPORTED_MODULE_9__["default"],
                flag      : 'result-process',
                arrowColor: 'rgb(200 155 12)',
                items     : [{
                    iconCls: 'fa fa-square-poll-vertical',
                    title  : 'Ergebnisse',
                    text   : 'Errechnete Ergebnisse'
                }]
            }, {
                module   : _src_form_Container_mjs__WEBPACK_IMPORTED_MODULE_7__["default"],
                hasFields: true,
                layout   : {ntype: 'vbox', align: 'stretch'},
                listeners: {fieldChange: onRangeChange},
                items    : [{
                    module   : _src_form_field_Display_mjs__WEBPACK_IMPORTED_MODULE_6__["default"],
                    flag     : 'result',
                    labelText: 'Rest Kilometer'
                }, {
                    module   : _src_form_field_Display_mjs__WEBPACK_IMPORTED_MODULE_6__["default"],
                    flag     : 'remain-kWh',
                    labelText: 'Rest kWh'
                }, {
                    module   : _src_form_field_Display_mjs__WEBPACK_IMPORTED_MODULE_6__["default"],
                    flag     : 'average-kWh',
                    labelText: 'kwH pro 100km'
                }]
            }, {
                module    : _src_component_Process_mjs__WEBPACK_IMPORTED_MODULE_9__["default"],
                arrowColor: 'rgb(200 155 12)',
                items     : [{
                    iconCls: 'fa fa-magnifying-glass-chart',
                    title  : 'Zus√§tzliche Angaben',
                    text   : 'F√ºr die Langzeitauswertung'
                }]
            }, {
                module      : _src_form_Container_mjs__WEBPACK_IMPORTED_MODULE_7__["default"],
                flag        : 'additional-information',
                disabled    : true,
                layout      : {ntype: 'vbox', align: 'stretch'},
                itemDefaults: {
                    showResultInLabel: true,
                    value            : 20
                },
                items       : [{
                    module      : _src_form_field_ComboBox_mjs__WEBPACK_IMPORTED_MODULE_3__["default"],
                    displayField: 'name',
                    labelText   : 'Fahrstil',
                    value       : 'normal',

                    store: {
                        data : [
                            {style: 'sportStyle',  name: 'sport',  code: 'sportCode'},
                            {style: 'normalStyle', name: 'normal', code: 'normalCode'},
                            {style: 'ecoStyle',    name: 'eco',    code: 'ecoCode'},
                        ],
                        model: {
                            fields: [
                                {name: 'style', type: 'String'},
                                {name: 'name',  type: 'String'},
                                {name: 'code',  type: 'String'}
                            ]
                        }
                    }
                }, {
                    module   : _src_form_field_Range_mjs__WEBPACK_IMPORTED_MODULE_10__["default"],
                    flag     : 'highway',
                    labelText: 'Autobahn %',
                    minValue : 0,
                    maxValue : 100,
                }, {
                    module   : _src_form_field_Range_mjs__WEBPACK_IMPORTED_MODULE_10__["default"],
                    flag     : 'temperature',
                    labelText: 'Au√üen-Temp.',
                    minValue : -20,
                    maxValue : 50
                }, {
                    module : _src_button_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"],
                    text   : 'Speichern und Auswerten',
                    ui     : 'secondary',
                    style  : {
                        minHeight   : '50px',
                        marginBottom: '35px'
                    },
                    handler: me.onSaveClick.bind(me)
                }],
                listeners   : {fieldChange: onRangeChange}
            }]
        })
    }

    /**
     * @param {String} config
     * @param {Object} opts
     */
    onConfigChange(config, opts) {
        const processes = Neo.find({ntype: 'process'});

        processes.forEach(process => {
            process[config] = opts.value
        })
    }

    /**
     * @param {Object} data
     */
    onRangeChange(data) {
        const me                      = this,
              startBattery            = me.down({flag: 'start-battery'}).value,
              endBatteryEl            = me.down({flag: 'end-battery'}),
              endBattery              = endBatteryEl.value,
              startKm                 = me.down({flag: 'start-km'}).value,
              endKmEl                 = me.down({flag: 'end-km'}),
              endKm                   = endKmEl.value,
              additionalInformationEl = me.down({flag: 'additional-information'});

        if (startKm) {
            const startProcess = this.down({flag: 'start-process'});

            startProcess.arrowColor = '#12FE88'
        }

        if (endKm) {
            const startProcess = this.down({flag: 'end-process'});

            startProcess.arrowColor = '#12FE88'
        }

        if ((startKm && !endKm) || endKm <= startKm) {
            endKmEl.value = startKm + 5
        }

        if (endBattery >= startBattery) {
            endBatteryEl.value = startBattery - 1
        }

        if (startKm && endKm) {
            const resultEl      = me.down({flag: 'result'}),
                  kwpMaxEl      = me.down({flag: 'max-capacity'}),
                  remainKwhEl   = me.down({flag: 'remain-kWh'}),
                  averageKwhEl  = me.down({flag: 'average-kWh'}),
                  maxCapacityEl = me.down({flag: 'max-capacity'}),
                  batteryDiff   = startBattery - endBattery,
                  kmDiff        = endKm - startKm,
                  kWhUsed       = maxCapacityEl.value * (batteryDiff / 100),
                  resultKm      = (endBattery) * kmDiff / batteryDiff;

            additionalInformationEl.disabled = false;
            resultEl.value = Math.ceil(resultKm);
            remainKwhEl.value = Math.ceil(kwpMaxEl.value * (endBattery / 100));
            averageKwhEl.value = Math.ceil(100 * (kWhUsed / kmDiff))
        } else {
            additionalInformationEl.disabled = true
        }
    }

    /**
     * Shows a toast
     */
    onSaveClick() {
        const averageKwh = this.down({flag: 'average-kWh'}).value;
        let msg     = `Du hast einen durchschnittlichen Verbrauch von ${averageKwh} kwh/100km.`,
            iconCls = 'fa fa-user-tie',
            title   = 'results',
            ui;

        if (averageKwh > 25) {
            msg = `Du bist seeehr sportlich unterwegs mit ${averageKwh} kWh auf 100km`;
            iconCls = 'fa fa-flag-checkered';
            ui = 'danger';
            title = 'racing'
        } else if (averageKwh < 15) {
            msg = `Du bist sehr umweltbewusst gefahren und hast nur ${averageKwh} kwh/100km verbraucht.`;
            iconCls = 'fa-brands fa-pagelines';
            ui = 'success';
            title = 'ECO'
        }

        Neo.toast({
            appName: this.appName,
            ui     : ui,
            iconCls: iconCls,
            title  : title,
            msg    : msg
        })
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(MainContainer));


/***/ }),

/***/ "./examples/component/process/realWorldExample/app.mjs":
/*!*************************************************************!*\
  !*** ./examples/component/process/realWorldExample/app.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   onStart: () => (/* binding */ onStart)
/* harmony export */ });
/* harmony import */ var _MainContainer_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MainContainer.mjs */ "./examples/component/process/realWorldExample/MainContainer.mjs");


const onStart = () => Neo.app({
    mainView: _MainContainer_mjs__WEBPACK_IMPORTED_MODULE_0__["default"],
    name    : 'Neo.examples.component.realWorldExample.process'
});

/***/ }),

/***/ "./src/component/Process.mjs":
/*!***********************************!*\
  !*** ./src/component/Process.mjs ***!
  \***********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Base.mjs */ "./src/component/Base.mjs");
/* harmony import */ var _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/Array.mjs */ "./src/util/Array.mjs");



/**
 * @class Neo.component.Process
 * @extends Neo.component.Base
 *
 * @example
 *     {
 *         module: Process,
 *         arrowColor: 'darkred',
 *         items: [{
 *             iconCls: 'fa fa-car',
 *             header: '1. Wunschkennzeichen',
 *             text: 'Lorem ipsum dolor sit amet, consectetuer adipiscing elit...'
 *         }, {
 *             iconCls: 'fa fa-house',
 *             header: '2. Termine',
 *             text: 'Lorem ipsum dolor sit amet, consectetuer adipiscing elit...'
 *         }]
 *     }
 */
class Process extends _Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.component.Process'
         * @protected
         */
        className: 'Neo.component.Process',
        /**
         * @member {String} ntype='process'
         * @protected
         */
        ntype: 'process',
        /**
         * @member {String[]} baseCls=['neo-process']
         */
        baseCls: ['neo-process'],

        /**
         * Set the color of the process arrow.
         * Out of the box this is #ffdb4a
         *
         * @member {String|null} arrowColor=null
         */
        arrowColor_: null,
        /**
         * 'true' shows the items from left to right
         * 'false' shows the items from top to bottom
         * There is a minimum width of 700px to show items 'true'
         *
         * @member {Boolean} horizontal=true
         */
        horizontal_: true,
        /**
         * Set the color of the icons.
         * Out of the box this is #ffdb4a
         *
         * @member {String|null} iconColor=null
         */
        iconColor_: null,

        /**
         * Each item will be transferred into the itemLayout
         *
         * @member {Object[]|Object} items=null
         *
         * @example
         *     items: [{
         *         iconCls: 'fa fa-car',
         *         header: '1. First Step',
         *         text: 'Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Maecenas porttitor congue massa. Fusce posuere, magna sed pulvinar ultricies, purus lectus malesuada libero, sit amet commodo magna eros quis urna.'
         *     }, {
         *         iconCls: 'fa fa-house',
         *         header: '2. Second Step',
         *         text: 'Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Maecenas porttitor congue massa. Fusce posuere, magna sed pulvinar ultricies, purus lectus malesuada libero, sit amet commodo magna eros quis urna.'
         *     }]
         */
        items_: null,

        /**
         * vdom definition is used during item creation
         * Do not remove
         *
         * @member {Object} vdom={cn:[]}
         */
        vdom: {cn: []}
    }

    /**
     * Each item gets an arrow and the content, which gets filled with an item.
     * The slit allows to fade out the sidebar.
     *
     * @member {Object} itemLayout={cls: 'process-step', cn: [{cls: ['arrow', 'white']},{cls: ['slit']},{cls: ['arrow', 'yellow']},{cls: 'process-content', cn: [{cls: ['process-step-icon']},{tag: 'h2', cls: ['process-step-header']},{cls: ['process-step-text']}]}]}
     */
    itemLayout = {
        cls: 'process-step', cn: [
            {cls: ['arrow', 'white']},
            {cls: ['slit']},
            {cls: ['arrow', 'yellow']},
            {
                cls: 'process-content', cn: [
                    {cls: ['process-step-icon']},
                    {tag: 'h2', cls: ['process-step-header']},
                    {cls: ['process-step-text']}
                ]
            }
        ]
    }

    /**
     * Triggered after arrowColor config got changed
     * @param {String} newValue
     * @protected
     */
    afterSetArrowColor(newValue) {
        if (newValue !== null) {
            let style = this.style;

            style['--process-arrow-color'] = newValue + '!important';
            this.style = style
        }
    }

    /**
     * Triggered after horizontal config got changed
     * @param {Boolean} isHorizontal
     * @protected
     */
    afterSetHorizontal(isHorizontal) {
        let {cls}       = this,
            positionCls = isHorizontal ? 'neo-process-horizontal' : 'neo-process-vertical',
            removeCls   = !isHorizontal ? 'neo-process-horizontal' : 'neo-process-vertical';

        _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].add(cls, positionCls);
        _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].remove(cls, removeCls);

        this.cls = cls
    }

    /**
     * Triggered after iconColor config got changed
     * @param {String} newValue
     * @protected
     */
    afterSetIconColor(newValue) {
        if (newValue !== null) {
            let {style} = this;

            style['--process-icon-color'] = newValue + '!important';

            this.style = style
        }
    }

    /**
     * Triggered after items config got changed
     * @param {Object[]} items
     * @protected
     */
    afterSetItems(items) {
        if (!(Neo.isArray(items) || Neo.isObject(items))) return;
        if (!Neo.isArray(items)) {
            items = [items];
        }

        let vdomRoot   = this.vdom,
            itemLayout = this.itemLayout,
            curItem, content;

        items.forEach((newItem) => {
            curItem = Neo.clone(itemLayout, true),
            content = curItem.cn[3];

            content.cn[0].cls.push(newItem.iconCls);
            content.cn[1].innerHTML = newItem.title;
            content.cn[2].innerHTML = newItem.text;

            _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].add(vdomRoot.cn, curItem)
        })
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(Process));


/***/ }),

/***/ "./src/form/field/Display.mjs":
/*!************************************!*\
  !*** ./src/form/field/Display.mjs ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Text_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Text.mjs */ "./src/form/field/Text.mjs");


/**
 * An extended form.field.Text, which is read-only.
 * @class Neo.form.field.Display
 * @extends Neo.form.field.Text
 */
class Display extends _Text_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.form.field.Display'
         * @protected
         */
        className: 'Neo.form.field.Display',
        /**
         * @member {String} ntype='displayfield'
         * @protected
         */
        ntype: 'displayfield',
        /**
         * @member {String[]} baseCls=['neo-displayfield','neo-textfield']
         */
        baseCls: ['neo-displayfield', 'neo-textfield'],
        /**
         * @member {Boolean} clearable=false
         * @protected
         */
        clearable: false
    }

    /**
     * @param {Object} config
     */
    construct(config) {
        super.construct(config);

        let me      = this,
            inputEl = me.getInputEl();

        inputEl.readonly = 'readonly';
        inputEl.tabindex = '-1';

        me.update()
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(Display));


/***/ }),

/***/ "./src/form/field/Range.mjs":
/*!**********************************!*\
  !*** ./src/form/field/Range.mjs ***!
  \**********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Number_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Number.mjs */ "./src/form/field/Number.mjs");


/**
 * @class Neo.form.field.Range
 * @extends Neo.form.field.Number
 */
class Range extends _Number_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    /**
     * Removing the debounce for range fields
     * @member {Object} delayable
     * @protected
     * @static
     */
    static delayable = {}

    static config = {
        /**
         * @member {String} className='Neo.form.field.Range'
         * @protected
         */
        className: 'Neo.form.field.Range',
        /**
         * @member {String} ntype='rangefield'
         * @protected
         */
        ntype: 'rangefield',
        /**
         * @member {String[]} baseCls=['neo-rangefield','neo-textfield']
         */
        baseCls: ['neo-rangefield', 'neo-textfield'],
        /**
         * True shows a clear trigger in case the field has a non empty value.
         * @member {Boolean} clearable=false
         */
        clearable: false,
        /**
         * Value for the inputType_ textfield config
         * @member {String} inputType='range'
         */
        inputType: 'range',
        /**
         * If true, shows the result of the slider in the label
         * @member {Boolean} showResultInLabel=false
         */
        showResultInLabel: false,
        /**
         * @member {Array} tickmarks_=[]
         */
        tickmarks_: [],
        /**
         * @member {Boolean} useInputEvent=false
         */
        useInputEvent: false,
        /**
         * Disables the field.Number buttons
         * @member {Boolean} useInputEvent=false
         */
        useSpinButtons: false
    }

    /**
     * @param {Object} config
     */
    construct(config) {
        super.construct(config);

        let me      = this,
            inputEl = me.vdom.cn[2];

        if (me.useInputEvent) {
            me.addDomListeners({
                input: {
                    fn   : me.onInputValueChange,
                    id   : me.vdom.cn[2].id,
                    scope: me
                }
            });
        }

        inputEl.cls = ['neo-rangefield-input']; // replace neo-textfield-input

        me.addValueToLabel()
    }

    /**
     * Triggered after the tickmarks config got changed
     * @param {Array} value
     * @param {Array} oldValue
     * @protected
     */
    afterSetTickmarks(value, oldValue) {
        // todo
    }

    /**
     * Triggered after the value config got changed
     * @param {Number} value
     * @param {Number} oldValue
     */
    afterSetValue(value, oldValue) {
        this.addValueToLabel();
        super.afterSetValue(value, oldValue)
    }

    /**
     * Update label with value
     */
    addValueToLabel() {
        let me = this;

        if (me.showResultInLabel) {
            me.getLabelEl().innerHTML = `[${me.value}] ` + me.labelText
        }
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(Range));


/***/ }),

/***/ "./src/selection/Model.mjs":
/*!*********************************!*\
  !*** ./src/selection/Model.mjs ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/Base.mjs */ "./src/core/Base.mjs");
/* harmony import */ var _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/Array.mjs */ "./src/util/Array.mjs");
/* harmony import */ var _core_Observable_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/Observable.mjs */ "./src/core/Observable.mjs");




/**
 * @class Neo.selection.Model
 * @extends Neo.core.Base
 */
class Model extends _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    /**
     * True automatically applies the core.Observable mixin
     * @member {Boolean} observable=true
     * @static
     */
    static observable = true

    static config = {
        /**
         * @member {String} className='Neo.selection.Model'
         * @protected
         */
        className: 'Neo.selection.Model',
        /**
         * @member {String} ntype='selection-model'
         * @protected
         */
        ntype: 'selection-model',
        /**
         * Placeholder for extended classes to add a custom css rule to this owner component
         * @member {String|null} cls=null
         * @protected
         */
        cls: null,
        /**
         * @member {Array} items_=null
         * @protected
         */
        items_: null,
        /**
         * @member {String} selectedCls='selected'
         */
        selectedCls: 'neo-selected',
        /**
         * @member {Boolean} singleSelect=true
         */
        singleSelect: true,
        /**
         * Internally saves the view id, but the getter will return the matching instance
         * @member {Object} view_=null
         * @protected
         */
        view_: null
    }

    /**
     * Gets triggered before getting the value of the items config
     * @param {Array|null} value
     * @returns {Array}
     */
    beforeGetItems(value) {
        if (!value) {
            this._items = value = []
        }

        return value
    }

    /**
     * Gets triggered before getting the value of the view config
     * @param {String} value
     * @returns {Neo.component.Base}
     */
    beforeGetView(value) {
        return Neo.getComponent(this._view)
    }

    /**
     * Gets triggered before setting the value of the view config
     * @returns {String} the view id
     */
    beforeSetView(value) {
        return value && value.id
    }

    /**
     *
     */
    addDomListener() {}

    /**
     * @param {Object} item
     * @param {Boolean} [silent] true to prevent a vdom update
     * @param {Object[]|String[]} itemCollection=this.items
     * @param {String} [selectedCls]
     */
    deselect(item, silent, itemCollection=this.items, selectedCls) {
        // We hold vdom ids for now, so all incoming selections must be converted.
        item = item.isRecord ? view.getItemId(item) : Neo.isObject(item) ? item.id : item;

        if (itemCollection.includes(item)) {
            let me     = this,
                {view} = me,
                node   = view.getVdomChild(item);

            if (node) {
                node.cls = _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].remove(node.cls || [], selectedCls || me.selectedCls);
                node['aria-selected'] = false
            }

            _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].remove(itemCollection, item);

            if (!silent) {
                // We need a bigger depth, since grid.Container & table.Container use selection.Model as a  top-level config.
                // In case the config would get moved to grid.View & table.View, we would not need it.
                view.updateDepth = -1;
                view.update();

                me.fire('selectionChange', {
                    selection: itemCollection
                })
            }
        }
        else if (!silent) {
            this.fire('noChange')
        }
    }

    /**
     * @param {Boolean} [silent] true to prevent a vdom update
     */
    deselectAll(silent) {
        let me     = this,
            items  = [...me.items],
            {view} = me;

        if (items.length) {
            items.forEach(item => {
                me.deselect(item, true)
            });

            if (!silent && items.length > 0) {
                // We need a bigger depth, since grid.Container & table.Container use selection.Model as a  top-level config.
                // In case the config would get moved to grid.View & table.View, we would not need it.
                view.updateDepth = -1;
                view.update()
            }

            me.fire('selectionChange', {
                selection: this.items
            })
        }
        else if (!silent) {
            me.fire('noChange')
        }
    }

    /**
     *
     */
    destroy(...args) {
        this.unregister();
        super.destroy(...args)
    }

    /**
     * @returns {Array} this.items
     */
    getSelection() {
        return this.items
    }

    /**
     * @returns {Boolean} true in case there is a selection
     */
    hasSelection() {
        return this.items.length > 0
    }

    /**
     * @param {String} id
     * @returns {Boolean} true in case the item is selected
     */
    isSelected(id) {
        return this.items.includes(id)
    }

    /**
     * @param {Neo.component.Base} component
     */
    register(component) {
        let me  = this,
            cls = component.wrapperCls || [];

        if (me.cls && !cls.includes(me.cls)) {
            cls.push(me.cls);
            component.wrapperCls = cls
        }

        me.view = component;
        me.addDomListener();

        component.fire('selectionModelChange', {
            value: me
        })
    }

    /**
     *
     */
    removeDomListeners() {
        let me           = this,
            component    = me.view,
            domListeners = [...component.domListeners];

        component.domListeners.forEach(listener => {
            if (listener.scope === me) {
                _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].remove(domListeners, listener)
            }
        });

        component.domListeners = domListeners
    }

    /**
     * @param {Object|Object[]|String[]} items
     * @param {Object[]|String[]} itemCollection=this.items
     * @param {String} [selectedCls]
     */
    select(items, itemCollection=this.items, selectedCls) {
        let me     = this,
            {view} = me;

        // We hold vdom ids for now, so all incoming selections must be converted.
        items = (items = Array.isArray(items) ?
            items: [items]).map(item => item.isRecord ? view.getItemId(item) : Neo.isObject(item) ? item.id : item);

        if (!Neo.isEqual(itemCollection, items)) {
            if (me.singleSelect) {
                me.deselectAll(true)
            }

            items.forEach(node => {
                node = view.getVdomChild(node);

                if (node) {
                    node.cls = _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].add(node.cls || [], selectedCls || me.selectedCls);
                    node['aria-selected'] = true
                }
            });

            _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].add(itemCollection, items);

            if (!view.silentSelect) {
                // We need a bigger depth, since grid.Container & table.Container use selection.Model as a  top-level config.
                // In case the config would get moved to grid.View & table.View, we would not need it.
                view.updateDepth = -1;
                view.update()
            }

            view.onSelect?.(items);

            me.fire('selectionChange', {
                selection: itemCollection
            })
        }
        else {
            me.fire('noChange')
        }
    }

    /**
     * @param {Object} item
     */
    toggleSelection(item) {
        let me = this;

        if (me.isSelected(item)) {
            me.deselect(item)
        } else {
            me.select(item)
        }
    }

    /**
     *
     */
    unregister() {
        let me  = this,
            cls = me.view.cls || [];

        if (me.cls && cls.includes(me.cls)) {
            _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].remove(cls, me.cls);
            me.view.cls = cls
        }

        me.deselectAll();

        me.removeDomListeners()
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(Model));


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,