"use strict";
(self["webpackChunkneo_mjs"] = self["webpackChunkneo_mjs"] || []).push([["vendors-src_state_Provider_mjs"],{

/***/ "./src/core/Effect.mjs":
/*!*****************************!*\
  !*** ./src/core/Effect.mjs ***!
  \*****************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Config_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Config.mjs */ "./src/core/Config.mjs");
/* harmony import */ var _EffectManager_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EffectManager.mjs */ "./src/core/EffectManager.mjs");
/* harmony import */ var _EffectBatchManager_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./EffectBatchManager.mjs */ "./src/core/EffectBatchManager.mjs");
/* harmony import */ var _IdGenerator_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./IdGenerator.mjs */ "./src/core/IdGenerator.mjs");





/**
 * Creates a reactive effect that automatically tracks its dependencies and re-runs when any of them change.
 * This is a lightweight, plain JavaScript class for performance.
 * It serves as a core reactive primitive, enabling automatic and dynamic dependency tracking.
 * @class Neo.core.Effect
 */
class Effect {
    /**
     * The optional component id this effect belongs to.
     * @member {String|null} componentId=null
     */
    componentId = null
    /**
     * A Map containing Config instances as keys and their cleanup functions as values.
     * @member {Map} dependencies=new Map()
     * @protected
     */
    dependencies = new Map()
    /**
     * The function to execute.
     * @member {Function|null} _fn=null
     */
    _fn = null
    /**
     * The unique identifier for this effect instance.
     * @member {String|null}
     */
    id = _IdGenerator_mjs__WEBPACK_IMPORTED_MODULE_3__["default"].getId('effect')
    /**
     * @member {Boolean}
     * @protected
     */
    isDestroyed = false
    /**
     * @member {Neo.core.Config}
     * @protected
     */
    isRunning = null

    /**
     * @member fn
     */
    get fn() {
        return this._fn
    }
    set fn(value) {
        this._fn = value;
        // Assigning a new function to `fn` automatically triggers a re-run.
        // This ensures that the effect immediately re-evaluates its dependencies
        // based on the new function's logic, clearing old dependencies and establishing new ones.
        this.run()
    }

    /**
     * @param {Function|Object}  fn              - The function to execute, or a config object for the effect.
     * @param {Function}        [fn.fn]          - The function to execute for the effect (if the first argument is an object).
     * @param {String}          [fn.componentId] - The component id this effect belongs to.
     * @param {Boolean}         [fn.lazy=false]  - If true, the effect will not run immediately upon creation.
     * @param {Object|Object[]} [fn.subscriber]  - A single subscriber or an array of subscribers for the isRunning config.
     * @param {Object}          [options={}]     - Optional. Used if the first argument is a function, this object contains the options.
     * @example
     * // Signature 1: Function and Options
     * const myEffect = new Effect(() => console.log('Run'), {lazy: true});
     * @example
     * // Signature 2: Single Config Object
     * const myEffect = new Effect({fn: () => console.log('Run'), lazy: true});
     */
    constructor(fn, options={}) {
        const me = this;

        // This single statement handles both (fn, options) and ({...}) signatures
        // by normalizing them into a single object that we can destructure.
        const {
              fn: effectFn,
              componentId,
              lazy = false,
              subscriber
        } = (typeof fn === 'function') ? { ...options, fn } : (fn || {});

        if (componentId) {
            me.componentId = componentId
        }

        me.isRunning = new _Config_mjs__WEBPACK_IMPORTED_MODULE_0__["default"](false);

        // The subscriber(s) must be added *before* the first run is triggered.
        // This is critical for consumers like functional components, which need to process
        // the initial VDOM synchronously within the constructor lifecycle.
        if (subscriber) {
            // A concise way to handle both single and array subscribers.
            [].concat(subscriber).forEach(sub => me.isRunning.subscribe(sub))
        }

        // If lazy, just store the function without running it.
        // Otherwise, use the setter to trigger the initial run.
        if (lazy) {
            me._fn = effectFn
        } else {
            me.fn = effectFn
        }
    }

    /**
     * Cleans up all subscriptions and destroys the effect.
     */
    destroy() {
        const me = this;

        me.dependencies.forEach(cleanup => cleanup());
        me.dependencies.clear();
        me.isDestroyed = true
    }

    /**
     * Executes the effect function, tracking its dependencies.
     * This is called automatically on creation and whenever a dependency changes.
     * The dynamic re-tracking ensures the effect always reflects its current dependencies,
     * even if the logic within `fn` changes conditionally.
     * @protected
     */
    run() {
        const me = this;

        _EffectManager_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].pause(); // Pause dependency tracking for isRunning.get()
        if (me.isDestroyed || me.isRunning.get()) {
            _EffectManager_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].resume(); // Resume if we return early
            return
        }

        if (_EffectBatchManager_mjs__WEBPACK_IMPORTED_MODULE_2__["default"].isBatchActive()) {
            _EffectBatchManager_mjs__WEBPACK_IMPORTED_MODULE_2__["default"].queueEffect(me);
            return
        }

        me.isRunning.set(true);

        me.dependencies.forEach(cleanup => cleanup());
        me.dependencies.clear();

        _EffectManager_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].push(me);
        _EffectManager_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].resume();

        try {
            me.fn()
        } finally {
            _EffectManager_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].pop();
            _EffectManager_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].pause(); // Pause dependency tracking for isRunning.set(false)
            me.isRunning.set(false);
            _EffectManager_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].resume() // Resume after isRunning.set(false)
        }
    }

    /**
     * Adds a `Neo.core.Config` instance as a dependency for this effect.
     * @param {Neo.core.Config} config The config instance to subscribe to.
     * @protected
     */
    addDependency(config) {
        const me = this;

        // Only add if not already a dependency. Map uses strict equality (===) for object keys.
        if (!me.dependencies.has(config)) {
            const cleanup = config.subscribe({
                id: me.id,
                fn: me.run.bind(me)
            });

            me.dependencies.set(config, cleanup)
        }
    }
}

Neo.core ??= {};

if (!Neo.core.Effect) {
    Neo.core.Effect = Effect;

    /**
     * Factory shortcut to create a new Neo.core.Effect instance.
     * @function Neo.effect
     * @param {Function|Object} fn - The function to execute, or a config object for the effect.
     * @param {Object} [options] - Optional. Used if the first argument is a function.
     * @returns {Neo.core.Effect}
     */
    Neo.effect = (fn, options) => new Effect(fn, options)
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.core.Effect);


/***/ }),

/***/ "./src/state/Provider.mjs":
/*!********************************!*\
  !*** ./src/state/Provider.mjs ***!
  \********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/Base.mjs */ "./src/core/Base.mjs");
/* harmony import */ var _util_ClassSystem_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/ClassSystem.mjs */ "./src/util/ClassSystem.mjs");
/* harmony import */ var _core_Config_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/Config.mjs */ "./src/core/Config.mjs");
/* harmony import */ var _core_Effect_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/Effect.mjs */ "./src/core/Effect.mjs");
/* harmony import */ var _core_EffectBatchManager_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/EffectBatchManager.mjs */ "./src/core/EffectBatchManager.mjs");
/* harmony import */ var _core_Observable_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../core/Observable.mjs */ "./src/core/Observable.mjs");
/* harmony import */ var _createHierarchicalDataProxy_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./createHierarchicalDataProxy.mjs */ "./src/state/createHierarchicalDataProxy.mjs");
/* harmony import */ var _core_ConfigSymbols_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../core/ConfigSymbols.mjs */ "./src/core/ConfigSymbols.mjs");









const twoWayBindingSymbol = Symbol.for('twoWayBinding');

/**
 * An optional component state provider for adding bindings to configs
 * @class Neo.state.Provider
 * @extends Neo.core.Base
 * @mixes Neo.core.Observable
 */
class Provider extends _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    /**
     * True automatically applies the core.Observable mixin
     * @member {Boolean} observable=true
     * @static
     */
    static observable = true

    static config = {
        /**
         * @member {String} className='Neo.state.Provider'
         * @protected
         */
        className: 'Neo.state.Provider',
        /**
         * @member {String} ntype='state-provider'
         * @protected
         */
        ntype: 'state-provider',
        /**
         * @member {Neo.component.Base|null} component=null
         * @protected
         */
        component: null,
        /**
         /**
         * The core data object managed by this StateProvider.
         * This object holds the reactive state that can be accessed and modified
         * by components and formulas within the provider's hierarchy.
         * Changes to properties within this data object will trigger reactivity.
         * When new data is assigned, it will be deeply merged with existing data.
         * @member {Object|null} data_=null
         * @example
         *     data: {
         *         user: {
         *             firstName: 'John',
         *             lastName : 'Doe'
         *         },
         *         settings: {
         *             theme: 'dark'
         *         }
         *     }
         * @reactive
         */
        data_: {
            [_core_ConfigSymbols_mjs__WEBPACK_IMPORTED_MODULE_7__.isDescriptor]: true,
            merge         : 'deep',
            value         : {}
        },
        /**
         * Defines computed properties based on other data properties within the StateProvider hierarchy.
         * Each formula is a function that receives a `data` argument, which is a hierarchical proxy
         * allowing access to data from the current provider and all its parent providers.
         * Changes to dependencies (accessed via `data.propertyName`) will automatically re-run the formula.
         * @member {Object|null} formulas_=null
         * @example
         *     data: {
         *         a    : 1,
         *         b    : 2,
         *         total: 50
         *     }
         *     formulas: {
         *         aPlusB : (data) => data.a + data.b,
         *         aTimesB: (data) => data.a * data.b,
         *         // Accessing parent data (assuming a parent provider has a 'taxRate' property)
         *         totalWithTax: (data) => data.total * (1 + data.taxRate)
         *     }
         * @reactive
         */
        formulas_: null,
        /**
         * @member {Neo.state.Provider|null} parent_=null
         * @reactive
         */
        parent_: null,
        /**
         /**
         * A collection of Neo.data.Store instances managed by this StateProvider.
         * Stores are defined as config objects with a `module` property pointing
         * to the store class, which will then be instantiated by the framework.
         * @member {Object|null} stores_=null
         * @example
         *     stores: {
         *         myUsers: {
         *             module: Neo.data.Store,
         *             model : 'MyApp.model.User',
         *             data  : [{id: 1, name: 'John'}, {id: 2, name: 'Doe'}]
         *         },
         *         myCustomStore1: MyCustomStoreClass,
         *         myCustomStore2: {
         *             module  : MyCustomStoreClass,
         *             autoLoad: true
         *         }
         *     }
         * @reactive
         */
        stores_: null
    }

    /**
     * @member {Map} #bindingEffects=new Map()
     * @private
     */
    #bindingEffects = new Map()
    /**
     * @member {Object} #dataConfigs={}
     * @private
     */
    #dataConfigs = {}
    /**
     * @member {Map} #formulaEffects=new Map()
     * @private
     */
    #formulaEffects = new Map()

    /**
     * @param {Object} config
     */
    construct(config) {
        Neo.isUsingStateProviders = true;
        super.construct(config)
    }

    /**
     * Triggered after the data config got changed.
     * This method initializes the internal #dataConfigs map, converting each
     * plain data property into a reactive Neo.core.Config instance.
     * @param {Object|null} value
     * @param {Object|null} oldValue
     * @protected
     */
    afterSetData(value, oldValue) {
        value && this.processDataObject(value)
    }

    /**
     * Triggered after the formulas config got changed.
     * This method sets up reactive effects for each defined formula.
     * Each formula function receives the hierarchical data proxy, allowing implicit dependency tracking.
     * @param {Object|null} value The new formulas configuration.
     * @param {Object|null} oldValue The old formulas configuration.
     * @protected
     */
    afterSetFormulas(value, oldValue) {
        const me = this;

        // Destroy old formula effects to prevent memory leaks and stale calculations.
        me.#formulaEffects.forEach(effect => effect.destroy());
        me.#formulaEffects.clear();

        if (value) {
            Object.entries(value).forEach(([formulaKey, formulaFn]) => {
                // Create a new lazy Effect. It will not run until explicitly told to.
                const effect = new _core_Effect_mjs__WEBPACK_IMPORTED_MODULE_3__["default"]({
                    fn: () => {
                        const
                            hierarchicalData = me.getHierarchyData(),
                            result           = formulaFn(hierarchicalData);

                        me.setData(formulaKey, result);
                    },
                    lazy: true
                });

                me.#formulaEffects.set(formulaKey, effect)
            })
        }
    }

    /**
     * Triggered when accessing the data config
     * @param {Object} value
     * @protected
     */
    beforeGetData(value) {
        return this.getHierarchyData()
    }

    /**
     * Triggered before the stores config gets changed.
     * @param {Object|null} value
     * @param {Object|null} oldValue
     * @returns {Object|null}
     * @protected
     */
    beforeSetStores(value, oldValue) {
        if (value) {
            let me = this;

            Object.entries(value).forEach(([key, storeValue]) => {
                // support mapping string based listeners into the stateProvider instance
                Object.entries(storeValue.listeners || {}).forEach(([listenerKey, listener]) => {
                    me.bindCallback(listener, listenerKey, me, storeValue.listeners)
                })

                value[key] = _util_ClassSystem_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].beforeSetInstance(storeValue)
            })
        }

        return value
    }

    /**
     * Creates a new binding for a component's config to a data property.
     * This now uses the Effect-based reactivity system.
     * @param {String} componentId
     * @param {String} configKey The component config to bind (e.g., 'text').
     * @param {String|Function} formatter The function that computes the value.
     */
    createBinding(componentId, configKey, formatter) {
        const
            me     = this,
            effect = new _core_Effect_mjs__WEBPACK_IMPORTED_MODULE_3__["default"](() => {
                const component = Neo.get(componentId);

                if (component && !component.isDestroyed) {
                    const
                        hierarchicalData = me.getHierarchyData(),
                        newValue         = Neo.isFunction(formatter) ? formatter.call(me, hierarchicalData) : hierarchicalData[formatter];

                    component._skipTwoWayPush = configKey;
                    component[configKey] = newValue;
                    delete component._skipTwoWayPush
                }
            });

        me.#bindingEffects.set(componentId, effect);

        // The effect observes the component's destruction to clean itself up.
        me.observeConfig(componentId, 'isDestroying', (value) => {
            if (value) {
                effect.destroy();
                me.#bindingEffects.delete(componentId)
            }
        });

        // The effect is returned to be managed by the component.
        return effect
    }

    /**
     * Processes a component's `bind` configuration to create reactive bindings.
     * It differentiates between store bindings and data bindings, and sets up two-way binding if specified.
     * @param {Neo.component.Base} component The component instance whose bindings are to be created.
     */
    createBindings(component) {
        let me               = this,
            hasTwoWayBinding = false;

        Object.entries(component.bind || {}).forEach(([configKey, value]) => {
            let key = value;

            // If the binding value is an object, it might contain `twoWay` or a specific `key`.
            if (Neo.isObject(value)) {
                if (value.twoWay) {
                    hasTwoWayBinding = true
                }
                key = value.key
            }

            // Determine if it's a store binding or a data binding.
            if (me.isStoreValue(key)) {
                // For store bindings, resolve the store and assign it to the component config.
                me.resolveStore(component, configKey, key.substring(7)) // remove the "stores." prefix
            } else {
                // For data bindings, create an Effect to keep the component config in sync with the data.
                me.createBinding(component.id, configKey, key, value.twoWay)
            }
        });

        // Mark the component if it has any two-way bindings, for internal tracking.
        if (hasTwoWayBinding) {
            component[twoWayBindingSymbol] = true
        }
    }

    /**
     * Destroys the state provider and cleans up all associated effects.
     */
    destroy() {
        const me = this;

        me.#formulaEffects.forEach(effect => effect.destroy());
        me.#formulaEffects.clear();

        me.#bindingEffects.forEach(effect => effect.destroy());
        me.#bindingEffects.clear();

        super.destroy()
    }

    /**
     * Convenience shortcut
     * @param {String} [ntype]
     * @returns {Neo.controller.Component|null}
     */
    getController(ntype) {
        return this.component.getController(ntype)
    }

    /**
     * Access the closest data property inside the parent chain.
     * @param {String} key
     * @returns {*} value
     */
    getData(key) {
        const ownerDetails = this.getOwnerOfDataProperty(key);

        if (ownerDetails) {
            return ownerDetails.owner.getDataConfig(ownerDetails.propertyName).get()
        }
    }

    /**
     * Retrieves the underlying core.Config instance for a given data property path.
     * @param {String} path The full path of the data property (e.g., 'user.firstname').
     * @returns {Neo.core.Config|null}
     */
    getDataConfig(path) {
        return this.#dataConfigs[path] || null
    }

    /**
     * Returns the merged, hierarchical data object as a reactive Proxy.
     * @returns {Proxy}
     */
    getHierarchyData() {
        return (0,_createHierarchicalDataProxy_mjs__WEBPACK_IMPORTED_MODULE_6__.createHierarchicalDataProxy)(this)
    }

    /**
     * Finds the state.Provider instance that owns a specific data property.
     * @param {String} path The full path of the data property.
     * @returns {{owner: Neo.state.Provider, propertyName: String}|null}
     */
    getOwnerOfDataProperty(path) {
        let me = this;

        if (me.#dataConfigs[path]) {
            return {owner: me, propertyName: path}
        }

        // Check for parent ownership
        const parent = me.getParent();
        if (parent) {
            return parent.getOwnerOfDataProperty(path)
        }

        return null
    }

    /**
     * Get the closest stateProvider inside the components parent tree
     * @returns {Neo.state.Provider|null}
     */
    getParent() {
        let me = this;

        // Access the internal value of the parent_ config directly.
        // This avoids recursive calls to the getter.
        if (me._parent) {
            return me._parent
        }

        // If no explicit parent is set, try to find it dynamically via the component.
        // Ensure this.component exists before trying to access its parent.
        if (me.component) {
            return me.component.parent?.getStateProvider() || null
        }

        // No explicit parent and no component to derive it from.
        return null
    }

    /**
     * Access the closest store inside the VM parent chain.
     * @param {String} key
     * @param {Neo.state.Provider} originStateProvider=this for internal usage only
     * @returns {Neo.data.Store}
     */
    getStore(key, originStateProvider=this) {
        let me       = this,
            {stores} = me,
            parentStateProvider;

        if (stores?.hasOwnProperty(key)) {
            return stores[key]
        }

        parentStateProvider = me.getParent();

        if (!parentStateProvider) {
            console.error(`store '${key}' not found inside this stateProvider or parents.`, originStateProvider)
        }

        return parentStateProvider.getStore(key, originStateProvider)
    }

    /**
     * Checks if any data property in the hierarchy starts with the given path.
     * This is used by the HierarchicalDataProxy to determine if it should return a nested proxy.
     * @param {String} path The path to check (e.g., 'user').
     * @returns {Boolean}
     */
    hasNestedDataStartingWith(path) {
        const pathWithDot = `${path}.`;

        if (Object.keys(this.#dataConfigs).some(key => key.startsWith(pathWithDot))) {
            return true
        }

        return this.getParent()?.hasNestedDataStartingWith(path) || false
    }

    /**
     * Returns the top-level data keys for a given path within this provider's data.
     * @param {String} path The path to get keys for (e.g., 'user.address').
     * @returns {String[]}
     */
    getTopLevelDataKeys(path) {
        const
            keys       = new Set(),
            pathPrefix = path ? `${path}.` : '';

        for (const fullPath in this.#dataConfigs) {
            if (fullPath.startsWith(pathPrefix)) {
                const
                    relativePath = fullPath.substring(pathPrefix.length),
                    topLevelKey  = relativePath.split('.')[0];

                if (topLevelKey) {
                    keys.add(topLevelKey)
                }
            }
        }

        return Array.from(keys)
    }

    /**
     * This is the core method for setting data, providing a single entry point for all data modifications.
     * It handles multiple scenarios:
     * 1.  **Object-based updates:** If `key` is an object, it recursively calls itself for each key-value pair.
     * 2.  **Data Records:** If `value` is a `Neo.data.Record`, it is treated as an atomic value and set directly.
     * 3.  **Bubbling Reactivity:** For a given key (e.g., 'user.name'), it sets the leaf value and then "bubbles up"
     *     the change, creating new parent objects (e.g., 'user') to ensure that effects depending on any part
     *     of the path are triggered.
     *
     * All updates are batched by the public `setData` methods to ensure effects run only once.
     * Use `setData()` or `setDataAtSameLevel()` instead of calling this method directly.
     *
     * @param {Object|String} key The property to set, or an object of key-value pairs.
     * @param {*} value The new value.
     * @param {Neo.state.Provider} [originStateProvider] The provider to start the search from for hierarchical updates.
     * @protected
     */
    internalSetData(key, value, originStateProvider) {
        const me = this;

        // If the value is a Neo.data.Record, treat it as an atomic value
        // and set it directly without further recursive processing of its properties.
        if (Neo.isRecord(value)) {
            const
                ownerDetails   = me.getOwnerOfDataProperty(key),
                targetProvider = ownerDetails ? ownerDetails.owner : (originStateProvider || me);

            me.#setConfigValue(targetProvider, key, value, null);
            return
        }

        if (Neo.isObject(key)) {
            Object.entries(key).forEach(([dataKey, dataValue]) => {
                me.internalSetData(dataKey, dataValue, originStateProvider)
            });
            return
        }

        const
            ownerDetails   = me.getOwnerOfDataProperty(key),
            targetProvider = ownerDetails ? ownerDetails.owner : (originStateProvider || me);

        me.#setConfigValue(targetProvider, key, value, null);

        // Bubble up the change to parent configs to trigger their effects
        let path        = key,
            latestValue = value;

        while (path.includes('.')) {
            const leafKey = path.split('.').pop();
            path = path.substring(0, path.lastIndexOf('.'));

            const parentConfig = targetProvider.getDataConfig(path);

            if (parentConfig) {
                const oldParentValue = parentConfig.get();
                if (Neo.isObject(oldParentValue)) {
                    const newParentValue = { ...oldParentValue, [leafKey]: latestValue };
                    parentConfig.set(newParentValue);
                    latestValue = newParentValue;
                } else {
                    break // Stop if parent is not an object
                }
            } else {
                break // Stop if parent config does not exist
            }
        }
    }

    /**
     * Internal convenience method to check if a binding value is supposed to match a store
     * @param {String} value
     * @returns {Boolean}
     */
    isStoreValue(value) {
        return Neo.isString(value) && value.startsWith('stores.')
    }

    /**
     * Gets called after all constructors & configs are applied.
     * @protected
     */
    onConstructed() {
        super.onConstructed();

        // After the provider is fully constructed and initial data is set,
        // run the formula effects for the first time to compute their initial values.
        this.#formulaEffects.forEach(effect => effect.run())
    }

    /**
     * @param {String} key
     * @param {*} value
     * @param {*} oldValue
     */
    onDataPropertyChange(key, value, oldValue) {
        // Can be overridden by subclasses
    }

    /**
     * Recursively processes a data object, creating or updating Neo.core.Config instances
     * for each property and storing them in the #dataConfigs map.
     * @param {Object} obj The data object to process.
     * @param {String} [path=''] The current path prefix for nested objects.
     * @protected
     */
    processDataObject(obj, path = '') {
        let me = this;

        Object.entries(obj).forEach(([key, value]) => {
            const fullPath = path ? `${path}.${key}` : key;

            // Ensure a Config instance exists for the current fullPath
            if (me.#dataConfigs[fullPath]) {
                me.#dataConfigs[fullPath].set(value)
            } else {
                me.#dataConfigs[fullPath] = new _core_Config_mjs__WEBPACK_IMPORTED_MODULE_2__["default"](value)
            }

            // If the value is a plain object, recursively process its properties
            if (Neo.typeOf(value) === 'Object') {
                me.processDataObject(value, fullPath)
            }
        });
    }

    /**
     * @param {Neo.component.Base} component
     * @param {String} configName
     * @param {String} storeName
     */
    resolveStore(component, configName, storeName) {
        let store = this.getStore(storeName);

        if (component[configName] !== store) {
            component[configName] = store
        }
    }

    /**
     * Helper function to set a config value and trigger reactivity.
     * This method creates a new Config instance if one doesn't exist for the given path,
     * or updates an existing one. It also triggers binding effects and calls onDataPropertyChange.
     * @param {Neo.state.Provider} provider The StateProvider instance owning the config.
     * @param {String} path The full path of the data property (e.g., 'user.firstname').
     * @param {*} newValue The new value to set.
     * @param {*} oldVal The old value (optional, used for initial setup).
     * @private
     */
    #setConfigValue(provider, path, newValue, oldVal) {
        let currentConfig = provider.getDataConfig(path),
            oldValue      = oldVal;

        if (currentConfig) {
            oldValue = currentConfig.get();
            currentConfig.set(newValue);
        } else {
            currentConfig = new _core_Config_mjs__WEBPACK_IMPORTED_MODULE_2__["default"](newValue);
            provider.#dataConfigs[path] = currentConfig;
            // Trigger all binding effects to re-evaluate their dependencies
            provider.#bindingEffects.forEach(effect => effect.run())
        }

        // Notify subscribers of the data property change.
        provider.onDataPropertyChange(path, newValue, oldValue)
    }

    /**
     * The method will assign all values to the closest stateProvider where it finds an existing key.
     * In case no match is found inside the parent chain, a new data property will get generated.
     *
     * All updates within a single call are batched to ensure that reactive effects (bindings and formulas)
     * are run only once.
     *
     * @param {Object|String} key
     * @param {*} value
     */
    setData(key, value) {
        _core_EffectBatchManager_mjs__WEBPACK_IMPORTED_MODULE_4__["default"].startBatch();
        this.internalSetData(key, value, this);
        _core_EffectBatchManager_mjs__WEBPACK_IMPORTED_MODULE_4__["default"].endBatch()
    }

    /**
     * Use this method instead of setData() in case you want to enforce
     * setting all keys on this instance instead of looking for matches inside parent stateProviders.
     *
     * All updates within a single call are batched to ensure that reactive effects (bindings and formulas)
     * are run only once.
     *
     * @param {Object|String} key
     * @param {*} value
     */
    setDataAtSameLevel(key, value) {
        _core_EffectBatchManager_mjs__WEBPACK_IMPORTED_MODULE_4__["default"].startBatch();
        this.internalSetData(key, value);
        _core_EffectBatchManager_mjs__WEBPACK_IMPORTED_MODULE_4__["default"].endBatch()
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(Provider));


/***/ }),

/***/ "./src/state/createHierarchicalDataProxy.mjs":
/*!***************************************************!*\
  !*** ./src/state/createHierarchicalDataProxy.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createHierarchicalDataProxy: () => (/* binding */ createHierarchicalDataProxy)
/* harmony export */ });
/* harmony import */ var _core_EffectManager_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/EffectManager.mjs */ "./src/core/EffectManager.mjs");


/**
 * Creates a nested Proxy that represents a level in the hierarchical data structure.
 * @param {Neo.state.Provider} rootProvider The top-level provider to start searches from.
 * @param {String} path The current path of this proxy level (e.g., 'user' for data.user).
 * @returns {Proxy|null}
 * @private
 */
function createNestedProxy(rootProvider, path) {
    // The target object for the proxy can be empty because all lookups are dynamic.
    const target = {};

    return new Proxy(target, {
        /**
         * The get trap for the proxy. This is where the magic happens.
         * @param {Object} currentTarget The proxy's target object.
         * @param {String|Symbol} property The name of the property being accessed.
         * @returns {*} The value of the property or a new proxy for nested access.
         */
        get(currentTarget, property) {
            // Handle internal properties that might be set directly on the proxy's target
            // or are expected by the environment (like Siesta's __REFADR__).
            if (typeof property === 'symbol' || property === '__REFADR__' || property === 'inspect' || property === 'then') {
                return Reflect.get(currentTarget, property)
            }

            // Only allow string or number properties to proceed as data paths.
            if (typeof property !== 'string' && typeof property !== 'number') {
                return undefined; // For other non-string/non-number properties, return undefined.
            }

            // Special handling for the 'stores' property at the root level
            if (path === '' && property === 'stores') {
                return new Proxy({}, {
                    get(target, storeName) {
                        if (typeof storeName === 'symbol' || storeName === '__REFADR__') {
                            return Reflect.get(target, storeName)
                        }
                        // Delegate to the StateProvider's getStore method for hierarchical resolution
                        // Accessing store.count later will register the dependency via the Config system
                        return rootProvider.getStore(storeName)
                    }
                })
            }

            const fullPath = path ? `${path}.${property}` : property;

            // 1. Check if the full path corresponds to an actual data property.
            const ownerDetails = rootProvider.getOwnerOfDataProperty(fullPath);

            if (ownerDetails) {
                const
                    {owner, propertyName} = ownerDetails,
                    config                = owner.getDataConfig(propertyName);

                if (config) {
                    _core_EffectManager_mjs__WEBPACK_IMPORTED_MODULE_0__["default"].getActiveEffect()?.addDependency(config);

                    const value = config.get();
                    // If the value is an object, return a new proxy for it to ensure nested accesses are also proxied.
                    if (Neo.isObject(value)) {
                        return createNestedProxy(rootProvider, fullPath)
                    }

                    return value
                }
            }

            // 2. If not a direct match, it might be a parent object of a nested property
            //    (e.g., accessing `user` when a `user.firstname` binding exists).
            //    In this case, we return another proxy for the next level down.
            if (rootProvider.hasNestedDataStartingWith(fullPath)) {
                return createNestedProxy(rootProvider, fullPath)
            }

            // 3. If it's neither a data property nor a path to one, it doesn't exist.
            //    Returning undefined ensures that chained accesses (e.g., data.nonexistent.property) fail gracefully.
        },

        set(currentTarget, property, value) {
            // Allow internal properties (like Symbols or specific strings) to be set directly on the target.
            if (typeof property === 'symbol' || property === '__REFADR__') {
                return Reflect.set(currentTarget, property, value)
            }

            const
                fullPath     = path ? `${path}.${property}` : property,
                ownerDetails = rootProvider.getOwnerOfDataProperty(fullPath);
            let targetProvider;

            if (ownerDetails) {
                targetProvider = ownerDetails.owner
            } else {
                // If no owner is found, set it on the rootProvider (the one that created this proxy)
                targetProvider = rootProvider
            }

            targetProvider.setData(fullPath, value);
            return true // Indicate that the assignment was successful
        },

        ownKeys(currentTarget) {
            return rootProvider.getTopLevelDataKeys(path)
        },

        getOwnPropertyDescriptor(currentTarget, property) {
            const
                fullPath     = path ? `${path}.${property}` : property,
                ownerDetails = rootProvider.getOwnerOfDataProperty(fullPath);

            if (ownerDetails) {
                const config = ownerDetails.owner.getDataConfig(ownerDetails.propertyName);

                if (config) {
                    const value = config.get();
                    return {
                        value       : Neo.isObject(value) ? createNestedProxy(rootProvider, fullPath) : value,
                        writable    : true,
                        enumerable  : true,
                        configurable: true
                    }
                }
            }
        }
    })
}

/**
 * Creates a Proxy object that represents the merged, hierarchical data from a `state.Provider` chain.
 * When a property is accessed through this proxy while an Effect is running, it automatically
 * tracks the underlying core.Config instance as a dependency.
 * @param {Neo.state.Provider} provider The starting state.Provider.
 * @returns {Proxy}
 */
function createHierarchicalDataProxy(provider) {
    return createNestedProxy(provider, '')
}


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2h1bmtzL2FwcC92ZW5kb3JzLXNyY19zdGF0ZV9Qcm92aWRlcl9tanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBOEM7QUFDTztBQUNLO0FBQ1A7O0FBRW5EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixhQUFhO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLEtBQUs7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixlQUFlO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsU0FBUyx3REFBVztBQUNwQjtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxlQUFlLGtCQUFrQjtBQUNqQyxlQUFlLGlCQUFpQjtBQUNoQyxlQUFlLGlCQUFpQjtBQUNoQyxlQUFlLGlCQUFpQjtBQUNoQyxlQUFlLGlCQUFpQjtBQUNoQyxlQUFlLGlCQUFpQixXQUFXO0FBQzNDO0FBQ0E7QUFDQSw4REFBOEQsV0FBVztBQUN6RTtBQUNBO0FBQ0Esb0NBQW9DLHlDQUF5QztBQUM3RTtBQUNBLDhCQUE4QjtBQUM5Qjs7QUFFQSxrRUFBa0UsSUFBSTtBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLGlDQUFpQyxpQkFBaUIsV0FBVzs7QUFFdkU7QUFDQTtBQUNBOztBQUVBLDJCQUEyQixtREFBTTs7QUFFakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7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TDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsb0JBQW9CO0FBQy9CLGFBQWE7QUFDYjtBQUNPO0FBQ1A7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL25lby5tanMvLi9zcmMvY29yZS9FZmZlY3QubWpzIiwid2VicGFjazovL25lby5tanMvLi9zcmMvc3RhdGUvUHJvdmlkZXIubWpzIiwid2VicGFjazovL25lby5tanMvLi9zcmMvc3RhdGUvY3JlYXRlSGllcmFyY2hpY2FsRGF0YVByb3h5Lm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ29uZmlnICAgICAgICAgICAgIGZyb20gJy4vQ29uZmlnLm1qcyc7XG5pbXBvcnQgRWZmZWN0TWFuYWdlciAgICAgIGZyb20gJy4vRWZmZWN0TWFuYWdlci5tanMnO1xuaW1wb3J0IEVmZmVjdEJhdGNoTWFuYWdlciBmcm9tICcuL0VmZmVjdEJhdGNoTWFuYWdlci5tanMnO1xuaW1wb3J0IElkR2VuZXJhdG9yICAgICAgICBmcm9tICcuL0lkR2VuZXJhdG9yLm1qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHJlYWN0aXZlIGVmZmVjdCB0aGF0IGF1dG9tYXRpY2FsbHkgdHJhY2tzIGl0cyBkZXBlbmRlbmNpZXMgYW5kIHJlLXJ1bnMgd2hlbiBhbnkgb2YgdGhlbSBjaGFuZ2UuXG4gKiBUaGlzIGlzIGEgbGlnaHR3ZWlnaHQsIHBsYWluIEphdmFTY3JpcHQgY2xhc3MgZm9yIHBlcmZvcm1hbmNlLlxuICogSXQgc2VydmVzIGFzIGEgY29yZSByZWFjdGl2ZSBwcmltaXRpdmUsIGVuYWJsaW5nIGF1dG9tYXRpYyBhbmQgZHluYW1pYyBkZXBlbmRlbmN5IHRyYWNraW5nLlxuICogQGNsYXNzIE5lby5jb3JlLkVmZmVjdFxuICovXG5jbGFzcyBFZmZlY3Qge1xuICAgIC8qKlxuICAgICAqIFRoZSBvcHRpb25hbCBjb21wb25lbnQgaWQgdGhpcyBlZmZlY3QgYmVsb25ncyB0by5cbiAgICAgKiBAbWVtYmVyIHtTdHJpbmd8bnVsbH0gY29tcG9uZW50SWQ9bnVsbFxuICAgICAqL1xuICAgIGNvbXBvbmVudElkID0gbnVsbFxuICAgIC8qKlxuICAgICAqIEEgTWFwIGNvbnRhaW5pbmcgQ29uZmlnIGluc3RhbmNlcyBhcyBrZXlzIGFuZCB0aGVpciBjbGVhbnVwIGZ1bmN0aW9ucyBhcyB2YWx1ZXMuXG4gICAgICogQG1lbWJlciB7TWFwfSBkZXBlbmRlbmNpZXM9bmV3IE1hcCgpXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGRlcGVuZGVuY2llcyA9IG5ldyBNYXAoKVxuICAgIC8qKlxuICAgICAqIFRoZSBmdW5jdGlvbiB0byBleGVjdXRlLlxuICAgICAqIEBtZW1iZXIge0Z1bmN0aW9ufG51bGx9IF9mbj1udWxsXG4gICAgICovXG4gICAgX2ZuID0gbnVsbFxuICAgIC8qKlxuICAgICAqIFRoZSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhpcyBlZmZlY3QgaW5zdGFuY2UuXG4gICAgICogQG1lbWJlciB7U3RyaW5nfG51bGx9XG4gICAgICovXG4gICAgaWQgPSBJZEdlbmVyYXRvci5nZXRJZCgnZWZmZWN0JylcbiAgICAvKipcbiAgICAgKiBAbWVtYmVyIHtCb29sZWFufVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBpc0Rlc3Ryb3llZCA9IGZhbHNlXG4gICAgLyoqXG4gICAgICogQG1lbWJlciB7TmVvLmNvcmUuQ29uZmlnfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBpc1J1bm5pbmcgPSBudWxsXG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyIGZuXG4gICAgICovXG4gICAgZ2V0IGZuKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZm5cbiAgICB9XG4gICAgc2V0IGZuKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2ZuID0gdmFsdWU7XG4gICAgICAgIC8vIEFzc2lnbmluZyBhIG5ldyBmdW5jdGlvbiB0byBgZm5gIGF1dG9tYXRpY2FsbHkgdHJpZ2dlcnMgYSByZS1ydW4uXG4gICAgICAgIC8vIFRoaXMgZW5zdXJlcyB0aGF0IHRoZSBlZmZlY3QgaW1tZWRpYXRlbHkgcmUtZXZhbHVhdGVzIGl0cyBkZXBlbmRlbmNpZXNcbiAgICAgICAgLy8gYmFzZWQgb24gdGhlIG5ldyBmdW5jdGlvbidzIGxvZ2ljLCBjbGVhcmluZyBvbGQgZGVwZW5kZW5jaWVzIGFuZCBlc3RhYmxpc2hpbmcgbmV3IG9uZXMuXG4gICAgICAgIHRoaXMucnVuKClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gIGZuICAgICAgICAgICAgICAtIFRoZSBmdW5jdGlvbiB0byBleGVjdXRlLCBvciBhIGNvbmZpZyBvYmplY3QgZm9yIHRoZSBlZmZlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gICAgICAgIFtmbi5mbl0gICAgICAgICAgLSBUaGUgZnVuY3Rpb24gdG8gZXhlY3V0ZSBmb3IgdGhlIGVmZmVjdCAoaWYgdGhlIGZpcnN0IGFyZ3VtZW50IGlzIGFuIG9iamVjdCkuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9ICAgICAgICAgIFtmbi5jb21wb25lbnRJZF0gLSBUaGUgY29tcG9uZW50IGlkIHRoaXMgZWZmZWN0IGJlbG9uZ3MgdG8uXG4gICAgICogQHBhcmFtIHtCb29sZWFufSAgICAgICAgIFtmbi5sYXp5PWZhbHNlXSAgLSBJZiB0cnVlLCB0aGUgZWZmZWN0IHdpbGwgbm90IHJ1biBpbW1lZGlhdGVseSB1cG9uIGNyZWF0aW9uLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fE9iamVjdFtdfSBbZm4uc3Vic2NyaWJlcl0gIC0gQSBzaW5nbGUgc3Vic2NyaWJlciBvciBhbiBhcnJheSBvZiBzdWJzY3JpYmVycyBmb3IgdGhlIGlzUnVubmluZyBjb25maWcuXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgIFtvcHRpb25zPXt9XSAgICAgLSBPcHRpb25hbC4gVXNlZCBpZiB0aGUgZmlyc3QgYXJndW1lbnQgaXMgYSBmdW5jdGlvbiwgdGhpcyBvYmplY3QgY29udGFpbnMgdGhlIG9wdGlvbnMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBTaWduYXR1cmUgMTogRnVuY3Rpb24gYW5kIE9wdGlvbnNcbiAgICAgKiBjb25zdCBteUVmZmVjdCA9IG5ldyBFZmZlY3QoKCkgPT4gY29uc29sZS5sb2coJ1J1bicpLCB7bGF6eTogdHJ1ZX0pO1xuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gU2lnbmF0dXJlIDI6IFNpbmdsZSBDb25maWcgT2JqZWN0XG4gICAgICogY29uc3QgbXlFZmZlY3QgPSBuZXcgRWZmZWN0KHtmbjogKCkgPT4gY29uc29sZS5sb2coJ1J1bicpLCBsYXp5OiB0cnVlfSk7XG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZm4sIG9wdGlvbnM9e30pIHtcbiAgICAgICAgY29uc3QgbWUgPSB0aGlzO1xuXG4gICAgICAgIC8vIFRoaXMgc2luZ2xlIHN0YXRlbWVudCBoYW5kbGVzIGJvdGggKGZuLCBvcHRpb25zKSBhbmQgKHsuLi59KSBzaWduYXR1cmVzXG4gICAgICAgIC8vIGJ5IG5vcm1hbGl6aW5nIHRoZW0gaW50byBhIHNpbmdsZSBvYmplY3QgdGhhdCB3ZSBjYW4gZGVzdHJ1Y3R1cmUuXG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgZm46IGVmZmVjdEZuLFxuICAgICAgICAgICAgICBjb21wb25lbnRJZCxcbiAgICAgICAgICAgICAgbGF6eSA9IGZhbHNlLFxuICAgICAgICAgICAgICBzdWJzY3JpYmVyXG4gICAgICAgIH0gPSAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nKSA/IHsgLi4ub3B0aW9ucywgZm4gfSA6IChmbiB8fCB7fSk7XG5cbiAgICAgICAgaWYgKGNvbXBvbmVudElkKSB7XG4gICAgICAgICAgICBtZS5jb21wb25lbnRJZCA9IGNvbXBvbmVudElkXG4gICAgICAgIH1cblxuICAgICAgICBtZS5pc1J1bm5pbmcgPSBuZXcgQ29uZmlnKGZhbHNlKTtcblxuICAgICAgICAvLyBUaGUgc3Vic2NyaWJlcihzKSBtdXN0IGJlIGFkZGVkICpiZWZvcmUqIHRoZSBmaXJzdCBydW4gaXMgdHJpZ2dlcmVkLlxuICAgICAgICAvLyBUaGlzIGlzIGNyaXRpY2FsIGZvciBjb25zdW1lcnMgbGlrZSBmdW5jdGlvbmFsIGNvbXBvbmVudHMsIHdoaWNoIG5lZWQgdG8gcHJvY2Vzc1xuICAgICAgICAvLyB0aGUgaW5pdGlhbCBWRE9NIHN5bmNocm9ub3VzbHkgd2l0aGluIHRoZSBjb25zdHJ1Y3RvciBsaWZlY3ljbGUuXG4gICAgICAgIGlmIChzdWJzY3JpYmVyKSB7XG4gICAgICAgICAgICAvLyBBIGNvbmNpc2Ugd2F5IHRvIGhhbmRsZSBib3RoIHNpbmdsZSBhbmQgYXJyYXkgc3Vic2NyaWJlcnMuXG4gICAgICAgICAgICBbXS5jb25jYXQoc3Vic2NyaWJlcikuZm9yRWFjaChzdWIgPT4gbWUuaXNSdW5uaW5nLnN1YnNjcmliZShzdWIpKVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgbGF6eSwganVzdCBzdG9yZSB0aGUgZnVuY3Rpb24gd2l0aG91dCBydW5uaW5nIGl0LlxuICAgICAgICAvLyBPdGhlcndpc2UsIHVzZSB0aGUgc2V0dGVyIHRvIHRyaWdnZXIgdGhlIGluaXRpYWwgcnVuLlxuICAgICAgICBpZiAobGF6eSkge1xuICAgICAgICAgICAgbWUuX2ZuID0gZWZmZWN0Rm5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1lLmZuID0gZWZmZWN0Rm5cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsZWFucyB1cCBhbGwgc3Vic2NyaXB0aW9ucyBhbmQgZGVzdHJveXMgdGhlIGVmZmVjdC5cbiAgICAgKi9cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBjb25zdCBtZSA9IHRoaXM7XG5cbiAgICAgICAgbWUuZGVwZW5kZW5jaWVzLmZvckVhY2goY2xlYW51cCA9PiBjbGVhbnVwKCkpO1xuICAgICAgICBtZS5kZXBlbmRlbmNpZXMuY2xlYXIoKTtcbiAgICAgICAgbWUuaXNEZXN0cm95ZWQgPSB0cnVlXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZXMgdGhlIGVmZmVjdCBmdW5jdGlvbiwgdHJhY2tpbmcgaXRzIGRlcGVuZGVuY2llcy5cbiAgICAgKiBUaGlzIGlzIGNhbGxlZCBhdXRvbWF0aWNhbGx5IG9uIGNyZWF0aW9uIGFuZCB3aGVuZXZlciBhIGRlcGVuZGVuY3kgY2hhbmdlcy5cbiAgICAgKiBUaGUgZHluYW1pYyByZS10cmFja2luZyBlbnN1cmVzIHRoZSBlZmZlY3QgYWx3YXlzIHJlZmxlY3RzIGl0cyBjdXJyZW50IGRlcGVuZGVuY2llcyxcbiAgICAgKiBldmVuIGlmIHRoZSBsb2dpYyB3aXRoaW4gYGZuYCBjaGFuZ2VzIGNvbmRpdGlvbmFsbHkuXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHJ1bigpIHtcbiAgICAgICAgY29uc3QgbWUgPSB0aGlzO1xuXG4gICAgICAgIEVmZmVjdE1hbmFnZXIucGF1c2UoKTsgLy8gUGF1c2UgZGVwZW5kZW5jeSB0cmFja2luZyBmb3IgaXNSdW5uaW5nLmdldCgpXG4gICAgICAgIGlmIChtZS5pc0Rlc3Ryb3llZCB8fCBtZS5pc1J1bm5pbmcuZ2V0KCkpIHtcbiAgICAgICAgICAgIEVmZmVjdE1hbmFnZXIucmVzdW1lKCk7IC8vIFJlc3VtZSBpZiB3ZSByZXR1cm4gZWFybHlcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKEVmZmVjdEJhdGNoTWFuYWdlci5pc0JhdGNoQWN0aXZlKCkpIHtcbiAgICAgICAgICAgIEVmZmVjdEJhdGNoTWFuYWdlci5xdWV1ZUVmZmVjdChtZSk7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIG1lLmlzUnVubmluZy5zZXQodHJ1ZSk7XG5cbiAgICAgICAgbWUuZGVwZW5kZW5jaWVzLmZvckVhY2goY2xlYW51cCA9PiBjbGVhbnVwKCkpO1xuICAgICAgICBtZS5kZXBlbmRlbmNpZXMuY2xlYXIoKTtcblxuICAgICAgICBFZmZlY3RNYW5hZ2VyLnB1c2gobWUpO1xuICAgICAgICBFZmZlY3RNYW5hZ2VyLnJlc3VtZSgpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBtZS5mbigpXG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBFZmZlY3RNYW5hZ2VyLnBvcCgpO1xuICAgICAgICAgICAgRWZmZWN0TWFuYWdlci5wYXVzZSgpOyAvLyBQYXVzZSBkZXBlbmRlbmN5IHRyYWNraW5nIGZvciBpc1J1bm5pbmcuc2V0KGZhbHNlKVxuICAgICAgICAgICAgbWUuaXNSdW5uaW5nLnNldChmYWxzZSk7XG4gICAgICAgICAgICBFZmZlY3RNYW5hZ2VyLnJlc3VtZSgpIC8vIFJlc3VtZSBhZnRlciBpc1J1bm5pbmcuc2V0KGZhbHNlKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBhIGBOZW8uY29yZS5Db25maWdgIGluc3RhbmNlIGFzIGEgZGVwZW5kZW5jeSBmb3IgdGhpcyBlZmZlY3QuXG4gICAgICogQHBhcmFtIHtOZW8uY29yZS5Db25maWd9IGNvbmZpZyBUaGUgY29uZmlnIGluc3RhbmNlIHRvIHN1YnNjcmliZSB0by5cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgYWRkRGVwZW5kZW5jeShjb25maWcpIHtcbiAgICAgICAgY29uc3QgbWUgPSB0aGlzO1xuXG4gICAgICAgIC8vIE9ubHkgYWRkIGlmIG5vdCBhbHJlYWR5IGEgZGVwZW5kZW5jeS4gTWFwIHVzZXMgc3RyaWN0IGVxdWFsaXR5ICg9PT0pIGZvciBvYmplY3Qga2V5cy5cbiAgICAgICAgaWYgKCFtZS5kZXBlbmRlbmNpZXMuaGFzKGNvbmZpZykpIHtcbiAgICAgICAgICAgIGNvbnN0IGNsZWFudXAgPSBjb25maWcuc3Vic2NyaWJlKHtcbiAgICAgICAgICAgICAgICBpZDogbWUuaWQsXG4gICAgICAgICAgICAgICAgZm46IG1lLnJ1bi5iaW5kKG1lKVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIG1lLmRlcGVuZGVuY2llcy5zZXQoY29uZmlnLCBjbGVhbnVwKVxuICAgICAgICB9XG4gICAgfVxufVxuXG5OZW8uY29yZSA/Pz0ge307XG5cbmlmICghTmVvLmNvcmUuRWZmZWN0KSB7XG4gICAgTmVvLmNvcmUuRWZmZWN0ID0gRWZmZWN0O1xuXG4gICAgLyoqXG4gICAgICogRmFjdG9yeSBzaG9ydGN1dCB0byBjcmVhdGUgYSBuZXcgTmVvLmNvcmUuRWZmZWN0IGluc3RhbmNlLlxuICAgICAqIEBmdW5jdGlvbiBOZW8uZWZmZWN0XG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R9IGZuIC0gVGhlIGZ1bmN0aW9uIHRvIGV4ZWN1dGUsIG9yIGEgY29uZmlnIG9iamVjdCBmb3IgdGhlIGVmZmVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gT3B0aW9uYWwuIFVzZWQgaWYgdGhlIGZpcnN0IGFyZ3VtZW50IGlzIGEgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge05lby5jb3JlLkVmZmVjdH1cbiAgICAgKi9cbiAgICBOZW8uZWZmZWN0ID0gKGZuLCBvcHRpb25zKSA9PiBuZXcgRWZmZWN0KGZuLCBvcHRpb25zKVxufVxuXG5leHBvcnQgZGVmYXVsdCBOZW8uY29yZS5FZmZlY3Q7XG4iLCJpbXBvcnQgQmFzZSAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSAnLi4vY29yZS9CYXNlLm1qcyc7XG5pbXBvcnQgQ2xhc3NTeXN0ZW1VdGlsICAgICAgICAgICAgICAgZnJvbSAnLi4vdXRpbC9DbGFzc1N5c3RlbS5tanMnO1xuaW1wb3J0IENvbmZpZyAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gJy4uL2NvcmUvQ29uZmlnLm1qcyc7XG5pbXBvcnQgRWZmZWN0ICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSAnLi4vY29yZS9FZmZlY3QubWpzJztcbmltcG9ydCBFZmZlY3RCYXRjaE1hbmFnZXIgICAgICAgICAgICBmcm9tICcuLi9jb3JlL0VmZmVjdEJhdGNoTWFuYWdlci5tanMnO1xuaW1wb3J0IE9ic2VydmFibGUgICAgICAgICAgICAgICAgICAgIGZyb20gJy4uL2NvcmUvT2JzZXJ2YWJsZS5tanMnO1xuaW1wb3J0IHtjcmVhdGVIaWVyYXJjaGljYWxEYXRhUHJveHl9IGZyb20gJy4vY3JlYXRlSGllcmFyY2hpY2FsRGF0YVByb3h5Lm1qcyc7XG5pbXBvcnQge2lzRGVzY3JpcHRvcn0gICAgICAgICAgICAgICAgZnJvbSAnLi4vY29yZS9Db25maWdTeW1ib2xzLm1qcyc7XG5cbmNvbnN0IHR3b1dheUJpbmRpbmdTeW1ib2wgPSBTeW1ib2wuZm9yKCd0d29XYXlCaW5kaW5nJyk7XG5cbi8qKlxuICogQW4gb3B0aW9uYWwgY29tcG9uZW50IHN0YXRlIHByb3ZpZGVyIGZvciBhZGRpbmcgYmluZGluZ3MgdG8gY29uZmlnc1xuICogQGNsYXNzIE5lby5zdGF0ZS5Qcm92aWRlclxuICogQGV4dGVuZHMgTmVvLmNvcmUuQmFzZVxuICogQG1peGVzIE5lby5jb3JlLk9ic2VydmFibGVcbiAqL1xuY2xhc3MgUHJvdmlkZXIgZXh0ZW5kcyBCYXNlIHtcbiAgICAvKipcbiAgICAgKiBUcnVlIGF1dG9tYXRpY2FsbHkgYXBwbGllcyB0aGUgY29yZS5PYnNlcnZhYmxlIG1peGluXG4gICAgICogQG1lbWJlciB7Qm9vbGVhbn0gb2JzZXJ2YWJsZT10cnVlXG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIHN0YXRpYyBvYnNlcnZhYmxlID0gdHJ1ZVxuXG4gICAgc3RhdGljIGNvbmZpZyA9IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gY2xhc3NOYW1lPSdOZW8uc3RhdGUuUHJvdmlkZXInXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIGNsYXNzTmFtZTogJ05lby5zdGF0ZS5Qcm92aWRlcicsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IG50eXBlPSdzdGF0ZS1wcm92aWRlcidcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgbnR5cGU6ICdzdGF0ZS1wcm92aWRlcicsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtOZW8uY29tcG9uZW50LkJhc2V8bnVsbH0gY29tcG9uZW50PW51bGxcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgY29tcG9uZW50OiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgY29yZSBkYXRhIG9iamVjdCBtYW5hZ2VkIGJ5IHRoaXMgU3RhdGVQcm92aWRlci5cbiAgICAgICAgICogVGhpcyBvYmplY3QgaG9sZHMgdGhlIHJlYWN0aXZlIHN0YXRlIHRoYXQgY2FuIGJlIGFjY2Vzc2VkIGFuZCBtb2RpZmllZFxuICAgICAgICAgKiBieSBjb21wb25lbnRzIGFuZCBmb3JtdWxhcyB3aXRoaW4gdGhlIHByb3ZpZGVyJ3MgaGllcmFyY2h5LlxuICAgICAgICAgKiBDaGFuZ2VzIHRvIHByb3BlcnRpZXMgd2l0aGluIHRoaXMgZGF0YSBvYmplY3Qgd2lsbCB0cmlnZ2VyIHJlYWN0aXZpdHkuXG4gICAgICAgICAqIFdoZW4gbmV3IGRhdGEgaXMgYXNzaWduZWQsIGl0IHdpbGwgYmUgZGVlcGx5IG1lcmdlZCB3aXRoIGV4aXN0aW5nIGRhdGEuXG4gICAgICAgICAqIEBtZW1iZXIge09iamVjdHxudWxsfSBkYXRhXz1udWxsXG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqICAgICBkYXRhOiB7XG4gICAgICAgICAqICAgICAgICAgdXNlcjoge1xuICAgICAgICAgKiAgICAgICAgICAgICBmaXJzdE5hbWU6ICdKb2huJyxcbiAgICAgICAgICogICAgICAgICAgICAgbGFzdE5hbWUgOiAnRG9lJ1xuICAgICAgICAgKiAgICAgICAgIH0sXG4gICAgICAgICAqICAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICogICAgICAgICAgICAgdGhlbWU6ICdkYXJrJ1xuICAgICAgICAgKiAgICAgICAgIH1cbiAgICAgICAgICogICAgIH1cbiAgICAgICAgICogQHJlYWN0aXZlXG4gICAgICAgICAqL1xuICAgICAgICBkYXRhXzoge1xuICAgICAgICAgICAgW2lzRGVzY3JpcHRvcl06IHRydWUsXG4gICAgICAgICAgICBtZXJnZSAgICAgICAgIDogJ2RlZXAnLFxuICAgICAgICAgICAgdmFsdWUgICAgICAgICA6IHt9XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWZpbmVzIGNvbXB1dGVkIHByb3BlcnRpZXMgYmFzZWQgb24gb3RoZXIgZGF0YSBwcm9wZXJ0aWVzIHdpdGhpbiB0aGUgU3RhdGVQcm92aWRlciBoaWVyYXJjaHkuXG4gICAgICAgICAqIEVhY2ggZm9ybXVsYSBpcyBhIGZ1bmN0aW9uIHRoYXQgcmVjZWl2ZXMgYSBgZGF0YWAgYXJndW1lbnQsIHdoaWNoIGlzIGEgaGllcmFyY2hpY2FsIHByb3h5XG4gICAgICAgICAqIGFsbG93aW5nIGFjY2VzcyB0byBkYXRhIGZyb20gdGhlIGN1cnJlbnQgcHJvdmlkZXIgYW5kIGFsbCBpdHMgcGFyZW50IHByb3ZpZGVycy5cbiAgICAgICAgICogQ2hhbmdlcyB0byBkZXBlbmRlbmNpZXMgKGFjY2Vzc2VkIHZpYSBgZGF0YS5wcm9wZXJ0eU5hbWVgKSB3aWxsIGF1dG9tYXRpY2FsbHkgcmUtcnVuIHRoZSBmb3JtdWxhLlxuICAgICAgICAgKiBAbWVtYmVyIHtPYmplY3R8bnVsbH0gZm9ybXVsYXNfPW51bGxcbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICogICAgIGRhdGE6IHtcbiAgICAgICAgICogICAgICAgICBhICAgIDogMSxcbiAgICAgICAgICogICAgICAgICBiICAgIDogMixcbiAgICAgICAgICogICAgICAgICB0b3RhbDogNTBcbiAgICAgICAgICogICAgIH1cbiAgICAgICAgICogICAgIGZvcm11bGFzOiB7XG4gICAgICAgICAqICAgICAgICAgYVBsdXNCIDogKGRhdGEpID0+IGRhdGEuYSArIGRhdGEuYixcbiAgICAgICAgICogICAgICAgICBhVGltZXNCOiAoZGF0YSkgPT4gZGF0YS5hICogZGF0YS5iLFxuICAgICAgICAgKiAgICAgICAgIC8vIEFjY2Vzc2luZyBwYXJlbnQgZGF0YSAoYXNzdW1pbmcgYSBwYXJlbnQgcHJvdmlkZXIgaGFzIGEgJ3RheFJhdGUnIHByb3BlcnR5KVxuICAgICAgICAgKiAgICAgICAgIHRvdGFsV2l0aFRheDogKGRhdGEpID0+IGRhdGEudG90YWwgKiAoMSArIGRhdGEudGF4UmF0ZSlcbiAgICAgICAgICogICAgIH1cbiAgICAgICAgICogQHJlYWN0aXZlXG4gICAgICAgICAqL1xuICAgICAgICBmb3JtdWxhc186IG51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtOZW8uc3RhdGUuUHJvdmlkZXJ8bnVsbH0gcGFyZW50Xz1udWxsXG4gICAgICAgICAqIEByZWFjdGl2ZVxuICAgICAgICAgKi9cbiAgICAgICAgcGFyZW50XzogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgICAvKipcbiAgICAgICAgICogQSBjb2xsZWN0aW9uIG9mIE5lby5kYXRhLlN0b3JlIGluc3RhbmNlcyBtYW5hZ2VkIGJ5IHRoaXMgU3RhdGVQcm92aWRlci5cbiAgICAgICAgICogU3RvcmVzIGFyZSBkZWZpbmVkIGFzIGNvbmZpZyBvYmplY3RzIHdpdGggYSBgbW9kdWxlYCBwcm9wZXJ0eSBwb2ludGluZ1xuICAgICAgICAgKiB0byB0aGUgc3RvcmUgY2xhc3MsIHdoaWNoIHdpbGwgdGhlbiBiZSBpbnN0YW50aWF0ZWQgYnkgdGhlIGZyYW1ld29yay5cbiAgICAgICAgICogQG1lbWJlciB7T2JqZWN0fG51bGx9IHN0b3Jlc189bnVsbFxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKiAgICAgc3RvcmVzOiB7XG4gICAgICAgICAqICAgICAgICAgbXlVc2Vyczoge1xuICAgICAgICAgKiAgICAgICAgICAgICBtb2R1bGU6IE5lby5kYXRhLlN0b3JlLFxuICAgICAgICAgKiAgICAgICAgICAgICBtb2RlbCA6ICdNeUFwcC5tb2RlbC5Vc2VyJyxcbiAgICAgICAgICogICAgICAgICAgICAgZGF0YSAgOiBbe2lkOiAxLCBuYW1lOiAnSm9obid9LCB7aWQ6IDIsIG5hbWU6ICdEb2UnfV1cbiAgICAgICAgICogICAgICAgICB9LFxuICAgICAgICAgKiAgICAgICAgIG15Q3VzdG9tU3RvcmUxOiBNeUN1c3RvbVN0b3JlQ2xhc3MsXG4gICAgICAgICAqICAgICAgICAgbXlDdXN0b21TdG9yZTI6IHtcbiAgICAgICAgICogICAgICAgICAgICAgbW9kdWxlICA6IE15Q3VzdG9tU3RvcmVDbGFzcyxcbiAgICAgICAgICogICAgICAgICAgICAgYXV0b0xvYWQ6IHRydWVcbiAgICAgICAgICogICAgICAgICB9XG4gICAgICAgICAqICAgICB9XG4gICAgICAgICAqIEByZWFjdGl2ZVxuICAgICAgICAgKi9cbiAgICAgICAgc3RvcmVzXzogbnVsbFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXIge01hcH0gI2JpbmRpbmdFZmZlY3RzPW5ldyBNYXAoKVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgI2JpbmRpbmdFZmZlY3RzID0gbmV3IE1hcCgpXG4gICAgLyoqXG4gICAgICogQG1lbWJlciB7T2JqZWN0fSAjZGF0YUNvbmZpZ3M9e31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgICNkYXRhQ29uZmlncyA9IHt9XG4gICAgLyoqXG4gICAgICogQG1lbWJlciB7TWFwfSAjZm9ybXVsYUVmZmVjdHM9bmV3IE1hcCgpXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICAjZm9ybXVsYUVmZmVjdHMgPSBuZXcgTWFwKClcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3QoY29uZmlnKSB7XG4gICAgICAgIE5lby5pc1VzaW5nU3RhdGVQcm92aWRlcnMgPSB0cnVlO1xuICAgICAgICBzdXBlci5jb25zdHJ1Y3QoY29uZmlnKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJlZCBhZnRlciB0aGUgZGF0YSBjb25maWcgZ290IGNoYW5nZWQuXG4gICAgICogVGhpcyBtZXRob2QgaW5pdGlhbGl6ZXMgdGhlIGludGVybmFsICNkYXRhQ29uZmlncyBtYXAsIGNvbnZlcnRpbmcgZWFjaFxuICAgICAqIHBsYWluIGRhdGEgcHJvcGVydHkgaW50byBhIHJlYWN0aXZlIE5lby5jb3JlLkNvbmZpZyBpbnN0YW5jZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdHxudWxsfSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fG51bGx9IG9sZFZhbHVlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGFmdGVyU2V0RGF0YSh2YWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgdmFsdWUgJiYgdGhpcy5wcm9jZXNzRGF0YU9iamVjdCh2YWx1ZSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgYWZ0ZXIgdGhlIGZvcm11bGFzIGNvbmZpZyBnb3QgY2hhbmdlZC5cbiAgICAgKiBUaGlzIG1ldGhvZCBzZXRzIHVwIHJlYWN0aXZlIGVmZmVjdHMgZm9yIGVhY2ggZGVmaW5lZCBmb3JtdWxhLlxuICAgICAqIEVhY2ggZm9ybXVsYSBmdW5jdGlvbiByZWNlaXZlcyB0aGUgaGllcmFyY2hpY2FsIGRhdGEgcHJveHksIGFsbG93aW5nIGltcGxpY2l0IGRlcGVuZGVuY3kgdHJhY2tpbmcuXG4gICAgICogQHBhcmFtIHtPYmplY3R8bnVsbH0gdmFsdWUgVGhlIG5ldyBmb3JtdWxhcyBjb25maWd1cmF0aW9uLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fG51bGx9IG9sZFZhbHVlIFRoZSBvbGQgZm9ybXVsYXMgY29uZmlndXJhdGlvbi5cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgYWZ0ZXJTZXRGb3JtdWxhcyh2YWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgY29uc3QgbWUgPSB0aGlzO1xuXG4gICAgICAgIC8vIERlc3Ryb3kgb2xkIGZvcm11bGEgZWZmZWN0cyB0byBwcmV2ZW50IG1lbW9yeSBsZWFrcyBhbmQgc3RhbGUgY2FsY3VsYXRpb25zLlxuICAgICAgICBtZS4jZm9ybXVsYUVmZmVjdHMuZm9yRWFjaChlZmZlY3QgPT4gZWZmZWN0LmRlc3Ryb3koKSk7XG4gICAgICAgIG1lLiNmb3JtdWxhRWZmZWN0cy5jbGVhcigpO1xuXG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgT2JqZWN0LmVudHJpZXModmFsdWUpLmZvckVhY2goKFtmb3JtdWxhS2V5LCBmb3JtdWxhRm5dKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IGxhenkgRWZmZWN0LiBJdCB3aWxsIG5vdCBydW4gdW50aWwgZXhwbGljaXRseSB0b2xkIHRvLlxuICAgICAgICAgICAgICAgIGNvbnN0IGVmZmVjdCA9IG5ldyBFZmZlY3Qoe1xuICAgICAgICAgICAgICAgICAgICBmbjogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWVyYXJjaGljYWxEYXRhID0gbWUuZ2V0SGllcmFyY2h5RGF0YSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCAgICAgICAgICAgPSBmb3JtdWxhRm4oaGllcmFyY2hpY2FsRGF0YSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIG1lLnNldERhdGEoZm9ybXVsYUtleSwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgbGF6eTogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgbWUuI2Zvcm11bGFFZmZlY3RzLnNldChmb3JtdWxhS2V5LCBlZmZlY3QpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIHdoZW4gYWNjZXNzaW5nIHRoZSBkYXRhIGNvbmZpZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBiZWZvcmVHZXREYXRhKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEhpZXJhcmNoeURhdGEoKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJlZCBiZWZvcmUgdGhlIHN0b3JlcyBjb25maWcgZ2V0cyBjaGFuZ2VkLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fG51bGx9IHZhbHVlXG4gICAgICogQHBhcmFtIHtPYmplY3R8bnVsbH0gb2xkVmFsdWVcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fG51bGx9XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGJlZm9yZVNldFN0b3Jlcyh2YWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICBsZXQgbWUgPSB0aGlzO1xuXG4gICAgICAgICAgICBPYmplY3QuZW50cmllcyh2YWx1ZSkuZm9yRWFjaCgoW2tleSwgc3RvcmVWYWx1ZV0pID0+IHtcbiAgICAgICAgICAgICAgICAvLyBzdXBwb3J0IG1hcHBpbmcgc3RyaW5nIGJhc2VkIGxpc3RlbmVycyBpbnRvIHRoZSBzdGF0ZVByb3ZpZGVyIGluc3RhbmNlXG4gICAgICAgICAgICAgICAgT2JqZWN0LmVudHJpZXMoc3RvcmVWYWx1ZS5saXN0ZW5lcnMgfHwge30pLmZvckVhY2goKFtsaXN0ZW5lcktleSwgbGlzdGVuZXJdKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIG1lLmJpbmRDYWxsYmFjayhsaXN0ZW5lciwgbGlzdGVuZXJLZXksIG1lLCBzdG9yZVZhbHVlLmxpc3RlbmVycylcbiAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgICAgdmFsdWVba2V5XSA9IENsYXNzU3lzdGVtVXRpbC5iZWZvcmVTZXRJbnN0YW5jZShzdG9yZVZhbHVlKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2YWx1ZVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgYmluZGluZyBmb3IgYSBjb21wb25lbnQncyBjb25maWcgdG8gYSBkYXRhIHByb3BlcnR5LlxuICAgICAqIFRoaXMgbm93IHVzZXMgdGhlIEVmZmVjdC1iYXNlZCByZWFjdGl2aXR5IHN5c3RlbS5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gY29tcG9uZW50SWRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gY29uZmlnS2V5IFRoZSBjb21wb25lbnQgY29uZmlnIHRvIGJpbmQgKGUuZy4sICd0ZXh0JykuXG4gICAgICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IGZvcm1hdHRlciBUaGUgZnVuY3Rpb24gdGhhdCBjb21wdXRlcyB0aGUgdmFsdWUuXG4gICAgICovXG4gICAgY3JlYXRlQmluZGluZyhjb21wb25lbnRJZCwgY29uZmlnS2V5LCBmb3JtYXR0ZXIpIHtcbiAgICAgICAgY29uc3RcbiAgICAgICAgICAgIG1lICAgICA9IHRoaXMsXG4gICAgICAgICAgICBlZmZlY3QgPSBuZXcgRWZmZWN0KCgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb21wb25lbnQgPSBOZW8uZ2V0KGNvbXBvbmVudElkKTtcblxuICAgICAgICAgICAgICAgIGlmIChjb21wb25lbnQgJiYgIWNvbXBvbmVudC5pc0Rlc3Ryb3llZCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdFxuICAgICAgICAgICAgICAgICAgICAgICAgaGllcmFyY2hpY2FsRGF0YSA9IG1lLmdldEhpZXJhcmNoeURhdGEoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlICAgICAgICAgPSBOZW8uaXNGdW5jdGlvbihmb3JtYXR0ZXIpID8gZm9ybWF0dGVyLmNhbGwobWUsIGhpZXJhcmNoaWNhbERhdGEpIDogaGllcmFyY2hpY2FsRGF0YVtmb3JtYXR0ZXJdO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC5fc2tpcFR3b1dheVB1c2ggPSBjb25maWdLZXk7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudFtjb25maWdLZXldID0gbmV3VmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBjb21wb25lbnQuX3NraXBUd29XYXlQdXNoXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgbWUuI2JpbmRpbmdFZmZlY3RzLnNldChjb21wb25lbnRJZCwgZWZmZWN0KTtcblxuICAgICAgICAvLyBUaGUgZWZmZWN0IG9ic2VydmVzIHRoZSBjb21wb25lbnQncyBkZXN0cnVjdGlvbiB0byBjbGVhbiBpdHNlbGYgdXAuXG4gICAgICAgIG1lLm9ic2VydmVDb25maWcoY29tcG9uZW50SWQsICdpc0Rlc3Ryb3lpbmcnLCAodmFsdWUpID0+IHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGVmZmVjdC5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgbWUuI2JpbmRpbmdFZmZlY3RzLmRlbGV0ZShjb21wb25lbnRJZClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gVGhlIGVmZmVjdCBpcyByZXR1cm5lZCB0byBiZSBtYW5hZ2VkIGJ5IHRoZSBjb21wb25lbnQuXG4gICAgICAgIHJldHVybiBlZmZlY3RcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQcm9jZXNzZXMgYSBjb21wb25lbnQncyBgYmluZGAgY29uZmlndXJhdGlvbiB0byBjcmVhdGUgcmVhY3RpdmUgYmluZGluZ3MuXG4gICAgICogSXQgZGlmZmVyZW50aWF0ZXMgYmV0d2VlbiBzdG9yZSBiaW5kaW5ncyBhbmQgZGF0YSBiaW5kaW5ncywgYW5kIHNldHMgdXAgdHdvLXdheSBiaW5kaW5nIGlmIHNwZWNpZmllZC5cbiAgICAgKiBAcGFyYW0ge05lby5jb21wb25lbnQuQmFzZX0gY29tcG9uZW50IFRoZSBjb21wb25lbnQgaW5zdGFuY2Ugd2hvc2UgYmluZGluZ3MgYXJlIHRvIGJlIGNyZWF0ZWQuXG4gICAgICovXG4gICAgY3JlYXRlQmluZGluZ3MoY29tcG9uZW50KSB7XG4gICAgICAgIGxldCBtZSAgICAgICAgICAgICAgID0gdGhpcyxcbiAgICAgICAgICAgIGhhc1R3b1dheUJpbmRpbmcgPSBmYWxzZTtcblxuICAgICAgICBPYmplY3QuZW50cmllcyhjb21wb25lbnQuYmluZCB8fCB7fSkuZm9yRWFjaCgoW2NvbmZpZ0tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBsZXQga2V5ID0gdmFsdWU7XG5cbiAgICAgICAgICAgIC8vIElmIHRoZSBiaW5kaW5nIHZhbHVlIGlzIGFuIG9iamVjdCwgaXQgbWlnaHQgY29udGFpbiBgdHdvV2F5YCBvciBhIHNwZWNpZmljIGBrZXlgLlxuICAgICAgICAgICAgaWYgKE5lby5pc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUudHdvV2F5KSB7XG4gICAgICAgICAgICAgICAgICAgIGhhc1R3b1dheUJpbmRpbmcgPSB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGtleSA9IHZhbHVlLmtleVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBEZXRlcm1pbmUgaWYgaXQncyBhIHN0b3JlIGJpbmRpbmcgb3IgYSBkYXRhIGJpbmRpbmcuXG4gICAgICAgICAgICBpZiAobWUuaXNTdG9yZVZhbHVlKGtleSkpIHtcbiAgICAgICAgICAgICAgICAvLyBGb3Igc3RvcmUgYmluZGluZ3MsIHJlc29sdmUgdGhlIHN0b3JlIGFuZCBhc3NpZ24gaXQgdG8gdGhlIGNvbXBvbmVudCBjb25maWcuXG4gICAgICAgICAgICAgICAgbWUucmVzb2x2ZVN0b3JlKGNvbXBvbmVudCwgY29uZmlnS2V5LCBrZXkuc3Vic3RyaW5nKDcpKSAvLyByZW1vdmUgdGhlIFwic3RvcmVzLlwiIHByZWZpeFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBGb3IgZGF0YSBiaW5kaW5ncywgY3JlYXRlIGFuIEVmZmVjdCB0byBrZWVwIHRoZSBjb21wb25lbnQgY29uZmlnIGluIHN5bmMgd2l0aCB0aGUgZGF0YS5cbiAgICAgICAgICAgICAgICBtZS5jcmVhdGVCaW5kaW5nKGNvbXBvbmVudC5pZCwgY29uZmlnS2V5LCBrZXksIHZhbHVlLnR3b1dheSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gTWFyayB0aGUgY29tcG9uZW50IGlmIGl0IGhhcyBhbnkgdHdvLXdheSBiaW5kaW5ncywgZm9yIGludGVybmFsIHRyYWNraW5nLlxuICAgICAgICBpZiAoaGFzVHdvV2F5QmluZGluZykge1xuICAgICAgICAgICAgY29tcG9uZW50W3R3b1dheUJpbmRpbmdTeW1ib2xdID0gdHJ1ZVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVzdHJveXMgdGhlIHN0YXRlIHByb3ZpZGVyIGFuZCBjbGVhbnMgdXAgYWxsIGFzc29jaWF0ZWQgZWZmZWN0cy5cbiAgICAgKi9cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBjb25zdCBtZSA9IHRoaXM7XG5cbiAgICAgICAgbWUuI2Zvcm11bGFFZmZlY3RzLmZvckVhY2goZWZmZWN0ID0+IGVmZmVjdC5kZXN0cm95KCkpO1xuICAgICAgICBtZS4jZm9ybXVsYUVmZmVjdHMuY2xlYXIoKTtcblxuICAgICAgICBtZS4jYmluZGluZ0VmZmVjdHMuZm9yRWFjaChlZmZlY3QgPT4gZWZmZWN0LmRlc3Ryb3koKSk7XG4gICAgICAgIG1lLiNiaW5kaW5nRWZmZWN0cy5jbGVhcigpO1xuXG4gICAgICAgIHN1cGVyLmRlc3Ryb3koKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlbmllbmNlIHNob3J0Y3V0XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtudHlwZV1cbiAgICAgKiBAcmV0dXJucyB7TmVvLmNvbnRyb2xsZXIuQ29tcG9uZW50fG51bGx9XG4gICAgICovXG4gICAgZ2V0Q29udHJvbGxlcihudHlwZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQuZ2V0Q29udHJvbGxlcihudHlwZSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBY2Nlc3MgdGhlIGNsb3Nlc3QgZGF0YSBwcm9wZXJ0eSBpbnNpZGUgdGhlIHBhcmVudCBjaGFpbi5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5XG4gICAgICogQHJldHVybnMgeyp9IHZhbHVlXG4gICAgICovXG4gICAgZ2V0RGF0YShrZXkpIHtcbiAgICAgICAgY29uc3Qgb3duZXJEZXRhaWxzID0gdGhpcy5nZXRPd25lck9mRGF0YVByb3BlcnR5KGtleSk7XG5cbiAgICAgICAgaWYgKG93bmVyRGV0YWlscykge1xuICAgICAgICAgICAgcmV0dXJuIG93bmVyRGV0YWlscy5vd25lci5nZXREYXRhQ29uZmlnKG93bmVyRGV0YWlscy5wcm9wZXJ0eU5hbWUpLmdldCgpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIHVuZGVybHlpbmcgY29yZS5Db25maWcgaW5zdGFuY2UgZm9yIGEgZ2l2ZW4gZGF0YSBwcm9wZXJ0eSBwYXRoLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwYXRoIFRoZSBmdWxsIHBhdGggb2YgdGhlIGRhdGEgcHJvcGVydHkgKGUuZy4sICd1c2VyLmZpcnN0bmFtZScpLlxuICAgICAqIEByZXR1cm5zIHtOZW8uY29yZS5Db25maWd8bnVsbH1cbiAgICAgKi9cbiAgICBnZXREYXRhQ29uZmlnKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI2RhdGFDb25maWdzW3BhdGhdIHx8IG51bGxcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBtZXJnZWQsIGhpZXJhcmNoaWNhbCBkYXRhIG9iamVjdCBhcyBhIHJlYWN0aXZlIFByb3h5LlxuICAgICAqIEByZXR1cm5zIHtQcm94eX1cbiAgICAgKi9cbiAgICBnZXRIaWVyYXJjaHlEYXRhKCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlSGllcmFyY2hpY2FsRGF0YVByb3h5KHRoaXMpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmluZHMgdGhlIHN0YXRlLlByb3ZpZGVyIGluc3RhbmNlIHRoYXQgb3ducyBhIHNwZWNpZmljIGRhdGEgcHJvcGVydHkuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHBhdGggVGhlIGZ1bGwgcGF0aCBvZiB0aGUgZGF0YSBwcm9wZXJ0eS5cbiAgICAgKiBAcmV0dXJucyB7e293bmVyOiBOZW8uc3RhdGUuUHJvdmlkZXIsIHByb3BlcnR5TmFtZTogU3RyaW5nfXxudWxsfVxuICAgICAqL1xuICAgIGdldE93bmVyT2ZEYXRhUHJvcGVydHkocGF0aCkge1xuICAgICAgICBsZXQgbWUgPSB0aGlzO1xuXG4gICAgICAgIGlmIChtZS4jZGF0YUNvbmZpZ3NbcGF0aF0pIHtcbiAgICAgICAgICAgIHJldHVybiB7b3duZXI6IG1lLCBwcm9wZXJ0eU5hbWU6IHBhdGh9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayBmb3IgcGFyZW50IG93bmVyc2hpcFxuICAgICAgICBjb25zdCBwYXJlbnQgPSBtZS5nZXRQYXJlbnQoKTtcbiAgICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIHBhcmVudC5nZXRPd25lck9mRGF0YVByb3BlcnR5KHBhdGgpXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgY2xvc2VzdCBzdGF0ZVByb3ZpZGVyIGluc2lkZSB0aGUgY29tcG9uZW50cyBwYXJlbnQgdHJlZVxuICAgICAqIEByZXR1cm5zIHtOZW8uc3RhdGUuUHJvdmlkZXJ8bnVsbH1cbiAgICAgKi9cbiAgICBnZXRQYXJlbnQoKSB7XG4gICAgICAgIGxldCBtZSA9IHRoaXM7XG5cbiAgICAgICAgLy8gQWNjZXNzIHRoZSBpbnRlcm5hbCB2YWx1ZSBvZiB0aGUgcGFyZW50XyBjb25maWcgZGlyZWN0bHkuXG4gICAgICAgIC8vIFRoaXMgYXZvaWRzIHJlY3Vyc2l2ZSBjYWxscyB0byB0aGUgZ2V0dGVyLlxuICAgICAgICBpZiAobWUuX3BhcmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIG1lLl9wYXJlbnRcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIG5vIGV4cGxpY2l0IHBhcmVudCBpcyBzZXQsIHRyeSB0byBmaW5kIGl0IGR5bmFtaWNhbGx5IHZpYSB0aGUgY29tcG9uZW50LlxuICAgICAgICAvLyBFbnN1cmUgdGhpcy5jb21wb25lbnQgZXhpc3RzIGJlZm9yZSB0cnlpbmcgdG8gYWNjZXNzIGl0cyBwYXJlbnQuXG4gICAgICAgIGlmIChtZS5jb21wb25lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBtZS5jb21wb25lbnQucGFyZW50Py5nZXRTdGF0ZVByb3ZpZGVyKCkgfHwgbnVsbFxuICAgICAgICB9XG5cbiAgICAgICAgLy8gTm8gZXhwbGljaXQgcGFyZW50IGFuZCBubyBjb21wb25lbnQgdG8gZGVyaXZlIGl0IGZyb20uXG4gICAgICAgIHJldHVybiBudWxsXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWNjZXNzIHRoZSBjbG9zZXN0IHN0b3JlIGluc2lkZSB0aGUgVk0gcGFyZW50IGNoYWluLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBrZXlcbiAgICAgKiBAcGFyYW0ge05lby5zdGF0ZS5Qcm92aWRlcn0gb3JpZ2luU3RhdGVQcm92aWRlcj10aGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG4gICAgICogQHJldHVybnMge05lby5kYXRhLlN0b3JlfVxuICAgICAqL1xuICAgIGdldFN0b3JlKGtleSwgb3JpZ2luU3RhdGVQcm92aWRlcj10aGlzKSB7XG4gICAgICAgIGxldCBtZSAgICAgICA9IHRoaXMsXG4gICAgICAgICAgICB7c3RvcmVzfSA9IG1lLFxuICAgICAgICAgICAgcGFyZW50U3RhdGVQcm92aWRlcjtcblxuICAgICAgICBpZiAoc3RvcmVzPy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RvcmVzW2tleV1cbiAgICAgICAgfVxuXG4gICAgICAgIHBhcmVudFN0YXRlUHJvdmlkZXIgPSBtZS5nZXRQYXJlbnQoKTtcblxuICAgICAgICBpZiAoIXBhcmVudFN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYHN0b3JlICcke2tleX0nIG5vdCBmb3VuZCBpbnNpZGUgdGhpcyBzdGF0ZVByb3ZpZGVyIG9yIHBhcmVudHMuYCwgb3JpZ2luU3RhdGVQcm92aWRlcilcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwYXJlbnRTdGF0ZVByb3ZpZGVyLmdldFN0b3JlKGtleSwgb3JpZ2luU3RhdGVQcm92aWRlcilcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYW55IGRhdGEgcHJvcGVydHkgaW4gdGhlIGhpZXJhcmNoeSBzdGFydHMgd2l0aCB0aGUgZ2l2ZW4gcGF0aC5cbiAgICAgKiBUaGlzIGlzIHVzZWQgYnkgdGhlIEhpZXJhcmNoaWNhbERhdGFQcm94eSB0byBkZXRlcm1pbmUgaWYgaXQgc2hvdWxkIHJldHVybiBhIG5lc3RlZCBwcm94eS5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjayAoZS5nLiwgJ3VzZXInKS5cbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBoYXNOZXN0ZWREYXRhU3RhcnRpbmdXaXRoKHBhdGgpIHtcbiAgICAgICAgY29uc3QgcGF0aFdpdGhEb3QgPSBgJHtwYXRofS5gO1xuXG4gICAgICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLiNkYXRhQ29uZmlncykuc29tZShrZXkgPT4ga2V5LnN0YXJ0c1dpdGgocGF0aFdpdGhEb3QpKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmdldFBhcmVudCgpPy5oYXNOZXN0ZWREYXRhU3RhcnRpbmdXaXRoKHBhdGgpIHx8IGZhbHNlXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgdG9wLWxldmVsIGRhdGEga2V5cyBmb3IgYSBnaXZlbiBwYXRoIHdpdGhpbiB0aGlzIHByb3ZpZGVyJ3MgZGF0YS5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBnZXQga2V5cyBmb3IgKGUuZy4sICd1c2VyLmFkZHJlc3MnKS5cbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nW119XG4gICAgICovXG4gICAgZ2V0VG9wTGV2ZWxEYXRhS2V5cyhwYXRoKSB7XG4gICAgICAgIGNvbnN0XG4gICAgICAgICAgICBrZXlzICAgICAgID0gbmV3IFNldCgpLFxuICAgICAgICAgICAgcGF0aFByZWZpeCA9IHBhdGggPyBgJHtwYXRofS5gIDogJyc7XG5cbiAgICAgICAgZm9yIChjb25zdCBmdWxsUGF0aCBpbiB0aGlzLiNkYXRhQ29uZmlncykge1xuICAgICAgICAgICAgaWYgKGZ1bGxQYXRoLnN0YXJ0c1dpdGgocGF0aFByZWZpeCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdFxuICAgICAgICAgICAgICAgICAgICByZWxhdGl2ZVBhdGggPSBmdWxsUGF0aC5zdWJzdHJpbmcocGF0aFByZWZpeC5sZW5ndGgpLFxuICAgICAgICAgICAgICAgICAgICB0b3BMZXZlbEtleSAgPSByZWxhdGl2ZVBhdGguc3BsaXQoJy4nKVswXTtcblxuICAgICAgICAgICAgICAgIGlmICh0b3BMZXZlbEtleSkge1xuICAgICAgICAgICAgICAgICAgICBrZXlzLmFkZCh0b3BMZXZlbEtleSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbShrZXlzKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgaXMgdGhlIGNvcmUgbWV0aG9kIGZvciBzZXR0aW5nIGRhdGEsIHByb3ZpZGluZyBhIHNpbmdsZSBlbnRyeSBwb2ludCBmb3IgYWxsIGRhdGEgbW9kaWZpY2F0aW9ucy5cbiAgICAgKiBJdCBoYW5kbGVzIG11bHRpcGxlIHNjZW5hcmlvczpcbiAgICAgKiAxLiAgKipPYmplY3QtYmFzZWQgdXBkYXRlczoqKiBJZiBga2V5YCBpcyBhbiBvYmplY3QsIGl0IHJlY3Vyc2l2ZWx5IGNhbGxzIGl0c2VsZiBmb3IgZWFjaCBrZXktdmFsdWUgcGFpci5cbiAgICAgKiAyLiAgKipEYXRhIFJlY29yZHM6KiogSWYgYHZhbHVlYCBpcyBhIGBOZW8uZGF0YS5SZWNvcmRgLCBpdCBpcyB0cmVhdGVkIGFzIGFuIGF0b21pYyB2YWx1ZSBhbmQgc2V0IGRpcmVjdGx5LlxuICAgICAqIDMuICAqKkJ1YmJsaW5nIFJlYWN0aXZpdHk6KiogRm9yIGEgZ2l2ZW4ga2V5IChlLmcuLCAndXNlci5uYW1lJyksIGl0IHNldHMgdGhlIGxlYWYgdmFsdWUgYW5kIHRoZW4gXCJidWJibGVzIHVwXCJcbiAgICAgKiAgICAgdGhlIGNoYW5nZSwgY3JlYXRpbmcgbmV3IHBhcmVudCBvYmplY3RzIChlLmcuLCAndXNlcicpIHRvIGVuc3VyZSB0aGF0IGVmZmVjdHMgZGVwZW5kaW5nIG9uIGFueSBwYXJ0XG4gICAgICogICAgIG9mIHRoZSBwYXRoIGFyZSB0cmlnZ2VyZWQuXG4gICAgICpcbiAgICAgKiBBbGwgdXBkYXRlcyBhcmUgYmF0Y2hlZCBieSB0aGUgcHVibGljIGBzZXREYXRhYCBtZXRob2RzIHRvIGVuc3VyZSBlZmZlY3RzIHJ1biBvbmx5IG9uY2UuXG4gICAgICogVXNlIGBzZXREYXRhKClgIG9yIGBzZXREYXRhQXRTYW1lTGV2ZWwoKWAgaW5zdGVhZCBvZiBjYWxsaW5nIHRoaXMgbWV0aG9kIGRpcmVjdGx5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBrZXkgVGhlIHByb3BlcnR5IHRvIHNldCwgb3IgYW4gb2JqZWN0IG9mIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSBuZXcgdmFsdWUuXG4gICAgICogQHBhcmFtIHtOZW8uc3RhdGUuUHJvdmlkZXJ9IFtvcmlnaW5TdGF0ZVByb3ZpZGVyXSBUaGUgcHJvdmlkZXIgdG8gc3RhcnQgdGhlIHNlYXJjaCBmcm9tIGZvciBoaWVyYXJjaGljYWwgdXBkYXRlcy5cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgaW50ZXJuYWxTZXREYXRhKGtleSwgdmFsdWUsIG9yaWdpblN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgY29uc3QgbWUgPSB0aGlzO1xuXG4gICAgICAgIC8vIElmIHRoZSB2YWx1ZSBpcyBhIE5lby5kYXRhLlJlY29yZCwgdHJlYXQgaXQgYXMgYW4gYXRvbWljIHZhbHVlXG4gICAgICAgIC8vIGFuZCBzZXQgaXQgZGlyZWN0bHkgd2l0aG91dCBmdXJ0aGVyIHJlY3Vyc2l2ZSBwcm9jZXNzaW5nIG9mIGl0cyBwcm9wZXJ0aWVzLlxuICAgICAgICBpZiAoTmVvLmlzUmVjb3JkKHZhbHVlKSkge1xuICAgICAgICAgICAgY29uc3RcbiAgICAgICAgICAgICAgICBvd25lckRldGFpbHMgICA9IG1lLmdldE93bmVyT2ZEYXRhUHJvcGVydHkoa2V5KSxcbiAgICAgICAgICAgICAgICB0YXJnZXRQcm92aWRlciA9IG93bmVyRGV0YWlscyA/IG93bmVyRGV0YWlscy5vd25lciA6IChvcmlnaW5TdGF0ZVByb3ZpZGVyIHx8IG1lKTtcblxuICAgICAgICAgICAgbWUuI3NldENvbmZpZ1ZhbHVlKHRhcmdldFByb3ZpZGVyLCBrZXksIHZhbHVlLCBudWxsKTtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKE5lby5pc09iamVjdChrZXkpKSB7XG4gICAgICAgICAgICBPYmplY3QuZW50cmllcyhrZXkpLmZvckVhY2goKFtkYXRhS2V5LCBkYXRhVmFsdWVdKSA9PiB7XG4gICAgICAgICAgICAgICAgbWUuaW50ZXJuYWxTZXREYXRhKGRhdGFLZXksIGRhdGFWYWx1ZSwgb3JpZ2luU3RhdGVQcm92aWRlcilcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdFxuICAgICAgICAgICAgb3duZXJEZXRhaWxzICAgPSBtZS5nZXRPd25lck9mRGF0YVByb3BlcnR5KGtleSksXG4gICAgICAgICAgICB0YXJnZXRQcm92aWRlciA9IG93bmVyRGV0YWlscyA/IG93bmVyRGV0YWlscy5vd25lciA6IChvcmlnaW5TdGF0ZVByb3ZpZGVyIHx8IG1lKTtcblxuICAgICAgICBtZS4jc2V0Q29uZmlnVmFsdWUodGFyZ2V0UHJvdmlkZXIsIGtleSwgdmFsdWUsIG51bGwpO1xuXG4gICAgICAgIC8vIEJ1YmJsZSB1cCB0aGUgY2hhbmdlIHRvIHBhcmVudCBjb25maWdzIHRvIHRyaWdnZXIgdGhlaXIgZWZmZWN0c1xuICAgICAgICBsZXQgcGF0aCAgICAgICAgPSBrZXksXG4gICAgICAgICAgICBsYXRlc3RWYWx1ZSA9IHZhbHVlO1xuXG4gICAgICAgIHdoaWxlIChwYXRoLmluY2x1ZGVzKCcuJykpIHtcbiAgICAgICAgICAgIGNvbnN0IGxlYWZLZXkgPSBwYXRoLnNwbGl0KCcuJykucG9wKCk7XG4gICAgICAgICAgICBwYXRoID0gcGF0aC5zdWJzdHJpbmcoMCwgcGF0aC5sYXN0SW5kZXhPZignLicpKTtcblxuICAgICAgICAgICAgY29uc3QgcGFyZW50Q29uZmlnID0gdGFyZ2V0UHJvdmlkZXIuZ2V0RGF0YUNvbmZpZyhwYXRoKTtcblxuICAgICAgICAgICAgaWYgKHBhcmVudENvbmZpZykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG9sZFBhcmVudFZhbHVlID0gcGFyZW50Q29uZmlnLmdldCgpO1xuICAgICAgICAgICAgICAgIGlmIChOZW8uaXNPYmplY3Qob2xkUGFyZW50VmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld1BhcmVudFZhbHVlID0geyAuLi5vbGRQYXJlbnRWYWx1ZSwgW2xlYWZLZXldOiBsYXRlc3RWYWx1ZSB9O1xuICAgICAgICAgICAgICAgICAgICBwYXJlbnRDb25maWcuc2V0KG5ld1BhcmVudFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgbGF0ZXN0VmFsdWUgPSBuZXdQYXJlbnRWYWx1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBicmVhayAvLyBTdG9wIGlmIHBhcmVudCBpcyBub3QgYW4gb2JqZWN0XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBicmVhayAvLyBTdG9wIGlmIHBhcmVudCBjb25maWcgZG9lcyBub3QgZXhpc3RcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEludGVybmFsIGNvbnZlbmllbmNlIG1ldGhvZCB0byBjaGVjayBpZiBhIGJpbmRpbmcgdmFsdWUgaXMgc3VwcG9zZWQgdG8gbWF0Y2ggYSBzdG9yZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZVxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqL1xuICAgIGlzU3RvcmVWYWx1ZSh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gTmVvLmlzU3RyaW5nKHZhbHVlKSAmJiB2YWx1ZS5zdGFydHNXaXRoKCdzdG9yZXMuJylcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGNhbGxlZCBhZnRlciBhbGwgY29uc3RydWN0b3JzICYgY29uZmlncyBhcmUgYXBwbGllZC5cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgb25Db25zdHJ1Y3RlZCgpIHtcbiAgICAgICAgc3VwZXIub25Db25zdHJ1Y3RlZCgpO1xuXG4gICAgICAgIC8vIEFmdGVyIHRoZSBwcm92aWRlciBpcyBmdWxseSBjb25zdHJ1Y3RlZCBhbmQgaW5pdGlhbCBkYXRhIGlzIHNldCxcbiAgICAgICAgLy8gcnVuIHRoZSBmb3JtdWxhIGVmZmVjdHMgZm9yIHRoZSBmaXJzdCB0aW1lIHRvIGNvbXB1dGUgdGhlaXIgaW5pdGlhbCB2YWx1ZXMuXG4gICAgICAgIHRoaXMuI2Zvcm11bGFFZmZlY3RzLmZvckVhY2goZWZmZWN0ID0+IGVmZmVjdC5ydW4oKSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5XG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7Kn0gb2xkVmFsdWVcbiAgICAgKi9cbiAgICBvbkRhdGFQcm9wZXJ0eUNoYW5nZShrZXksIHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAvLyBDYW4gYmUgb3ZlcnJpZGRlbiBieSBzdWJjbGFzc2VzXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVjdXJzaXZlbHkgcHJvY2Vzc2VzIGEgZGF0YSBvYmplY3QsIGNyZWF0aW5nIG9yIHVwZGF0aW5nIE5lby5jb3JlLkNvbmZpZyBpbnN0YW5jZXNcbiAgICAgKiBmb3IgZWFjaCBwcm9wZXJ0eSBhbmQgc3RvcmluZyB0aGVtIGluIHRoZSAjZGF0YUNvbmZpZ3MgbWFwLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmogVGhlIGRhdGEgb2JqZWN0IHRvIHByb2Nlc3MuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtwYXRoPScnXSBUaGUgY3VycmVudCBwYXRoIHByZWZpeCBmb3IgbmVzdGVkIG9iamVjdHMuXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHByb2Nlc3NEYXRhT2JqZWN0KG9iaiwgcGF0aCA9ICcnKSB7XG4gICAgICAgIGxldCBtZSA9IHRoaXM7XG5cbiAgICAgICAgT2JqZWN0LmVudHJpZXMob2JqKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZ1bGxQYXRoID0gcGF0aCA/IGAke3BhdGh9LiR7a2V5fWAgOiBrZXk7XG5cbiAgICAgICAgICAgIC8vIEVuc3VyZSBhIENvbmZpZyBpbnN0YW5jZSBleGlzdHMgZm9yIHRoZSBjdXJyZW50IGZ1bGxQYXRoXG4gICAgICAgICAgICBpZiAobWUuI2RhdGFDb25maWdzW2Z1bGxQYXRoXSkge1xuICAgICAgICAgICAgICAgIG1lLiNkYXRhQ29uZmlnc1tmdWxsUGF0aF0uc2V0KHZhbHVlKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtZS4jZGF0YUNvbmZpZ3NbZnVsbFBhdGhdID0gbmV3IENvbmZpZyh2YWx1ZSlcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgdGhlIHZhbHVlIGlzIGEgcGxhaW4gb2JqZWN0LCByZWN1cnNpdmVseSBwcm9jZXNzIGl0cyBwcm9wZXJ0aWVzXG4gICAgICAgICAgICBpZiAoTmVvLnR5cGVPZih2YWx1ZSkgPT09ICdPYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgbWUucHJvY2Vzc0RhdGFPYmplY3QodmFsdWUsIGZ1bGxQYXRoKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge05lby5jb21wb25lbnQuQmFzZX0gY29tcG9uZW50XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGNvbmZpZ05hbWVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gc3RvcmVOYW1lXG4gICAgICovXG4gICAgcmVzb2x2ZVN0b3JlKGNvbXBvbmVudCwgY29uZmlnTmFtZSwgc3RvcmVOYW1lKSB7XG4gICAgICAgIGxldCBzdG9yZSA9IHRoaXMuZ2V0U3RvcmUoc3RvcmVOYW1lKTtcblxuICAgICAgICBpZiAoY29tcG9uZW50W2NvbmZpZ05hbWVdICE9PSBzdG9yZSkge1xuICAgICAgICAgICAgY29tcG9uZW50W2NvbmZpZ05hbWVdID0gc3RvcmVcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhlbHBlciBmdW5jdGlvbiB0byBzZXQgYSBjb25maWcgdmFsdWUgYW5kIHRyaWdnZXIgcmVhY3Rpdml0eS5cbiAgICAgKiBUaGlzIG1ldGhvZCBjcmVhdGVzIGEgbmV3IENvbmZpZyBpbnN0YW5jZSBpZiBvbmUgZG9lc24ndCBleGlzdCBmb3IgdGhlIGdpdmVuIHBhdGgsXG4gICAgICogb3IgdXBkYXRlcyBhbiBleGlzdGluZyBvbmUuIEl0IGFsc28gdHJpZ2dlcnMgYmluZGluZyBlZmZlY3RzIGFuZCBjYWxscyBvbkRhdGFQcm9wZXJ0eUNoYW5nZS5cbiAgICAgKiBAcGFyYW0ge05lby5zdGF0ZS5Qcm92aWRlcn0gcHJvdmlkZXIgVGhlIFN0YXRlUHJvdmlkZXIgaW5zdGFuY2Ugb3duaW5nIHRoZSBjb25maWcuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHBhdGggVGhlIGZ1bGwgcGF0aCBvZiB0aGUgZGF0YSBwcm9wZXJ0eSAoZS5nLiwgJ3VzZXIuZmlyc3RuYW1lJykuXG4gICAgICogQHBhcmFtIHsqfSBuZXdWYWx1ZSBUaGUgbmV3IHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IG9sZFZhbCBUaGUgb2xkIHZhbHVlIChvcHRpb25hbCwgdXNlZCBmb3IgaW5pdGlhbCBzZXR1cCkuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICAjc2V0Q29uZmlnVmFsdWUocHJvdmlkZXIsIHBhdGgsIG5ld1ZhbHVlLCBvbGRWYWwpIHtcbiAgICAgICAgbGV0IGN1cnJlbnRDb25maWcgPSBwcm92aWRlci5nZXREYXRhQ29uZmlnKHBhdGgpLFxuICAgICAgICAgICAgb2xkVmFsdWUgICAgICA9IG9sZFZhbDtcblxuICAgICAgICBpZiAoY3VycmVudENvbmZpZykge1xuICAgICAgICAgICAgb2xkVmFsdWUgPSBjdXJyZW50Q29uZmlnLmdldCgpO1xuICAgICAgICAgICAgY3VycmVudENvbmZpZy5zZXQobmV3VmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3VycmVudENvbmZpZyA9IG5ldyBDb25maWcobmV3VmFsdWUpO1xuICAgICAgICAgICAgcHJvdmlkZXIuI2RhdGFDb25maWdzW3BhdGhdID0gY3VycmVudENvbmZpZztcbiAgICAgICAgICAgIC8vIFRyaWdnZXIgYWxsIGJpbmRpbmcgZWZmZWN0cyB0byByZS1ldmFsdWF0ZSB0aGVpciBkZXBlbmRlbmNpZXNcbiAgICAgICAgICAgIHByb3ZpZGVyLiNiaW5kaW5nRWZmZWN0cy5mb3JFYWNoKGVmZmVjdCA9PiBlZmZlY3QucnVuKCkpXG4gICAgICAgIH1cblxuICAgICAgICAvLyBOb3RpZnkgc3Vic2NyaWJlcnMgb2YgdGhlIGRhdGEgcHJvcGVydHkgY2hhbmdlLlxuICAgICAgICBwcm92aWRlci5vbkRhdGFQcm9wZXJ0eUNoYW5nZShwYXRoLCBuZXdWYWx1ZSwgb2xkVmFsdWUpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG1ldGhvZCB3aWxsIGFzc2lnbiBhbGwgdmFsdWVzIHRvIHRoZSBjbG9zZXN0IHN0YXRlUHJvdmlkZXIgd2hlcmUgaXQgZmluZHMgYW4gZXhpc3Rpbmcga2V5LlxuICAgICAqIEluIGNhc2Ugbm8gbWF0Y2ggaXMgZm91bmQgaW5zaWRlIHRoZSBwYXJlbnQgY2hhaW4sIGEgbmV3IGRhdGEgcHJvcGVydHkgd2lsbCBnZXQgZ2VuZXJhdGVkLlxuICAgICAqXG4gICAgICogQWxsIHVwZGF0ZXMgd2l0aGluIGEgc2luZ2xlIGNhbGwgYXJlIGJhdGNoZWQgdG8gZW5zdXJlIHRoYXQgcmVhY3RpdmUgZWZmZWN0cyAoYmluZGluZ3MgYW5kIGZvcm11bGFzKVxuICAgICAqIGFyZSBydW4gb25seSBvbmNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBrZXlcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAgICovXG4gICAgc2V0RGF0YShrZXksIHZhbHVlKSB7XG4gICAgICAgIEVmZmVjdEJhdGNoTWFuYWdlci5zdGFydEJhdGNoKCk7XG4gICAgICAgIHRoaXMuaW50ZXJuYWxTZXREYXRhKGtleSwgdmFsdWUsIHRoaXMpO1xuICAgICAgICBFZmZlY3RCYXRjaE1hbmFnZXIuZW5kQmF0Y2goKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZSB0aGlzIG1ldGhvZCBpbnN0ZWFkIG9mIHNldERhdGEoKSBpbiBjYXNlIHlvdSB3YW50IHRvIGVuZm9yY2VcbiAgICAgKiBzZXR0aW5nIGFsbCBrZXlzIG9uIHRoaXMgaW5zdGFuY2UgaW5zdGVhZCBvZiBsb29raW5nIGZvciBtYXRjaGVzIGluc2lkZSBwYXJlbnQgc3RhdGVQcm92aWRlcnMuXG4gICAgICpcbiAgICAgKiBBbGwgdXBkYXRlcyB3aXRoaW4gYSBzaW5nbGUgY2FsbCBhcmUgYmF0Y2hlZCB0byBlbnN1cmUgdGhhdCByZWFjdGl2ZSBlZmZlY3RzIChiaW5kaW5ncyBhbmQgZm9ybXVsYXMpXG4gICAgICogYXJlIHJ1biBvbmx5IG9uY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGtleVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICAgKi9cbiAgICBzZXREYXRhQXRTYW1lTGV2ZWwoa2V5LCB2YWx1ZSkge1xuICAgICAgICBFZmZlY3RCYXRjaE1hbmFnZXIuc3RhcnRCYXRjaCgpO1xuICAgICAgICB0aGlzLmludGVybmFsU2V0RGF0YShrZXksIHZhbHVlKTtcbiAgICAgICAgRWZmZWN0QmF0Y2hNYW5hZ2VyLmVuZEJhdGNoKClcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE5lby5zZXR1cENsYXNzKFByb3ZpZGVyKTtcbiIsImltcG9ydCBFZmZlY3RNYW5hZ2VyIGZyb20gJy4uL2NvcmUvRWZmZWN0TWFuYWdlci5tanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXN0ZWQgUHJveHkgdGhhdCByZXByZXNlbnRzIGEgbGV2ZWwgaW4gdGhlIGhpZXJhcmNoaWNhbCBkYXRhIHN0cnVjdHVyZS5cbiAqIEBwYXJhbSB7TmVvLnN0YXRlLlByb3ZpZGVyfSByb290UHJvdmlkZXIgVGhlIHRvcC1sZXZlbCBwcm92aWRlciB0byBzdGFydCBzZWFyY2hlcyBmcm9tLlxuICogQHBhcmFtIHtTdHJpbmd9IHBhdGggVGhlIGN1cnJlbnQgcGF0aCBvZiB0aGlzIHByb3h5IGxldmVsIChlLmcuLCAndXNlcicgZm9yIGRhdGEudXNlcikuXG4gKiBAcmV0dXJucyB7UHJveHl8bnVsbH1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZU5lc3RlZFByb3h5KHJvb3RQcm92aWRlciwgcGF0aCkge1xuICAgIC8vIFRoZSB0YXJnZXQgb2JqZWN0IGZvciB0aGUgcHJveHkgY2FuIGJlIGVtcHR5IGJlY2F1c2UgYWxsIGxvb2t1cHMgYXJlIGR5bmFtaWMuXG4gICAgY29uc3QgdGFyZ2V0ID0ge307XG5cbiAgICByZXR1cm4gbmV3IFByb3h5KHRhcmdldCwge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGdldCB0cmFwIGZvciB0aGUgcHJveHkuIFRoaXMgaXMgd2hlcmUgdGhlIG1hZ2ljIGhhcHBlbnMuXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjdXJyZW50VGFyZ2V0IFRoZSBwcm94eSdzIHRhcmdldCBvYmplY3QuXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfFN5bWJvbH0gcHJvcGVydHkgVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IGJlaW5nIGFjY2Vzc2VkLlxuICAgICAgICAgKiBAcmV0dXJucyB7Kn0gVGhlIHZhbHVlIG9mIHRoZSBwcm9wZXJ0eSBvciBhIG5ldyBwcm94eSBmb3IgbmVzdGVkIGFjY2Vzcy5cbiAgICAgICAgICovXG4gICAgICAgIGdldChjdXJyZW50VGFyZ2V0LCBwcm9wZXJ0eSkge1xuICAgICAgICAgICAgLy8gSGFuZGxlIGludGVybmFsIHByb3BlcnRpZXMgdGhhdCBtaWdodCBiZSBzZXQgZGlyZWN0bHkgb24gdGhlIHByb3h5J3MgdGFyZ2V0XG4gICAgICAgICAgICAvLyBvciBhcmUgZXhwZWN0ZWQgYnkgdGhlIGVudmlyb25tZW50IChsaWtlIFNpZXN0YSdzIF9fUkVGQURSX18pLlxuICAgICAgICAgICAgaWYgKHR5cGVvZiBwcm9wZXJ0eSA9PT0gJ3N5bWJvbCcgfHwgcHJvcGVydHkgPT09ICdfX1JFRkFEUl9fJyB8fCBwcm9wZXJ0eSA9PT0gJ2luc3BlY3QnIHx8IHByb3BlcnR5ID09PSAndGhlbicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5nZXQoY3VycmVudFRhcmdldCwgcHJvcGVydHkpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIE9ubHkgYWxsb3cgc3RyaW5nIG9yIG51bWJlciBwcm9wZXJ0aWVzIHRvIHByb2NlZWQgYXMgZGF0YSBwYXRocy5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgcHJvcGVydHkgIT09ICdzdHJpbmcnICYmIHR5cGVvZiBwcm9wZXJ0eSAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkOyAvLyBGb3Igb3RoZXIgbm9uLXN0cmluZy9ub24tbnVtYmVyIHByb3BlcnRpZXMsIHJldHVybiB1bmRlZmluZWQuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNwZWNpYWwgaGFuZGxpbmcgZm9yIHRoZSAnc3RvcmVzJyBwcm9wZXJ0eSBhdCB0aGUgcm9vdCBsZXZlbFxuICAgICAgICAgICAgaWYgKHBhdGggPT09ICcnICYmIHByb3BlcnR5ID09PSAnc3RvcmVzJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJveHkoe30sIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0KHRhcmdldCwgc3RvcmVOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHN0b3JlTmFtZSA9PT0gJ3N5bWJvbCcgfHwgc3RvcmVOYW1lID09PSAnX19SRUZBRFJfXycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5nZXQodGFyZ2V0LCBzdG9yZU5hbWUpXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBEZWxlZ2F0ZSB0byB0aGUgU3RhdGVQcm92aWRlcidzIGdldFN0b3JlIG1ldGhvZCBmb3IgaGllcmFyY2hpY2FsIHJlc29sdXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFjY2Vzc2luZyBzdG9yZS5jb3VudCBsYXRlciB3aWxsIHJlZ2lzdGVyIHRoZSBkZXBlbmRlbmN5IHZpYSB0aGUgQ29uZmlnIHN5c3RlbVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJvb3RQcm92aWRlci5nZXRTdG9yZShzdG9yZU5hbWUpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBmdWxsUGF0aCA9IHBhdGggPyBgJHtwYXRofS4ke3Byb3BlcnR5fWAgOiBwcm9wZXJ0eTtcblxuICAgICAgICAgICAgLy8gMS4gQ2hlY2sgaWYgdGhlIGZ1bGwgcGF0aCBjb3JyZXNwb25kcyB0byBhbiBhY3R1YWwgZGF0YSBwcm9wZXJ0eS5cbiAgICAgICAgICAgIGNvbnN0IG93bmVyRGV0YWlscyA9IHJvb3RQcm92aWRlci5nZXRPd25lck9mRGF0YVByb3BlcnR5KGZ1bGxQYXRoKTtcblxuICAgICAgICAgICAgaWYgKG93bmVyRGV0YWlscykge1xuICAgICAgICAgICAgICAgIGNvbnN0XG4gICAgICAgICAgICAgICAgICAgIHtvd25lciwgcHJvcGVydHlOYW1lfSA9IG93bmVyRGV0YWlscyxcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnICAgICAgICAgICAgICAgID0gb3duZXIuZ2V0RGF0YUNvbmZpZyhwcm9wZXJ0eU5hbWUpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNvbmZpZykge1xuICAgICAgICAgICAgICAgICAgICBFZmZlY3RNYW5hZ2VyLmdldEFjdGl2ZUVmZmVjdCgpPy5hZGREZXBlbmRlbmN5KGNvbmZpZyk7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBjb25maWcuZ2V0KCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSB2YWx1ZSBpcyBhbiBvYmplY3QsIHJldHVybiBhIG5ldyBwcm94eSBmb3IgaXQgdG8gZW5zdXJlIG5lc3RlZCBhY2Nlc3NlcyBhcmUgYWxzbyBwcm94aWVkLlxuICAgICAgICAgICAgICAgICAgICBpZiAoTmVvLmlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZU5lc3RlZFByb3h5KHJvb3RQcm92aWRlciwgZnVsbFBhdGgpXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIDIuIElmIG5vdCBhIGRpcmVjdCBtYXRjaCwgaXQgbWlnaHQgYmUgYSBwYXJlbnQgb2JqZWN0IG9mIGEgbmVzdGVkIHByb3BlcnR5XG4gICAgICAgICAgICAvLyAgICAoZS5nLiwgYWNjZXNzaW5nIGB1c2VyYCB3aGVuIGEgYHVzZXIuZmlyc3RuYW1lYCBiaW5kaW5nIGV4aXN0cykuXG4gICAgICAgICAgICAvLyAgICBJbiB0aGlzIGNhc2UsIHdlIHJldHVybiBhbm90aGVyIHByb3h5IGZvciB0aGUgbmV4dCBsZXZlbCBkb3duLlxuICAgICAgICAgICAgaWYgKHJvb3RQcm92aWRlci5oYXNOZXN0ZWREYXRhU3RhcnRpbmdXaXRoKGZ1bGxQYXRoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVOZXN0ZWRQcm94eShyb290UHJvdmlkZXIsIGZ1bGxQYXRoKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyAzLiBJZiBpdCdzIG5laXRoZXIgYSBkYXRhIHByb3BlcnR5IG5vciBhIHBhdGggdG8gb25lLCBpdCBkb2Vzbid0IGV4aXN0LlxuICAgICAgICAgICAgLy8gICAgUmV0dXJuaW5nIHVuZGVmaW5lZCBlbnN1cmVzIHRoYXQgY2hhaW5lZCBhY2Nlc3NlcyAoZS5nLiwgZGF0YS5ub25leGlzdGVudC5wcm9wZXJ0eSkgZmFpbCBncmFjZWZ1bGx5LlxuICAgICAgICB9LFxuXG4gICAgICAgIHNldChjdXJyZW50VGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgICAgICAgICAgIC8vIEFsbG93IGludGVybmFsIHByb3BlcnRpZXMgKGxpa2UgU3ltYm9scyBvciBzcGVjaWZpYyBzdHJpbmdzKSB0byBiZSBzZXQgZGlyZWN0bHkgb24gdGhlIHRhcmdldC5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgcHJvcGVydHkgPT09ICdzeW1ib2wnIHx8IHByb3BlcnR5ID09PSAnX19SRUZBRFJfXycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5zZXQoY3VycmVudFRhcmdldCwgcHJvcGVydHksIHZhbHVlKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdFxuICAgICAgICAgICAgICAgIGZ1bGxQYXRoICAgICA9IHBhdGggPyBgJHtwYXRofS4ke3Byb3BlcnR5fWAgOiBwcm9wZXJ0eSxcbiAgICAgICAgICAgICAgICBvd25lckRldGFpbHMgPSByb290UHJvdmlkZXIuZ2V0T3duZXJPZkRhdGFQcm9wZXJ0eShmdWxsUGF0aCk7XG4gICAgICAgICAgICBsZXQgdGFyZ2V0UHJvdmlkZXI7XG5cbiAgICAgICAgICAgIGlmIChvd25lckRldGFpbHMpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRQcm92aWRlciA9IG93bmVyRGV0YWlscy5vd25lclxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBubyBvd25lciBpcyBmb3VuZCwgc2V0IGl0IG9uIHRoZSByb290UHJvdmlkZXIgKHRoZSBvbmUgdGhhdCBjcmVhdGVkIHRoaXMgcHJveHkpXG4gICAgICAgICAgICAgICAgdGFyZ2V0UHJvdmlkZXIgPSByb290UHJvdmlkZXJcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGFyZ2V0UHJvdmlkZXIuc2V0RGF0YShmdWxsUGF0aCwgdmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWUgLy8gSW5kaWNhdGUgdGhhdCB0aGUgYXNzaWdubWVudCB3YXMgc3VjY2Vzc2Z1bFxuICAgICAgICB9LFxuXG4gICAgICAgIG93bktleXMoY3VycmVudFRhcmdldCkge1xuICAgICAgICAgICAgcmV0dXJuIHJvb3RQcm92aWRlci5nZXRUb3BMZXZlbERhdGFLZXlzKHBhdGgpXG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGN1cnJlbnRUYXJnZXQsIHByb3BlcnR5KSB7XG4gICAgICAgICAgICBjb25zdFxuICAgICAgICAgICAgICAgIGZ1bGxQYXRoICAgICA9IHBhdGggPyBgJHtwYXRofS4ke3Byb3BlcnR5fWAgOiBwcm9wZXJ0eSxcbiAgICAgICAgICAgICAgICBvd25lckRldGFpbHMgPSByb290UHJvdmlkZXIuZ2V0T3duZXJPZkRhdGFQcm9wZXJ0eShmdWxsUGF0aCk7XG5cbiAgICAgICAgICAgIGlmIChvd25lckRldGFpbHMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb25maWcgPSBvd25lckRldGFpbHMub3duZXIuZ2V0RGF0YUNvbmZpZyhvd25lckRldGFpbHMucHJvcGVydHlOYW1lKTtcblxuICAgICAgICAgICAgICAgIGlmIChjb25maWcpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBjb25maWcuZ2V0KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSAgICAgICA6IE5lby5pc09iamVjdCh2YWx1ZSkgPyBjcmVhdGVOZXN0ZWRQcm94eShyb290UHJvdmlkZXIsIGZ1bGxQYXRoKSA6IHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGFibGUgICAgOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZSAgOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBQcm94eSBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBtZXJnZWQsIGhpZXJhcmNoaWNhbCBkYXRhIGZyb20gYSBgc3RhdGUuUHJvdmlkZXJgIGNoYWluLlxuICogV2hlbiBhIHByb3BlcnR5IGlzIGFjY2Vzc2VkIHRocm91Z2ggdGhpcyBwcm94eSB3aGlsZSBhbiBFZmZlY3QgaXMgcnVubmluZywgaXQgYXV0b21hdGljYWxseVxuICogdHJhY2tzIHRoZSB1bmRlcmx5aW5nIGNvcmUuQ29uZmlnIGluc3RhbmNlIGFzIGEgZGVwZW5kZW5jeS5cbiAqIEBwYXJhbSB7TmVvLnN0YXRlLlByb3ZpZGVyfSBwcm92aWRlciBUaGUgc3RhcnRpbmcgc3RhdGUuUHJvdmlkZXIuXG4gKiBAcmV0dXJucyB7UHJveHl9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVIaWVyYXJjaGljYWxEYXRhUHJveHkocHJvdmlkZXIpIHtcbiAgICByZXR1cm4gY3JlYXRlTmVzdGVkUHJveHkocHJvdmlkZXIsICcnKVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9