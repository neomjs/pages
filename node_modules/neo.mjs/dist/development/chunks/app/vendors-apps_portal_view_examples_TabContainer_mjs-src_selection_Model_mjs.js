"use strict";
(self["webpackChunkneo_mjs"] = self["webpackChunkneo_mjs"] || []).push([["vendors-apps_portal_view_examples_TabContainer_mjs-src_selection_Model_mjs"],{

/***/ "./apps/portal/model/Example.mjs":
/*!***************************************!*\
  !*** ./apps/portal/model/Example.mjs ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _src_data_Model_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../src/data/Model.mjs */ "./src/data/Model.mjs");


/**
 * @class Portal.model.Example
 * @extends Neo.data.Model
 */
class Example extends _src_data_Model_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Portal.model.Example'
         * @protected
         */
        className: 'Portal.model.Example',
        /**
         * @member {Object[]} fields
         * @protected
         */
        fields: [{
            name: 'backgroundColor',
            type: 'String'
        }, {
            name        : 'browsers',
            type        : 'Array',
            defaultValue: ['Chrome', 'Edge', 'Firefox', 'Safari']
        }, {
            name        : 'environments',
            type        : 'Array',
            defaultValue: ['Desktop']
        }, {
            name        : 'hidden',
            type        : 'Boolean',
            defaultValue: false
        }, {
            name: 'id',
            type: 'Integer'
        }, {
            name: 'image',
            type: 'String'
        }, {
            name: 'name',
            type: 'String'
        }, {
            name        : 'sharedWorkers',
            type        : 'Boolean',
            defaultValue: false
        }, {
            name: 'sourceUrl',
            type: 'String'
        }, {
            name: 'url',
            type: 'String'
        }]
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(Example));


/***/ }),

/***/ "./apps/portal/store/Examples.mjs":
/*!****************************************!*\
  !*** ./apps/portal/store/Examples.mjs ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _model_Example_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../model/Example.mjs */ "./apps/portal/model/Example.mjs");
/* harmony import */ var _src_data_Store_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../src/data/Store.mjs */ "./src/data/Store.mjs");



/**
 * @class Portal.store.Examples
 * @extends Neo.data.Store
 */
class Examples extends _src_data_Store_mjs__WEBPACK_IMPORTED_MODULE_1__["default"] {
    static config = {
        /**
         * @member {String} className='Portal.store.Examples'
         * @protected
         */
        className: 'Portal.store.Examples',
        /**
         * @member {String} keyProperty='id'
         */
        keyProperty: 'id',
        /**
         * @member {Neo.data.Model} model=Example
         * @reactive
         */
        model: _model_Example_mjs__WEBPACK_IMPORTED_MODULE_0__["default"]
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(Examples));


/***/ }),

/***/ "./apps/portal/view/examples/List.mjs":
/*!********************************************!*\
  !*** ./apps/portal/view/examples/List.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _src_list_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../src/list/Base.mjs */ "./src/list/Base.mjs");
/* harmony import */ var _src_util_VDom_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../src/util/VDom.mjs */ "./src/util/VDom.mjs");



/**
 * @class Portal.view.examples.List
 * @extends Neo.list.Base
 */
class List extends _src_list_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    /**
     * A regex to enforce a maxLength (word break)
     * @member {RegExp} nameRegEx
     * @protected
     * @static
     */
    static nameRegEx = /^(.{65}[^\s]*).*/

    static config = {
        /**
         * @member {String} className='Portal.view.examples.List'
         * @protected
         */
        className: 'Portal.view.examples.List',
        /**
         * @member {String[]} baseCls=['portal-examples-list','neo-list']
         */
        baseCls: ['portal-examples-list', 'neo-list'],
        /**
         * @member {String} baseUrl='https://neomjs.com/'
         */
        baseUrl: 'https://neomjs.com/',
        /**
         * The env of the example links.
         * Valid values are 'development', 'dist/development', 'dist/production'
         * @member {String} environment='development'
         */
        environment: 'development',
        /**
         * Specify how many example item images to preload when intersecting
         * @member {Number} preloadImages=5
         */
        preloadImages: 5,
        /**
         * @member {String} sourceBaseUrl='https://github.com/neomjs/neo/tree/dev/'
         */
        sourceBaseUrl: 'https://github.com/neomjs/neo/tree/dev/',
        /**
         * @member {Boolean} useWrapperNode=true
         * @reactive
         */
        useWrapperNode: true,
        /**
         * @member {Object} _vdom
         */
        _vdom:
        {cn: [
            {tag: 'ul', cn: []}
        ]}
    }

    /**
     * @member {String} imageBasePath
     */
    get imageBasePath() {
        let basePath;

        if (Neo.config.isGitHubPages) {
            basePath = '../../../../resources_pub/website/examples';

            if (Neo.config.environment !== 'development') {
                basePath = '../../' + basePath
            }
        } else {
            basePath = 'https://raw.githubusercontent.com/neomjs/pages/main/resources_pub/website/examples'
        }

        return basePath
    }

    /**
     * @param {Object} config
     */
    construct(config) {
        super.construct(config);

        let me = this;

        me.addDomListeners({
            intersect: me.onIntersect,
            scope    : me
        })
    }

    /**
     * Triggered after the mounted config got changed
     * @param {Boolean} value
     * @param {Boolean} oldValue
     * @protected
     */
    afterSetMounted(value, oldValue) {
        super.afterSetMounted(value, oldValue);
        value && this.registerIntersectionObserver()
    }

    /**
     * @param {Object} record
     * @param {Number} index
     */
    createItemContent(record, index) {
        let me         = this,
            imageStyle = index < 4 ? me.getBackgroundImageStyle(record) : null;

        return [
            {cls: ['content', 'neo-relative'], data: {recordId: record.id}, removeDom: me.isHiddenItem(record), cn: [
                {cls: ['neo-multi-window'], data: {neoTooltip: 'Multi Window Demo'}, removeDom: !record.sharedWorkers, cn: [
                    {cls: ['far', 'fa-window-restore']}
                ]},
                {cls: ['neo-full-size', 'preview-image'], flag: `image-${record.id}`, style: imageStyle},
                {cls: ['neo-absolute', 'neo-item-bottom-position'], cn: [
                    {...me.createLink(record)},
                    {cls: ['neo-top-20'], cn: [
                        {...me.createSourceLink(record)},
                        {cls: ['neo-inner-content'], cn: [
                            {cls: ['neo-inner-details'], text: record.browsers.join(', ')},
                            {cls: ['neo-inner-details'], text: record.environments.join(', ')}
                        ]}
                    ]}
                ]}
            ]}
        ]
    }

    /**
     *
     * @param {Object} record
     * @returns {Object}
     */
    createLink(record) {
        let externalLink = record.url.startsWith('http'),

        vdom = {
            tag : 'a',
            cls : ['neo-title'],
            href: record.url,
            text: record.name.replace(List.nameRegEx, '$1')
        };

        // We can use a shorter syntax for pointing examples to neomjs.com, but not all examples have to be there.
        if (!externalLink) {
            vdom.href = this.baseUrl + record.url
        }

        // Do not open multi-window examples inside a new browser window, in case the environment is the same.
        // E.g. opening the multi-window covid app & the portal app inside the same app worker is problematic.
        if (!record.sharedWorkers || this.environment !== Neo.config.environment || externalLink) {
            vdom.target = '_blank'
        }

        return vdom
    }

    /**
     *
     * @param {Object} record
     * @returns {Object}
     */
    createSourceLink(record) {
        let vdom = {
            tag   : 'a',
            cls   : ['fab', 'fa-github', 'neo-github-image'],
            href  : record.sourceUrl,
            target: '_blank'
        };

        // We can use a shorter syntax for pointing examples to neomjs/neo repo, but not all examples have to be there.
        if (!record.sourceUrl.startsWith('http')) {
            vdom.href = this.sourceBaseUrl + record.sourceUrl
        }

        return vdom
    }

    /**
     * @param record
     * @returns {{backgroundImage: string}}
     */
    getBackgroundImageStyle(record) {
        return {
            backgroundImage: [
                `url('${this.imageBasePath}/${record.image}'),`,
                'linear-gradient(',
                'var(--portal-examples-list-gradient-start),',
                'var(--portal-examples-list-gradient-end)',
                ')'
            ].join('')
        }
    }

    /**
     * @returns {Object}
     */
    getVdomRoot() {
        return this.vdom.cn[0]
    }

    /**
     * @returns {Object}
     */
    getVnodeRoot() {
        return this.vnode.childNodes[0]
    }

    /**
     * @param {Object} record
     * @returns {Boolean}
     */
    isHiddenItem(record) {
        if (record.hidden) {
            return true
        }

        // We only want to show the portal app for the non-current environment.
        // => A link to itself feels pointless
        return record.sourceUrl === 'apps/portal' && this.environment === Neo.config.environment
    }

    /**
     * @param {Object} data
     */
    onIntersect(data) {
        let me          = this,
            {store}     = me,
            record      = store.get(parseInt(data.data.recordId)),
            i           = store.indexOf(record),
            len         = Math.min(i + me.preloadImages, store.getCount()),
            needsUpdate = false,
            node;

        for (; i < len; i++) {
            node = _src_util_VDom_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].getByFlag(me.vdom, `image-${record.id}`);

            if (!node.style) {
                needsUpdate = true;
                node.style = me.getBackgroundImageStyle(record)
            }
        }

        needsUpdate && me.update()
    }

    /**
     *
     */
    async registerIntersectionObserver() {
        let me   = this,
            opts = {id: me.id, observe: ['.content'], windowId: me.windowId},
            i    = 0,
            len  = me.intersectionObserverReconnects,
            data;

        await me.timeout(150);

        data = await Neo.main.addon.IntersectionObserver.register({
            ...opts,
            callback: 'isVisible',
            root    : `#${me.parentId}`
        });

        if (data.countTargets < 1) {
            for (; i < len; i++) {
                await me.timeout(100);

                data = await Neo.main.addon.IntersectionObserver.observe(opts);

                if (data.countTargets > 0) {
                    break
                }
            }
        }
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(List));


/***/ }),

/***/ "./apps/portal/view/examples/TabContainer.mjs":
/*!****************************************************!*\
  !*** ./apps/portal/view/examples/TabContainer.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _src_tab_Container_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../src/tab/Container.mjs */ "./src/tab/Container.mjs");
/* harmony import */ var _store_Examples_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../store/Examples.mjs */ "./apps/portal/store/Examples.mjs");
/* harmony import */ var _List_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./List.mjs */ "./apps/portal/view/examples/List.mjs");
/* harmony import */ var _TabContainerController_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./TabContainerController.mjs */ "./apps/portal/view/examples/TabContainerController.mjs");





/**
 * @class Portal.view.examples.TabContainer
 * @extends Neo.tab.Container
 */
class TabContainer extends _src_tab_Container_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Portal.view.examples.TabContainer'
         * @protected
         */
        className: 'Portal.view.examples.TabContainer',
        /**
         * @member {Number|null} activeIndex=null
         * @reactive
         */
        activeIndex: null,
        /**
         * @member {String[]} baseCls=['portal-examples-tab-container','neo-tab-container']
         */
        baseCls: ['portal-examples-tab-container', 'neo-tab-container'],
        /**
         * @member {Neo.controller.Component} controller=TabContainerController
         * @reactive
         */
        controller: _TabContainerController_mjs__WEBPACK_IMPORTED_MODULE_3__["default"],
        /**
         * @member {Object} headerToolbar
         */
        headerToolbar: {
            cls: ['portal-examples-tab-header-toolbar']
        },
        /**
         * @member {Object} itemDefaults
         */
        itemDefaults: {
            module: _List_mjs__WEBPACK_IMPORTED_MODULE_2__["default"]
        },
        /**
         * @member {Object[]} items
         */
        items: [{
            reference: 'examples-devmode-list',
            store    : {module: _store_Examples_mjs__WEBPACK_IMPORTED_MODULE_1__["default"], url: '../../apps/portal/resources/data/examples_devmode.json'},
            header   : {
                iconCls: 'fa fa-chess-knight',
                route  : '/examples/devmode',
                text   : 'Dev Mode'
            }
        }, {
            environment: 'dist/development',
            reference  : 'examples-dist-dev-list',
            store      : {module: _store_Examples_mjs__WEBPACK_IMPORTED_MODULE_1__["default"], url: '../../apps/portal/resources/data/examples_dist_dev.json'},
            header     : {
                iconCls: 'fa fa-chess-bishop',
                route  : '/examples/dist_dev',
                text   : 'dist/dev'
            }
        }, {
            environment: 'dist/production',
            reference  : 'examples-dist-esm-list',
            store      : {module: _store_Examples_mjs__WEBPACK_IMPORTED_MODULE_1__["default"], url: '../../apps/portal/resources/data/examples_dist_esm.json'},
            header     : {
                iconCls: 'fa fa-chess-queen',
                route  : '/examples/dist_esm',
                text   : 'dist/esm'
            }
        }, {
            environment: 'dist/production',
            reference  : 'examples-dist-prod-list',
            store      : {module: _store_Examples_mjs__WEBPACK_IMPORTED_MODULE_1__["default"], url: '../../apps/portal/resources/data/examples_dist_prod.json'},
            header     : {
                iconCls: 'fa fa-chess-king',
                route  : '/examples/dist_prod',
                text   : 'dist/prod'
            }
        }],
        /**
         * @member {Boolean} sortable=true
         * @reactive
         */
        sortable: true,
        /**
         * @member {String} tabBarPosition='left'
         * @reactive
         */
        tabBarPosition: 'left',
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(TabContainer));


/***/ }),

/***/ "./apps/portal/view/examples/TabContainerController.mjs":
/*!**************************************************************!*\
  !*** ./apps/portal/view/examples/TabContainerController.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _src_controller_Component_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../src/controller/Component.mjs */ "./src/controller/Component.mjs");
/* harmony import */ var _src_util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../src/util/Array.mjs */ "./src/util/Array.mjs");



/**
 * @class Portal.view.examples.TabContainerController
 * @extends Neo.controller.Component
 */
class TabContainerController extends _src_controller_Component_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Portal.view.examples.TabContainerController'
         * @protected
         */
        className: 'Portal.view.examples.TabContainerController',
        /**
         * @member {Object} routes
         */
        routes: {
            '/examples'         : 'onExamplesRoute',
            '/examples/{itemId}': 'onExamplesRoute'
        }
    }

    /**
     * We need to store the current positions, since drag&drop resorting of tabs is enabled
     * @member {String[]} tabItems
     */
    tabItems = ['devmode', 'dist_dev', 'dist_esm', 'dist_prod']

    /**
     *
     */
    onComponentConstructed() {
        let me = this;

        me.component.on('moveTo', me.onMoveTab, me)
    }

    /**
     * @param {Object} params
     * @param {Object} value
     * @param {Object} oldValue
     */
    onExamplesRoute(params, value, oldValue) {
        let me     = this,
            itemId = params?.itemId || 'dist_prod',
            index  = me.tabItems.indexOf(itemId),
            store  = me.getReference(`examples-${itemId.replace('_', '-')}-list`).store;

        if (store?.getCount() < 1) {
            store.load()
        }

        me.component.activeIndex = index
    }

    /**
     * @param {Object} data
     * @param {Number} data.fromIndex
     * @param {Number} data.toIndex
     */
    onMoveTab({fromIndex, toIndex}) {
        _src_util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].move(this.tabItems, fromIndex, toIndex)
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(TabContainerController));


/***/ }),

/***/ "./src/selection/Model.mjs":
/*!*********************************!*\
  !*** ./src/selection/Model.mjs ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/Base.mjs */ "./src/core/Base.mjs");
/* harmony import */ var _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/Array.mjs */ "./src/util/Array.mjs");
/* harmony import */ var _core_Observable_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/Observable.mjs */ "./src/core/Observable.mjs");
/* harmony import */ var _core_ConfigSymbols_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/ConfigSymbols.mjs */ "./src/core/ConfigSymbols.mjs");





/**
 * @class Neo.selection.Model
 * @extends Neo.core.Base
 * @mixes Neo.core.Observable
 */
class Model extends _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    /**
     * True automatically applies the core.Observable mixin
     * @member {Boolean} observable=true
     * @static
     */
    static observable = true

    static config = {
        /**
         * @member {String} className='Neo.selection.Model'
         * @protected
         */
        className: 'Neo.selection.Model',
        /**
         * @member {String} ntype='selection-model'
         * @protected
         */
        ntype: 'selection-model',
        /**
         * Placeholder for extended classes to add a custom css rule to this owner component
         * @member {String|null} cls=null
         * @protected
         */
        cls: null,
        /**
         * @member {Array} items_
         * @protected
         * @reactive
         */
        items_: {
            [_core_ConfigSymbols_mjs__WEBPACK_IMPORTED_MODULE_3__.isDescriptor]: true,
            clone         : 'shallow',
            cloneOnGet    : 'none',
            isEqual       : () => false,
            value         : []
        },
        /**
         * @member {String} selectedCls='selected'
         */
        selectedCls: 'neo-selected',
        /**
         * @member {Boolean} singleSelect=true
         */
        singleSelect: true,
        /**
         * Internally saves the view id, but the getter will return the matching instance
         * @member {Object} view_=null
         * @protected
         * @reactive
         */
        view_: null
    }

    /**
     * Gets triggered before getting the value of the view config
     * @param {String} value
     * @returns {Neo.component.Base}
     */
    beforeGetView(value) {
        return Neo.getComponent(this._view)
    }

    /**
     * Gets triggered before setting the value of the view config
     * @returns {String} the view id
     */
    beforeSetView(value) {
        return value && value.id
    }

    /**
     *
     */
    addDomListener() {}

    /**
     * @param {Object} item
     * @param {Boolean} [silent] true to prevent a vdom update
     * @param {Object[]|String[]} itemCollection=this.items
     * @param {String} [selectedCls]
     */
    deselect(item, silent, itemCollection=this.items, selectedCls) {
        let me     = this,
            {view} = me,
            node;

        // We hold vdom ids for now, so all incoming selections must be converted.
        item = item.isRecord ? view.getItemId(item) : Neo.isObject(item) ? item.id : item;

        if (itemCollection.includes(item)) {
            node = view.getVdomChild(item);

            if (node) {
                node.cls = _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].remove(node.cls || [], selectedCls || me.selectedCls);
                delete node['aria-selected']
            }

            _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].remove(itemCollection, item);

            if (!silent) {
                view.update();

                view.parent?.onDeselect?.(); // grid.Container & table.Container
                view.onDeselect?.();

                me.fire('selectionChange', {
                    selection: itemCollection
                })
            }
        } else if (!silent) {
            me.fire('noChange')
        }
    }

    /**
     * @param {Boolean} [silent] true to prevent a vdom update
     * @param {Object[]|String[]} itemCollection=this.items
     */
    deselectAll(silent, itemCollection=this.items) {
        let me     = this,
            items  = [...itemCollection],
            {view} = me;

        if (items.length) {
            items.forEach(item => {
                me.deselect(item, true)
            });

            if (!silent && items.length > 0) {
                view.update()
            }

            me.fire('selectionChange', {
                selection: this.items
            })
        } else if (!silent) {
            me.fire('noChange')
        }
    }

    /**
     *
     */
    destroy(...args) {
        this.unregister();
        super.destroy(...args)
    }

    /**
     * @returns {Array} this.items
     */
    getSelection() {
        return this.items
    }

    /**
     * @returns {Boolean}
     */
    hasSelection() {
        return this.items.length > 0
    }

    /**
     * @param {String} id
     * @returns {Boolean} true in case the item is selected
     */
    isSelected(id) {
        return this.items.includes(id)
    }

    /**
     * @param {Neo.component.Base} component
     */
    register(component) {
        let me  = this,
            cls = component.wrapperCls || [];

        if (me.cls && !cls.includes(me.cls)) {
            cls.push(me.cls);
            component.wrapperCls = cls
        }

        me.view = component;
        me.addDomListener();

        component.fire('selectionModelChange', {
            value: me
        })
    }

    /**
     *
     */
    removeDomListeners() {
        let me           = this,
            component    = me.view,
            domListeners = [...component.domListeners];

        component.domListeners.forEach(listener => {
            if (listener.scope === me) {
                _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].remove(domListeners, listener)
            }
        });

        component.domListeners = domListeners
    }

    /**
     * @param {Object|Object[]|String[]} items
     * @param {Object[]|String[]} itemCollection=this.items
     * @param {String} [selectedCls]
     */
    select(items, itemCollection=this.items, selectedCls) {
        if (!Array.isArray(items)) {
            items = [items]
        }

        let me     = this,
            {view} = me;

        // We hold vdom ids for now, so all incoming selections must be converted.
        items = items.map(item => item.isRecord ? view.getItemId(item) : Neo.isObject(item) ? item.id : item);

        if (!Neo.isEqual(itemCollection, items)) {
            if (me.singleSelect && itemCollection === me.items) {
                me.deselectAll(true, itemCollection)
            }

            items.forEach(node => {
                node = view.getVdomChild(node);

                if (node) {
                    node.cls = _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].add(node.cls || [], selectedCls || me.selectedCls);
                    node['aria-selected'] = true
                }
            });

            _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].add(itemCollection, items);

            if (!view.silentSelect) {
                view.update()
            }

            view.parent?.onSelect?.(items); // grid.Container & table.Container
            view.onSelect?.(items);

            me.fire('selectionChange', {
                selection: itemCollection
            })
        }
        else {
            me.fire('noChange')
        }
    }

    /**
     * @param {Object} item
     */
    toggleSelection(item) {
        let me = this;

        if (me.isSelected(item)) {
            me.deselect(item)
        } else {
            me.select(item)
        }
    }

    /**
     *
     */
    unregister() {
        let me  = this,
            cls = me.view.wrapperCls || [];

        if (me.cls && cls.includes(me.cls)) {
            _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].remove(cls, me.cls);
            me.view.wrapperCls = cls
        }

        me.deselectAll();

        me.removeDomListeners()
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(Model));


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,