"use strict";
(self["webpackChunkneo_mjs"] = self["webpackChunkneo_mjs"] || []).push([["examples_videoMove_app_mjs"],{

/***/ "./examples/videoMove/MainContainer.mjs":
/*!**********************************************!*\
  !*** ./examples/videoMove/MainContainer.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _src_button_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../src/button/Base.mjs */ "./src/button/Base.mjs");
/* harmony import */ var _src_component_Video_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../src/component/Video.mjs */ "./src/component/Video.mjs");
/* harmony import */ var _src_container_Viewport_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../src/container/Viewport.mjs */ "./src/container/Viewport.mjs");




/**
 * @class Neo.examples.videoMove.MainContainer
 * @extends Neo.container.Viewport
 */
class MainContainer extends _src_container_Viewport_mjs__WEBPACK_IMPORTED_MODULE_2__["default"] {
    static config = {
        className: 'Neo.examples.videoMove.MainContainer',
        cls      : ['examples-videomove-maincontainer'],
        layout   : {ntype: 'vbox', align: 'stretch'},

        items: [{
            ntype    : 'container',
            cls      : ['video-wrapper'],
            layout   : {ntype: 'hbox', align: 'stretch'},
            reference: 'video-wrapper',

            itemDefaults: {
                ntype : 'container',
                layout: 'fit'
            },

            items: [{
                reference: 'container-1',

                items: [{
                    module : _src_component_Video_mjs__WEBPACK_IMPORTED_MODULE_1__["default"],
                    playing: true,
                    url    : 'https://video-ssl.itunes.apple.com/itunes-assets/Video125/v4/a0/57/54/a0575426-dd8e-2d25-bdf3-139702870b50/mzvf_786190431362224858.640x464.h264lc.U.p.m4v'
                }]
            }, {
                reference: 'container-2'
            }]
        }, {
            ntype : 'container',
            layout: {ntype: 'vbox', align: 'start'},
            style : {marginTop: '50px'},

            items: [{
                module : _src_button_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"],
                handler: 'up.onMoveVideoButtonClick',
                text   : 'Move Video'
            }]
        }]
    }

    /**
     *
     * @param {Object} data
     */
    onMoveVideoButtonClick(data) {
        let me           = this,
            container1   = me.getReference('container-1'),
            container2   = me.getReference('container-2'),
            videoWrapper = me.getReference('video-wrapper');

        container1.silentVdomUpdate = true;
        container2.silentVdomUpdate = true;

        if (container2.items.length < 1) {
            container2.add(container1.removeAt(0, false))
        } else {
            container1.add(container2.removeAt(0, false))
        }

        // include 2 level of children:
        // level 1 => container-1, container-2
        // level 2 => video element(s)
        videoWrapper.updateDepth = 3;

        videoWrapper.promiseUpdate().then(() => {
            container1.silentVdomUpdate = false;
            container2.silentVdomUpdate = false
        })
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(MainContainer));


/***/ }),

/***/ "./examples/videoMove/app.mjs":
/*!************************************!*\
  !*** ./examples/videoMove/app.mjs ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   onStart: () => (/* binding */ onStart)
/* harmony export */ });
/* harmony import */ var _MainContainer_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MainContainer.mjs */ "./examples/videoMove/MainContainer.mjs");


const onStart = () => Neo.app({
    mainView: _MainContainer_mjs__WEBPACK_IMPORTED_MODULE_0__["default"],
    name    : 'Neo.examples.videoMove'
});


/***/ }),

/***/ "./src/component/Video.mjs":
/*!*********************************!*\
  !*** ./src/component/Video.mjs ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _component_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../component/Base.mjs */ "./src/component/Base.mjs");
/* harmony import */ var _util_VDom_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/VDom.mjs */ "./src/util/VDom.mjs");



/**
 * @class Neo.component.Video
 * @extends Neo.component.Base
 *
 * @example
 *     ntype   : 'video',
 *     url     : 'https://video-ssl.itunes.apple.com/itunes-assets/Video125/v4/a0/57/54/a0575426-dd8e-2d25-bdf3-139702870b50/mzvf_786190431362224858.640x464.h264lc.U.p.m4v'
 *     autoPlay: true
 *
 * @methods
 *      play
 *      pause
 */
class Video extends _component_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /*
         * @member {String} className='Neo.component.Video'
         * @protected
         */
        className: 'Neo.component.Video',
        /*
         * @member {String} ntype='video'
         * @protected
         */
        ntype: 'video',
        /*
         * @member {String[]} baseCls=['neo-video']
         */
        baseCls: ['neo-video'],
        /**
         * Automatically start the video
         * Initial setting, which does not make sense to change later
         * !!Most browsers only support muted autostart
         * @member {Boolean} autoPlay=false
         */
        autoPlay: false,
        /**
         * Current state of the video
         * @member {Boolean} playing_=false
         */
        playing_: false,
        /**
         * Type of the video
         * @member {String} type='video/mp4'
         */
        type: 'video/mp4',
        /*
         * @member {String|null} url_=null
         */
        url_: null,
        /**
         * @member {Object} _vdom
         */
        _vdom: {
            cn: [{
                flag: 'ghost',
                cls: ['neo-video-ghost'],
                cn: [{
                    tag: 'i',
                    cls: ['fa-solid', 'fa-circle-play']
                }]
            }, {
                // Neo specific configs
                tag: 'video',
                flag: 'media',
                cls: ['neo-video-media'],
                removeDom: true,
                // dom attributes
                autoplay: true,
                controls: true
            }]
        }
    }

    /**
     * @param {Object} config
     */
    construct(config) {
        super.construct(config);

        let me = this;

        me.handleAutoplay();
        me.addDomListeners({click: me.play, delegate: '.neo-video-ghost'});
    }

    /**
     * afterSetPlaying - run the event listeners
     * @param {Boolean} value
     * @param {Boolean} oldValue
     */
    afterSetPlaying(value, oldValue) {
        let {vdom} = this,
            media = _util_VDom_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].getFlags(vdom, 'media')[0],
            ghost = _util_VDom_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].getFlags(vdom, 'ghost')[0];

        ghost.removeDom = value;
        media.removeDom = !value;

        this.update()
    }

    /**
     * Add a source element into the video element containing the url
     * @param {String} value
     * @param {String|null} oldValue
     */
    afterSetUrl(value, oldValue) {
        if (!value) return;

        let me     = this,
            {vdom} = me,
            media  = _util_VDom_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].getFlags(vdom, 'media')[0];

        media.cn = [{
            tag : 'source',
            src : value,
            type: me.type
        }];

        this.update()
    }

    /**
     * autoplay - run the event listeners
     * Only called in constructor and sets playing => calls update already
     *
     * Rationale: update() sends the vdom & vnode on a workers roundtrip to get the deltas.
     * While this is happening,  the component locks itself for future updates until the new vnode got back (async).
     * After the delay the framework  would trigger a 2nd roundtrip to get the deltas for the visible node.
     *
     * @protected
     */
    handleAutoplay() {
        if (!this.autoPlay) return;

        let {vdom} = this,
            media  = _util_VDom_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].getFlags(vdom, 'media')[0];

        // Most browsers require videos to be muted for autoplay to work.
        media.muted = true;
        // Allows inline playback on iOS devices
        media.playsInline = true;

        this.playing = true
    }

    /**
     * Simulates `Clicked media` programmatically
     */
    pause() {
        this.playing = false
    }

    /**
     * Clicked ghost
     */
    play() {
        this.playing = true
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(Video));


/***/ }),

/***/ "./src/container/Viewport.mjs":
/*!************************************!*\
  !*** ./src/container/Viewport.mjs ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Base.mjs */ "./src/container/Base.mjs");


/**
 * @class Neo.container.Viewport
 * @extends Neo.container.Base
 */
class Viewport extends _Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.container.Viewport'
         * @protected
         */
        className: 'Neo.container.Viewport',
        /**
         * @member {String} ntype='viewport'
         * @protected
         */
        ntype: 'viewport',
        /**
         * true applies 'neo-body-viewport' to the document.body
         * @member {Boolean} applyBodyCls=true
         */
        applyBodyCls: true,
        /**
         * Assuming that a Viewport is the top level view of your app, and you want to mount it right away.
         * Could be without any items. Use false otherwise.
         * @member {Boolean} autoMount=true
         */
        autoMount: true,
        /**
         * @member {String[]} baseCls=['neo-viewport']
         */
        baseCls: ['neo-viewport'],
        /**
         * true applies a main.addon.ResizeObserver and fires a custom resize event
         * which other instances can subscribe to.
         * @member {Boolean} monitorSize_=false
         */
        monitorSize_: false
    }

    /**
     * Triggered after the mounted config got changed
     * @param {Boolean} value
     * @param {Boolean} oldValue
     * @protected
     */
    afterSetMounted(value, oldValue) {
        super.afterSetMounted(value, oldValue);

        let me = this;

        if (value && me.monitorSize) {
            me.addDomListeners([{resize: me.onDomResize, scope: me}])
        }
    }

    /**
     *
     */
    onConstructed() {
        super.onConstructed();

        let {appName, windowId} = this;

        this.applyBodyCls && Neo.main.DomAccess.applyBodyCls({
            appName,
            cls: ['neo-body-viewport'],
            windowId
        })
    }

    /**
     * @param {Object} data
     */
    onDomResize(data) {
        this.fire('resize', data)
    }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Neo.setupClass(Viewport));


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,