"use strict";
(self["webpackChunkneo_mjs"] = self["webpackChunkneo_mjs"] || []).push([["src_vdom_util_StringFromVnode_mjs"],{

/***/ "./src/vdom/util/StringFromVnode.mjs":
/*!*******************************************!*\
  !*** ./src/vdom/util/StringFromVnode.mjs ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _util_String_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/String.mjs */ "./src/util/String.mjs");
/* harmony import */ var _domConstants_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../domConstants.mjs */ "./src/vdom/domConstants.mjs");



const StringFromVnode = {
    /**
     * @param {Object} vnode
     * @protected
     */
    createCloseTag(vnode) {
        return _domConstants_mjs__WEBPACK_IMPORTED_MODULE_1__.voidElements.has(vnode.nodeName) ? '' : '</' + vnode.nodeName + '>'
    },

    /**
     * @param {Object} vnode
     * @protected
     */
    createOpenTag(vnode) {
        let string       = '<' + vnode.nodeName,
            {attributes} = vnode,
            cls          = vnode.className,
            style;

        if (vnode.style) {
            style = Neo.createStyles(vnode.style);

            if (style !== '') {
                string += ` style="${style}"`
            }
        }

        if (cls) {
            if (Array.isArray(cls)) {
                cls = cls.join(' ')
            }

            if (cls !== '') {
                string += ` class="${cls}"`
            }
        }

        if (vnode.id) {
            if (Neo.config.useDomIds) {
                string += ` id="${vnode.id}"`
            } else {
                string += ` data-neo-id="${vnode.id}"`
            }
        }

        Object.entries(attributes).forEach(([key, value]) => {
            if (_domConstants_mjs__WEBPACK_IMPORTED_MODULE_1__.voidAttributes.has(key)) {
                if (value === 'true') { // vnode attribute values get converted into strings
                    string += ` ${key}`
                }
            } else if (key !== 'removeDom') {
                if (key === 'value') {
                    value = _util_String_mjs__WEBPACK_IMPORTED_MODULE_0__["default"].escapeHtml(value)
                }

                string += ` ${key}="${value?.replaceAll?.('"', '&quot;') ?? value}"`
            }
        });

        return string + '>'
    },

    /**
     * @param {Neo.vdom.VNode} vnode
     * @param {Map}            [movedNodes]
     */
    create(vnode, movedNodes) {
        let me = this,
            id = vnode?.id;

        // If a content node will get moved by a delta update OP, there is no need to regenerate it. Opt out.
        if (id && movedNodes?.get(id)) {
            return ''
        }

        switch (vnode.vtype) {
            case 'root':
                return me.create(vnode.childNodes[0], movedNodes)
            case 'text':
                // For text VNodes, `vnode.textContent` holds the HTML-escaped content.
                // Add the comment wrappers here for string output, aligning with main.mixin.DeltaUpdates.createDomTree().
                // `vnode.textContent || ''` ensures robustness in case vnode.textContent is not a string (e.g., a number or null).
                return `<!-- ${vnode.id} -->${vnode.textContent}<!-- /neo-vtext -->`
            case 'vnode':
                return me.createOpenTag(vnode) + me.createTagContent(vnode, movedNodes) + me.createCloseTag(vnode)
            default:
                return ''
        }
    },

    /**
     * @param {Neo.vdom.VNode} vnode
     * @param {Map}            [movedNodes]
     * @protected
     */
    createTagContent(vnode, movedNodes) {
        const hasContent = vnode.innerHTML || vnode.textContent;

        if (hasContent) {
            return hasContent
        }

        let string = '',
            len    = vnode.childNodes ? vnode.childNodes.length : 0,
            i      = 0,
            childNode;

        for (; i < len; i++) {
            childNode = vnode.childNodes[i];
            string += this.create(childNode, movedNodes)
        }

        return string
    }
};

const ns = Neo.ns('Neo.vdom.util', true);
ns.StringFromVnode = StringFromVnode;

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (StringFromVnode);


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2h1bmtzL3Zkb20vc3JjX3Zkb21fdXRpbF9TdHJpbmdGcm9tVm5vZGVfbWpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFtRTtBQUNGOztBQUVqRTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLGVBQWUsMkRBQVk7QUFDM0IsS0FBSzs7QUFFTDtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsWUFBWTtBQUN6QjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxxQ0FBcUMsTUFBTTtBQUMzQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EscUNBQXFDLElBQUk7QUFDekM7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esa0NBQWtDLFNBQVM7QUFDM0MsY0FBYztBQUNkLDJDQUEyQyxTQUFTO0FBQ3BEO0FBQ0E7O0FBRUE7QUFDQSxnQkFBZ0IsNkRBQWM7QUFDOUIsd0NBQXdDO0FBQ3hDLGtDQUFrQyxJQUFJO0FBQ3RDO0FBQ0EsY0FBYztBQUNkO0FBQ0EsNEJBQTRCLHdEQUFTO0FBQ3JDOztBQUVBLDhCQUE4QixJQUFJLElBQUksZ0NBQWdDLFlBQVk7QUFDbEY7QUFDQSxTQUFTOztBQUVUO0FBQ0EsS0FBSzs7QUFFTDtBQUNBLGVBQWUsZ0JBQWdCO0FBQy9CLGVBQWUsZ0JBQWdCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLFVBQVUsS0FBSyxrQkFBa0I7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQSxlQUFlLGdCQUFnQjtBQUMvQixlQUFlLGdCQUFnQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZUFBZSxTQUFTO0FBQ3hCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxpRUFBZSxlQUFlLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZW8ubWpzLy4vc3JjL3Zkb20vdXRpbC9TdHJpbmdGcm9tVm5vZGUubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBOZW9TdHJpbmcgICAgICAgICAgICAgICAgICAgICAgZnJvbSAnLi4vLi4vdXRpbC9TdHJpbmcubWpzJztcbmltcG9ydCB7dm9pZEF0dHJpYnV0ZXMsIHZvaWRFbGVtZW50c30gZnJvbSAnLi4vZG9tQ29uc3RhbnRzLm1qcyc7XG5cbmNvbnN0IFN0cmluZ0Zyb21Wbm9kZSA9IHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdm5vZGVcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgY3JlYXRlQ2xvc2VUYWcodm5vZGUpIHtcbiAgICAgICAgcmV0dXJuIHZvaWRFbGVtZW50cy5oYXModm5vZGUubm9kZU5hbWUpID8gJycgOiAnPC8nICsgdm5vZGUubm9kZU5hbWUgKyAnPidcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHZub2RlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGNyZWF0ZU9wZW5UYWcodm5vZGUpIHtcbiAgICAgICAgbGV0IHN0cmluZyAgICAgICA9ICc8JyArIHZub2RlLm5vZGVOYW1lLFxuICAgICAgICAgICAge2F0dHJpYnV0ZXN9ID0gdm5vZGUsXG4gICAgICAgICAgICBjbHMgICAgICAgICAgPSB2bm9kZS5jbGFzc05hbWUsXG4gICAgICAgICAgICBzdHlsZTtcblxuICAgICAgICBpZiAodm5vZGUuc3R5bGUpIHtcbiAgICAgICAgICAgIHN0eWxlID0gTmVvLmNyZWF0ZVN0eWxlcyh2bm9kZS5zdHlsZSk7XG5cbiAgICAgICAgICAgIGlmIChzdHlsZSAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICBzdHJpbmcgKz0gYCBzdHlsZT1cIiR7c3R5bGV9XCJgXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2xzKSB7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjbHMpKSB7XG4gICAgICAgICAgICAgICAgY2xzID0gY2xzLmpvaW4oJyAnKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY2xzICE9PSAnJykge1xuICAgICAgICAgICAgICAgIHN0cmluZyArPSBgIGNsYXNzPVwiJHtjbHN9XCJgXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodm5vZGUuaWQpIHtcbiAgICAgICAgICAgIGlmIChOZW8uY29uZmlnLnVzZURvbUlkcykge1xuICAgICAgICAgICAgICAgIHN0cmluZyArPSBgIGlkPVwiJHt2bm9kZS5pZH1cImBcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3RyaW5nICs9IGAgZGF0YS1uZW8taWQ9XCIke3Zub2RlLmlkfVwiYFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgT2JqZWN0LmVudHJpZXMoYXR0cmlidXRlcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBpZiAodm9pZEF0dHJpYnV0ZXMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09ICd0cnVlJykgeyAvLyB2bm9kZSBhdHRyaWJ1dGUgdmFsdWVzIGdldCBjb252ZXJ0ZWQgaW50byBzdHJpbmdzXG4gICAgICAgICAgICAgICAgICAgIHN0cmluZyArPSBgICR7a2V5fWBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGtleSAhPT0gJ3JlbW92ZURvbScpIHtcbiAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSAndmFsdWUnKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gTmVvU3RyaW5nLmVzY2FwZUh0bWwodmFsdWUpXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc3RyaW5nICs9IGAgJHtrZXl9PVwiJHt2YWx1ZT8ucmVwbGFjZUFsbD8uKCdcIicsICcmcXVvdDsnKSA/PyB2YWx1ZX1cImBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHN0cmluZyArICc+J1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge05lby52ZG9tLlZOb2RlfSB2bm9kZVxuICAgICAqIEBwYXJhbSB7TWFwfSAgICAgICAgICAgIFttb3ZlZE5vZGVzXVxuICAgICAqL1xuICAgIGNyZWF0ZSh2bm9kZSwgbW92ZWROb2Rlcykge1xuICAgICAgICBsZXQgbWUgPSB0aGlzLFxuICAgICAgICAgICAgaWQgPSB2bm9kZT8uaWQ7XG5cbiAgICAgICAgLy8gSWYgYSBjb250ZW50IG5vZGUgd2lsbCBnZXQgbW92ZWQgYnkgYSBkZWx0YSB1cGRhdGUgT1AsIHRoZXJlIGlzIG5vIG5lZWQgdG8gcmVnZW5lcmF0ZSBpdC4gT3B0IG91dC5cbiAgICAgICAgaWYgKGlkICYmIG1vdmVkTm9kZXM/LmdldChpZCkpIHtcbiAgICAgICAgICAgIHJldHVybiAnJ1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoICh2bm9kZS52dHlwZSkge1xuICAgICAgICAgICAgY2FzZSAncm9vdCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1lLmNyZWF0ZSh2bm9kZS5jaGlsZE5vZGVzWzBdLCBtb3ZlZE5vZGVzKVxuICAgICAgICAgICAgY2FzZSAndGV4dCc6XG4gICAgICAgICAgICAgICAgLy8gRm9yIHRleHQgVk5vZGVzLCBgdm5vZGUudGV4dENvbnRlbnRgIGhvbGRzIHRoZSBIVE1MLWVzY2FwZWQgY29udGVudC5cbiAgICAgICAgICAgICAgICAvLyBBZGQgdGhlIGNvbW1lbnQgd3JhcHBlcnMgaGVyZSBmb3Igc3RyaW5nIG91dHB1dCwgYWxpZ25pbmcgd2l0aCBtYWluLm1peGluLkRlbHRhVXBkYXRlcy5jcmVhdGVEb21UcmVlKCkuXG4gICAgICAgICAgICAgICAgLy8gYHZub2RlLnRleHRDb250ZW50IHx8ICcnYCBlbnN1cmVzIHJvYnVzdG5lc3MgaW4gY2FzZSB2bm9kZS50ZXh0Q29udGVudCBpcyBub3QgYSBzdHJpbmcgKGUuZy4sIGEgbnVtYmVyIG9yIG51bGwpLlxuICAgICAgICAgICAgICAgIHJldHVybiBgPCEtLSAke3Zub2RlLmlkfSAtLT4ke3Zub2RlLnRleHRDb250ZW50fTwhLS0gL25lby12dGV4dCAtLT5gXG4gICAgICAgICAgICBjYXNlICd2bm9kZSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1lLmNyZWF0ZU9wZW5UYWcodm5vZGUpICsgbWUuY3JlYXRlVGFnQ29udGVudCh2bm9kZSwgbW92ZWROb2RlcykgKyBtZS5jcmVhdGVDbG9zZVRhZyh2bm9kZSlcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuICcnXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtOZW8udmRvbS5WTm9kZX0gdm5vZGVcbiAgICAgKiBAcGFyYW0ge01hcH0gICAgICAgICAgICBbbW92ZWROb2Rlc11cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgY3JlYXRlVGFnQ29udGVudCh2bm9kZSwgbW92ZWROb2Rlcykge1xuICAgICAgICBjb25zdCBoYXNDb250ZW50ID0gdm5vZGUuaW5uZXJIVE1MIHx8IHZub2RlLnRleHRDb250ZW50O1xuXG4gICAgICAgIGlmIChoYXNDb250ZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gaGFzQ29udGVudFxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHN0cmluZyA9ICcnLFxuICAgICAgICAgICAgbGVuICAgID0gdm5vZGUuY2hpbGROb2RlcyA/IHZub2RlLmNoaWxkTm9kZXMubGVuZ3RoIDogMCxcbiAgICAgICAgICAgIGkgICAgICA9IDAsXG4gICAgICAgICAgICBjaGlsZE5vZGU7XG5cbiAgICAgICAgZm9yICg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgY2hpbGROb2RlID0gdm5vZGUuY2hpbGROb2Rlc1tpXTtcbiAgICAgICAgICAgIHN0cmluZyArPSB0aGlzLmNyZWF0ZShjaGlsZE5vZGUsIG1vdmVkTm9kZXMpXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc3RyaW5nXG4gICAgfVxufTtcblxuY29uc3QgbnMgPSBOZW8ubnMoJ05lby52ZG9tLnV0aWwnLCB0cnVlKTtcbm5zLlN0cmluZ0Zyb21Wbm9kZSA9IFN0cmluZ0Zyb21Wbm9kZTtcblxuZXhwb3J0IGRlZmF1bHQgU3RyaW5nRnJvbVZub2RlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9