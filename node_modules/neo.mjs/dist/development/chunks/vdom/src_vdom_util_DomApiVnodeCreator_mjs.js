"use strict";
(self["webpackChunkneo_mjs"] = self["webpackChunkneo_mjs"] || []).push([["src_vdom_util_DomApiVnodeCreator_mjs"],{

/***/ "./src/vdom/util/DomApiVnodeCreator.mjs":
/*!**********************************************!*\
  !*** ./src/vdom/util/DomApiVnodeCreator.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const DomApiVnodeCreator = {
    /**
     * Recursively creates a VNode tree suitable for direct DOM API insertion.
     * This tree excludes any nodes that are marked as 'moved' within the movedNodes map,
     * as their DOM manipulation will be handled by separate moveNode deltas.
     *
     * @param {Neo.vdom.VNode} vnode        The VNode to process.
     * @param {Map}            [movedNodes] A map of VNodes that are being moved.
     * @returns {Object|null} A new VNode tree (or subtree) with moved nodes pruned, or null if the root is a moved node.
     */
    create(vnode, movedNodes) {
        /*
         * A vnode itself can be null (removeDom: true) => opt out.
         *
         * If the node has a componentId, there is nothing to do (scoped vdom updates), opt out.
         *
         * If this specific vnode is in the movedNodes map, it means its DOM element
         * will be moved by a separate delta. So, we should not include it in this fragment.
         */
        if (!vnode || vnode.componentId || (vnode.id && movedNodes?.get(vnode.id))) {
            return null // Prune this branch
        }

        // For text nodes, we can return the original VNode directly, as they have no childNodes array to modify.
        if (vnode.vtype === 'text') {
            return vnode
        }

        // For other VNodes (vnode or root), create a shallow clone first.
        let clonedVnode = {...vnode, childNodes: []};

        // Recursively process children
        if (vnode.childNodes.length > 0) {
            vnode.childNodes.forEach(child => {
                const processedChild = DomApiVnodeCreator.create(child, movedNodes);

                // Only add if not pruned
                if (processedChild) {
                    clonedVnode.childNodes.push(processedChild)
                }
            });
        }

        return clonedVnode
    }
};

const ns = Neo.ns('Neo.vdom.util', true);
ns.DomApiVnodeCreator = DomApiVnodeCreator;

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DomApiVnodeCreator);


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2h1bmtzL3Zkb20vc3JjX3Zkb21fdXRpbF9Eb21BcGlWbm9kZUNyZWF0b3JfbWpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGdCQUFnQjtBQUMvQixlQUFlLGdCQUFnQjtBQUMvQixpQkFBaUIsYUFBYTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDJCQUEyQjs7QUFFM0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsaUVBQWUsa0JBQWtCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZW8ubWpzLy4vc3JjL3Zkb20vdXRpbC9Eb21BcGlWbm9kZUNyZWF0b3IubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IERvbUFwaVZub2RlQ3JlYXRvciA9IHtcbiAgICAvKipcbiAgICAgKiBSZWN1cnNpdmVseSBjcmVhdGVzIGEgVk5vZGUgdHJlZSBzdWl0YWJsZSBmb3IgZGlyZWN0IERPTSBBUEkgaW5zZXJ0aW9uLlxuICAgICAqIFRoaXMgdHJlZSBleGNsdWRlcyBhbnkgbm9kZXMgdGhhdCBhcmUgbWFya2VkIGFzICdtb3ZlZCcgd2l0aGluIHRoZSBtb3ZlZE5vZGVzIG1hcCxcbiAgICAgKiBhcyB0aGVpciBET00gbWFuaXB1bGF0aW9uIHdpbGwgYmUgaGFuZGxlZCBieSBzZXBhcmF0ZSBtb3ZlTm9kZSBkZWx0YXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge05lby52ZG9tLlZOb2RlfSB2bm9kZSAgICAgICAgVGhlIFZOb2RlIHRvIHByb2Nlc3MuXG4gICAgICogQHBhcmFtIHtNYXB9ICAgICAgICAgICAgW21vdmVkTm9kZXNdIEEgbWFwIG9mIFZOb2RlcyB0aGF0IGFyZSBiZWluZyBtb3ZlZC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fG51bGx9IEEgbmV3IFZOb2RlIHRyZWUgKG9yIHN1YnRyZWUpIHdpdGggbW92ZWQgbm9kZXMgcHJ1bmVkLCBvciBudWxsIGlmIHRoZSByb290IGlzIGEgbW92ZWQgbm9kZS5cbiAgICAgKi9cbiAgICBjcmVhdGUodm5vZGUsIG1vdmVkTm9kZXMpIHtcbiAgICAgICAgLypcbiAgICAgICAgICogQSB2bm9kZSBpdHNlbGYgY2FuIGJlIG51bGwgKHJlbW92ZURvbTogdHJ1ZSkgPT4gb3B0IG91dC5cbiAgICAgICAgICpcbiAgICAgICAgICogSWYgdGhlIG5vZGUgaGFzIGEgY29tcG9uZW50SWQsIHRoZXJlIGlzIG5vdGhpbmcgdG8gZG8gKHNjb3BlZCB2ZG9tIHVwZGF0ZXMpLCBvcHQgb3V0LlxuICAgICAgICAgKlxuICAgICAgICAgKiBJZiB0aGlzIHNwZWNpZmljIHZub2RlIGlzIGluIHRoZSBtb3ZlZE5vZGVzIG1hcCwgaXQgbWVhbnMgaXRzIERPTSBlbGVtZW50XG4gICAgICAgICAqIHdpbGwgYmUgbW92ZWQgYnkgYSBzZXBhcmF0ZSBkZWx0YS4gU28sIHdlIHNob3VsZCBub3QgaW5jbHVkZSBpdCBpbiB0aGlzIGZyYWdtZW50LlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKCF2bm9kZSB8fCB2bm9kZS5jb21wb25lbnRJZCB8fCAodm5vZGUuaWQgJiYgbW92ZWROb2Rlcz8uZ2V0KHZub2RlLmlkKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsIC8vIFBydW5lIHRoaXMgYnJhbmNoXG4gICAgICAgIH1cblxuICAgICAgICAvLyBGb3IgdGV4dCBub2Rlcywgd2UgY2FuIHJldHVybiB0aGUgb3JpZ2luYWwgVk5vZGUgZGlyZWN0bHksIGFzIHRoZXkgaGF2ZSBubyBjaGlsZE5vZGVzIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgICAgaWYgKHZub2RlLnZ0eXBlID09PSAndGV4dCcpIHtcbiAgICAgICAgICAgIHJldHVybiB2bm9kZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gRm9yIG90aGVyIFZOb2RlcyAodm5vZGUgb3Igcm9vdCksIGNyZWF0ZSBhIHNoYWxsb3cgY2xvbmUgZmlyc3QuXG4gICAgICAgIGxldCBjbG9uZWRWbm9kZSA9IHsuLi52bm9kZSwgY2hpbGROb2RlczogW119O1xuXG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IHByb2Nlc3MgY2hpbGRyZW5cbiAgICAgICAgaWYgKHZub2RlLmNoaWxkTm9kZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdm5vZGUuY2hpbGROb2Rlcy5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9jZXNzZWRDaGlsZCA9IERvbUFwaVZub2RlQ3JlYXRvci5jcmVhdGUoY2hpbGQsIG1vdmVkTm9kZXMpO1xuXG4gICAgICAgICAgICAgICAgLy8gT25seSBhZGQgaWYgbm90IHBydW5lZFxuICAgICAgICAgICAgICAgIGlmIChwcm9jZXNzZWRDaGlsZCkge1xuICAgICAgICAgICAgICAgICAgICBjbG9uZWRWbm9kZS5jaGlsZE5vZGVzLnB1c2gocHJvY2Vzc2VkQ2hpbGQpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2xvbmVkVm5vZGVcbiAgICB9XG59O1xuXG5jb25zdCBucyA9IE5lby5ucygnTmVvLnZkb20udXRpbCcsIHRydWUpO1xubnMuRG9tQXBpVm5vZGVDcmVhdG9yID0gRG9tQXBpVm5vZGVDcmVhdG9yO1xuXG5leHBvcnQgZGVmYXVsdCBEb21BcGlWbm9kZUNyZWF0b3I7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=