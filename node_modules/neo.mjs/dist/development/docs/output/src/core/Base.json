{"classData":[{"comment":"/**\n * The base class for (almost) all classes inside the Neo namespace\n * Exceptions are e.g. core.IdGenerator, vdom.VNode\n * @class Neo.core.Base\n */","meta":{"filename":"Base.mjs","lineno":8,"columnno":0,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{}},"description":"<p>The base class for (almost) all classes inside the Neo namespace\nExceptions are e.g. core.IdGenerator, vdom.VNode</p>\n","kind":"class","name":"Base","memberof":"Neo.core","longname":"Neo.core.Base","scope":"static","$longname":"Neo.core.Base","$kind":"class","id":1766,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * You can define methods which should get delayed.\n     * Types are buffer, debounce & throttle.\n     * @example\n     *  delayable: {\n     *      fireChangeEvent: {\n     *          type : 'debounce',\n     *          timer: 300\n     *      }\n     *  }\n     * @member {Object} delayable={}\n     * @protected\n     * @static\n     */","meta":{"filename":"Base.mjs","lineno":28,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{}},"description":"<p>You can define methods which should get delayed.\nTypes are buffer, debounce &amp; throttle.</p>\n","examples":["delayable: {\n     fireChangeEvent: {\n         type : 'debounce',\n         timer: 300\n     }\n }"],"kind":"member","name":"delayable","type":{"names":["Object"]},"defaultvalue":"{}","access":"protected","scope":"static","longname":"delayable","$longname":"delayable","$kind":"property","id":1767,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Flag which will get set to true once manager.Instance got created\n     * @member {Boolean} instanceManagerAvailable=false\n     * @static\n     */","meta":{"filename":"Base.mjs","lineno":34,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{}},"description":"<p>Flag which will get set to true once manager.Instance got created</p>\n","kind":"member","name":"instanceManagerAvailable","type":{"names":["Boolean"]},"defaultvalue":false,"scope":"static","longname":"instanceManagerAvailable","$longname":"instanceManagerAvailable","$kind":"property","id":1768,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Regex to grab the MethodName from an error\n     * which is a second generation function\n     * @member {RegExp} methodNameRegex\n     * @static\n     */","meta":{"filename":"Base.mjs","lineno":41,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{}},"description":"<p>Regex to grab the MethodName from an error\nwhich is a second generation function</p>\n","kind":"member","name":"methodNameRegex","type":{"names":["RegExp"]},"scope":"static","longname":"methodNameRegex","$longname":"methodNameRegex","$kind":"property","id":1769,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * True automatically applies the core.Observable mixin\n     * @member {Boolean} observable=false\n     * @static\n     */","meta":{"filename":"Base.mjs","lineno":47,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{}},"description":"<p>True automatically applies the core.Observable mixin</p>\n","kind":"member","name":"observable","type":{"names":["Boolean"]},"defaultvalue":false,"scope":"static","longname":"observable","$longname":"observable","$kind":"property","id":1770,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Keep the overwritten methods\n     * @member {Object} overwrittenMethods={}\n     * @protected\n     * @static\n     */","meta":{"filename":"Base.mjs","lineno":54,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{}},"description":"<p>Keep the overwritten methods</p>\n","kind":"member","name":"overwrittenMethods","type":{"names":["Object"]},"defaultvalue":"{}","access":"protected","scope":"static","longname":"overwrittenMethods","$longname":"overwrittenMethods","$kind":"property","id":1771,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Configs will get merged throughout the class hierarchy\n     * @returns {Object} config\n     */","meta":{"range":[1751,3891],"filename":"Base.mjs","lineno":63,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100055509","name":"config","type":"ClassProperty"}},"description":"<p>Configs will get merged throughout the class hierarchy</p>\n","returns":[{"type":{"names":["Object"]},"description":"config"}],"name":"config","longname":"Base#config","kind":"member","memberof":"Base","scope":"instance","$longname":"Base#config","$kind":"property","id":1772,"neoClassName":"Neo.core.Base"},{"comment":"/**\n         * The class name which will get mapped into the Neo or app namespace\n         * @member {String} className='Neo.core.Base'\n         * @protected\n         */","meta":{"filename":"Base.mjs","lineno":65,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{}},"description":"<p>The class name which will get mapped into the Neo or app namespace</p>\n","kind":"member","name":"className","type":{"names":["String"]},"defaultvalue":"'Neo.core.Base'","access":"protected","longname":"className","scope":"global","$longname":"className","$kind":"property","id":1773,"neoClassName":"Neo.core.Base"},{"comment":"/**\n         * The class shortcut-name to use for e.g. creating child components inside a JSON-format\n         * @member {String} ntype='base'\n         * @protected\n         */","meta":{"filename":"Base.mjs","lineno":71,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{}},"description":"<p>The class shortcut-name to use for e.g. creating child components inside a JSON-format</p>\n","kind":"member","name":"ntype","type":{"names":["String"]},"defaultvalue":"'base'","access":"protected","longname":"ntype","scope":"global","$longname":"ntype","$kind":"property","id":1774,"neoClassName":"Neo.core.Base"},{"comment":"/**\n         * While it is recommended to change the static delayable configs on class level,\n         * you can change it on instance level too. If not null, we will do a deep merge.\n         * @member {Object} delayable=null\n         */","meta":{"filename":"Base.mjs","lineno":77,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{}},"description":"<p>While it is recommended to change the static delayable configs on class level,\nyou can change it on instance level too. If not null, we will do a deep merge.</p>\n","kind":"member","name":"delayable","type":{"names":["Object"]},"defaultvalue":null,"longname":"delayable","scope":"global","$longname":"delayable","$kind":"property","id":1775,"neoClassName":"Neo.core.Base"},{"comment":"/**\n         * The unique component id\n         * @member {String|null} id_=null\n         */","meta":{"filename":"Base.mjs","lineno":82,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{}},"description":"<p>The unique component id</p>\n","kind":"member","name":"id_","type":{"names":["String","null"]},"defaultvalue":null,"longname":"id_","scope":"global","$longname":"id_","$kind":"property","id":1776,"neoClassName":"Neo.core.Base"},{"comment":"/**\n         * Neo.create() will change this flag to true after the onConstructed() chain is done.\n         * @member {Boolean} isConstructed=false\n         * @protected\n         */","meta":{"filename":"Base.mjs","lineno":88,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{}},"description":"<p>Neo.create() will change this flag to true after the onConstructed() chain is done.</p>\n","kind":"member","name":"isConstructed","type":{"names":["Boolean"]},"defaultvalue":false,"access":"protected","longname":"isConstructed","scope":"global","$longname":"isConstructed","$kind":"property","id":1777,"neoClassName":"Neo.core.Base"},{"comment":"/**\n         * The config will get set to `true` once the Promise of `async initAsync()` is resolved.\n         * You can use `afterSetIsReady()` to get notified once the ready state is reached.\n         * Since not all classes use the Observable mixin, Neo will not fire an event.\n         * method body.\n         * @member {Boolean} isReady=false\n         */","meta":{"filename":"Base.mjs","lineno":96,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{}},"description":"<p>The config will get set to <code>true</code> once the Promise of <code>async initAsync()</code> is resolved.\nYou can use <code>afterSetIsReady()</code> to get notified once the ready state is reached.\nSince not all classes use the Observable mixin, Neo will not fire an event.\nmethod body.</p>\n","kind":"member","name":"isReady","type":{"names":["Boolean"]},"defaultvalue":false,"longname":"isReady","scope":"global","$longname":"isReady","$kind":"property","id":1778,"neoClassName":"Neo.core.Base"},{"comment":"/**\n         * Add mixins as an array of classNames, imported modules or a mixed version\n         * @member {String[]|Neo.core.Base[]|null} mixins=null\n         */","meta":{"filename":"Base.mjs","lineno":101,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{}},"description":"<p>Add mixins as an array of classNames, imported modules or a mixed version</p>\n","kind":"member","name":"mixins","type":{"names":["Array.<String>","Array.<Neo.core.Base>","null"]},"defaultvalue":null,"longname":"mixins","scope":"global","$longname":"mixins","$kind":"property","id":1779,"neoClassName":"Neo.core.Base"},{"comment":"/**\n         * You can create a new instance by passing an imported class (JS module default export)\n         * @member {Class} module=null\n         * @protected\n         */","meta":{"filename":"Base.mjs","lineno":107,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{}},"description":"<p>You can create a new instance by passing an imported class (JS module default export)</p>\n","kind":"member","name":"module","type":{"names":["Class"]},"defaultvalue":null,"access":"protected","longname":"module","scope":"global","$longname":"module","$kind":"property","id":1780,"neoClassName":"Neo.core.Base"},{"comment":"/**\n         * Remote method access for other threads. Example use case:\n         * remote: {app: ['myRemoteMethod']}\n         *\n         * ONLY supported for singletons.\n         *\n         * @member {Object|null} remote_=null\n         * @protected\n         */","meta":{"filename":"Base.mjs","lineno":117,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{}},"description":"<p>Remote method access for other threads. Example use case:\nremote: {app: [&#39;myRemoteMethod&#39;]}</p>\n<p>ONLY supported for singletons.</p>\n","kind":"member","name":"remote_","type":{"names":["Object","null"]},"defaultvalue":null,"access":"protected","longname":"remote_","scope":"global","$longname":"remote_","$kind":"property","id":1781,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Internal cache for all timeout ids when using this.timeout()\n     * @member {Number[]} timeoutIds=[]\n     * @private\n     */","meta":{"filename":"Base.mjs","lineno":125,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{}},"description":"<p>Internal cache for all timeout ids when using this.timeout()</p>\n","kind":"member","name":"timeoutIds","type":{"names":["Array.<Number>"]},"defaultvalue":"[]","access":"private","longname":"timeoutIds","scope":"global","$longname":"timeoutIds","$kind":"property","id":1782,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Applies the observable mixin if needed, grants remote access if needed.\n     * @param {Object} config={}\n     */","meta":{"range":[4187,5641],"filename":"Base.mjs","lineno":131,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100055531","name":"Base#construct","type":"MethodDefinition","paramnames":["config"]},"vars":{"":null}},"description":"<p>Applies the observable mixin if needed, grants remote access if needed.</p>\n","params":[{"type":{"names":["Object"]},"defaultvalue":"{}","name":"config"}],"name":"construct","longname":"Base#construct","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#construct","$kind":"method","id":1783,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Triggered after the id config got changed.\n     * You can dynamically change instance ids if needed. They need to stay unique at any given point.\n     * Use case: e.g. component based lists, where you want to re-use item instances.\n     * @param {String|null} value\n     * @param {String|null} oldValue\n     * @protected\n     */","meta":{"range":[5991,6554],"filename":"Base.mjs","lineno":190,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100055672","name":"Base#afterSetId","type":"MethodDefinition","paramnames":["value","oldValue"]},"vars":{"":null}},"description":"<p>Triggered after the id config got changed.\nYou can dynamically change instance ids if needed. They need to stay unique at any given point.\nUse case: e.g. component based lists, where you want to re-use item instances.</p>\n","params":[{"type":{"names":["String","null"]},"name":"value"},{"type":{"names":["String","null"]},"name":"oldValue"}],"access":"protected","name":"afterSetId","longname":"Base#afterSetId","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#afterSetId","$kind":"method","id":1784,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Adjusts all methods inside static delayable\n     */","meta":{"range":[6627,7287],"filename":"Base.mjs","lineno":215,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100055750","name":"Base#applyDelayable","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Adjusts all methods inside static delayable</p>\n","name":"applyDelayable","longname":"Base#applyDelayable","kind":"function","memberof":"Base","scope":"instance","params":[],"$longname":"Base#applyDelayable","$kind":"method","id":1785,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Applying overwrites and adding overwrittenMethods to the class constructors\n     * @param {Object} cfg\n     * @protected\n     */","meta":{"range":[7437,8126],"filename":"Base.mjs","lineno":238,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100055853","name":"Base.applyOverwrites","type":"MethodDefinition","paramnames":["cfg"]},"vars":{"":null}},"description":"<p>Applying overwrites and adding overwrittenMethods to the class constructors</p>\n","params":[{"type":{"names":["Object"]},"name":"cfg"}],"access":"protected","name":"applyOverwrites","longname":"Base.applyOverwrites","kind":"function","memberof":"Base","scope":"static","$longname":"Base.applyOverwrites","$kind":"method","id":1786,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Convenience method for beforeSet functions which test if a given value is inside a static array\n     * @param {String|Number} value\n     * @param {String|Number} oldValue\n     * @param {String} name config name\n     * @param {Array|String} [staticName=name + 's'] name of the static config array\n     * @returns {String|Number} value or oldValue\n     */","meta":{"range":[8501,8852],"filename":"Base.mjs","lineno":269,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100055922","name":"Base#beforeSetEnumValue","type":"MethodDefinition","paramnames":["value","oldValue","name","staticName"]},"vars":{"":null}},"description":"<p>Convenience method for beforeSet functions which test if a given value is inside a static array</p>\n","params":[{"type":{"names":["String","Number"]},"name":"value"},{"type":{"names":["String","Number"]},"name":"oldValue"},{"type":{"names":["String"]},"description":"<p>config name</p>\n","name":"name"},{"type":{"names":["Array","String"]},"optional":true,"defaultvalue":"name + 's'","description":"<p>name of the static config array</p>\n","name":"staticName"}],"returns":[{"type":{"names":["String","Number"]},"description":"value or oldValue"}],"name":"beforeSetEnumValue","longname":"Base#beforeSetEnumValue","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#beforeSetEnumValue","$kind":"method","id":1787,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Triggered before the remote config gets changed\n     * @param {Object|null} value\n     * @param {Object|null} oldValue\n     * @returns {Object|null}\n     * @protected\n     */","meta":{"range":[9048,9389],"filename":"Base.mjs","lineno":287,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100055973","name":"Base#beforeSetRemote","type":"MethodDefinition","paramnames":["value","oldValue"]},"vars":{"":null}},"description":"<p>Triggered before the remote config gets changed</p>\n","params":[{"type":{"names":["Object","null"]},"name":"value"},{"type":{"names":["Object","null"]},"name":"oldValue"}],"returns":[{"type":{"names":["Object","null"]}}],"access":"protected","name":"beforeSetRemote","longname":"Base#beforeSetRemote","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#beforeSetRemote","$kind":"method","id":1788,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * @param {String} fn               The name of a function to find in the passed scope object.\n     * @param {Object} originName       The name of the method inside the originScope.\n     * @param {Object} scope            The scope to find the function in if it is specified as a string.\n     * @param {Object} originScope=this The scope where the function is located.\n     */","meta":{"range":[9784,10023],"filename":"Base.mjs","lineno":304,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100056006","name":"Base#bindCallback","type":"MethodDefinition","paramnames":["fn","originName","scope","originScope"]},"vars":{"":null}},"params":[{"type":{"names":["String"]},"description":"<p>The name of a function to find in the passed scope object.</p>\n","name":"fn"},{"type":{"names":["Object"]},"description":"<p>The name of the method inside the originScope.</p>\n","name":"originName"},{"type":{"names":["Object"]},"description":"<p>The scope to find the function in if it is specified as a string.</p>\n","name":"scope"},{"type":{"names":["Object"]},"defaultvalue":"this","description":"<p>The scope where the function is located.</p>\n","name":"originScope"}],"name":"bindCallback","longname":"Base#bindCallback","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#bindCallback","$kind":"method","id":1789,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * From within an overwrite, a method can call a parent method, by using callOverwritten.\n     *\n     * @example\n     *    afterSetHeight(value, oldValue) {\n     *        // do the standard\n     *        this.callOverwritten(...arguments);\n     *        // do you own stuff\n     *    }\n     *\n     * We create an error to get the caller.name and then run that method on the constructor.\n     * This is based on the following error structure, e.g. afterSetHeight.\n     *\n     *     Error\n     *         at Base.callOverwritten (Base.mjs:176:21)\n     *         at Base.afterSetHeight (Overrides.mjs:19:26)\n     *\n     * @param args\n     */","meta":{"range":[10679,10905],"filename":"Base.mjs","lineno":330,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100056048","name":"Base#callOverwritten","type":"MethodDefinition","paramnames":["args"]},"vars":{"":null}},"description":"<p>From within an overwrite, a method can call a parent method, by using callOverwritten.</p>\n","examples":["afterSetHeight(value, oldValue) {\n       // do the standard\n       this.callOverwritten(...arguments);\n       // do you own stuff\n   }\n\nWe create an error to get the caller.name and then run that method on the constructor.\nThis is based on the following error structure, e.g. afterSetHeight.\n\n    Error\n        at Base.callOverwritten (Base.mjs:176:21)\n        at Base.afterSetHeight (Overrides.mjs:19:26)"],"params":[{"name":"args","variable":true}],"name":"callOverwritten","longname":"Base#callOverwritten","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#callOverwritten","$kind":"method","id":1790,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Uses the IdGenerator to create an id if a static one is not explicitly set.\n     * Registers the instance to manager.Instance if this one is already created,\n     * otherwise stores it inside a tmp map.\n     * @param {String} id\n     */","meta":{"range":[11163,11242],"filename":"Base.mjs","lineno":343,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100056088","name":"Base#createId","type":"MethodDefinition","paramnames":["id"]},"vars":{"":null}},"description":"<p>Uses the IdGenerator to create an id if a static one is not explicitly set.\nRegisters the instance to manager.Instance if this one is already created,\notherwise stores it inside a tmp map.</p>\n","params":[{"type":{"names":["String"]},"name":"id"}],"name":"createId","longname":"Base#createId","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#createId","$kind":"method","id":1791,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Unregisters this instance from Neo.manager.Instance\n     * and removes all object entries from this instance\n     */","meta":{"range":[11380,12213],"filename":"Base.mjs","lineno":351,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100056108","name":"Base#destroy","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Unregisters this instance from Neo.manager.Instance\nand removes all object entries from this instance</p>\n","name":"destroy","longname":"Base#destroy","kind":"function","memberof":"Base","scope":"instance","params":[],"$longname":"Base#destroy","$kind":"method","id":1792,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Used inside createId() as the default value passed to the IdGenerator.\n     * Override this method as needed.\n     * @returns {String}\n     */","meta":{"range":[12377,12421],"filename":"Base.mjs","lineno":386,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100056221","name":"Base#getIdKey","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Used inside createId() as the default value passed to the IdGenerator.\nOverride this method as needed.</p>\n","returns":[{"type":{"names":["String"]}}],"name":"getIdKey","longname":"Base#getIdKey","kind":"function","memberof":"Base","scope":"instance","params":[],"$longname":"Base#getIdKey","$kind":"method","id":1793,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Returns the value of a static config key or the staticConfig object itself in case no value is set\n     * @param {String} key The key of a staticConfig defined inside static getStaticConfig\n     * @returns {*}\n     */","meta":{"range":[12660,12725],"filename":"Base.mjs","lineno":395,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100056229","name":"Base#getStaticConfig","type":"MethodDefinition","paramnames":["key"]},"vars":{"":null}},"description":"<p>Returns the value of a static config key or the staticConfig object itself in case no value is set</p>\n","params":[{"type":{"names":["String"]},"description":"<p>The key of a staticConfig defined inside static getStaticConfig</p>\n","name":"key"}],"returns":[{"type":{"names":["*"]}}],"name":"getStaticConfig","longname":"Base#getStaticConfig","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#getStaticConfig","$kind":"method","id":1794,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Check if a given ntype exists inside the proto chain, including the top level class\n     * @param {String} ntype\n     * @returns {Boolean}\n     */","meta":{"range":[12893,12975],"filename":"Base.mjs","lineno":404,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100056240","name":"Base#hasNtype","type":"MethodDefinition","paramnames":["ntype"]},"vars":{"":null}},"description":"<p>Check if a given ntype exists inside the proto chain, including the top level class</p>\n","params":[{"type":{"names":["String"]},"name":"ntype"}],"returns":[{"type":{"names":["Boolean"]}}],"name":"hasNtype","longname":"Base#hasNtype","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#hasNtype","$kind":"method","id":1795,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Gets triggered after onConstructed() is done\n     */","meta":{"range":[13049,13058],"filename":"Base.mjs","lineno":411,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100056255","name":"Base#init","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Gets triggered after onConstructed() is done</p>\n","name":"init","longname":"Base#init","kind":"function","memberof":"Base","scope":"instance","params":[],"$longname":"Base#init","$kind":"method","id":1796,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * You can use this method in subclasses to perform asynchronous initialization logic.\n     * Make sure to use the parent call `await super.initAsync()` at the beginning of their implementations,\n     * or the registration of remote methods will get delayed.\n     *\n     * A common use case is requiring conditional or optional dynamic imports or fetching initial data.\n     *\n     * Once the promise returned by this method is fulfilled, the `isReady` config will be set to `true`.\n     * @returns {Promise<void>} A promise that resolves when the asynchronous initialization is complete.\n     */","meta":{"range":[13673,13739],"filename":"Base.mjs","lineno":423,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100056259","name":"Base#initAsync","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>You can use this method in subclasses to perform asynchronous initialization logic.\nMake sure to use the parent call <code>await super.initAsync()</code> at the beginning of their implementations,\nor the registration of remote methods will get delayed.</p>\n<p>A common use case is requiring conditional or optional dynamic imports or fetching initial data.</p>\n<p>Once the promise returned by this method is fulfilled, the <code>isReady</code> config will be set to <code>true</code>.</p>\n","returns":[{"type":{"names":["Promise.<void>"]},"description":"A promise that resolves when the asynchronous initialization is complete."}],"name":"initAsync","longname":"Base#initAsync","kind":"function","memberof":"Base","scope":"instance","params":[],"async":true,"$longname":"Base#initAsync","$kind":"method","id":1797,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Applies all class configs to this instance\n     * @param {Object} config\n     * @param {Boolean} [preventOriginalConfig] True prevents the instance from getting an originalConfig property\n     * @protected\n     */","meta":{"range":[13974,14231],"filename":"Base.mjs","lineno":433,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100056272","name":"Base#initConfig","type":"MethodDefinition","paramnames":["config","preventOriginalConfig"]},"vars":{"":null}},"description":"<p>Applies all class configs to this instance</p>\n","params":[{"type":{"names":["Object"]},"name":"config"},{"type":{"names":["Boolean"]},"optional":true,"description":"<p>True prevents the instance from getting an originalConfig property</p>\n","name":"preventOriginalConfig"}],"access":"protected","name":"initConfig","longname":"Base#initConfig","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#initConfig","$kind":"method","id":1798,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Does get triggered with a delay to ensure that Neo.workerId & Neo.worker.Manager are defined\n     * Remote method access via promises\n     * @protected\n     */","meta":{"range":[14412,14903],"filename":"Base.mjs","lineno":447,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100056313","name":"Base#initRemote","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Does get triggered with a delay to ensure that Neo.workerId &amp; Neo.worker.Manager are defined\nRemote method access via promises</p>\n","access":"protected","name":"initRemote","longname":"Base#initRemote","kind":"function","memberof":"Base","scope":"instance","params":[],"$longname":"Base#initRemote","$kind":"method","id":1799,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Intercepts destroy() calls to ensure they will only get called once\n     * @returns {Boolean}\n     */","meta":{"range":[15026,15085],"filename":"Base.mjs","lineno":466,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100056381","name":"Base#isDestroyedCheck","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Intercepts destroy() calls to ensure they will only get called once</p>\n","returns":[{"type":{"names":["Boolean"]}}],"name":"isDestroyedCheck","longname":"Base#isDestroyedCheck","kind":"function","memberof":"Base","scope":"instance","params":[],"$longname":"Base#isDestroyedCheck","$kind":"method","id":1800,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Override this method to change the order configs are applied to this instance.\n     * @param {Object} config\n     * @param {Boolean} [preventOriginalConfig] True prevents the instance from getting an originalConfig property\n     * @returns {Object} config\n     * @protected\n     */","meta":{"range":[15388,15780],"filename":"Base.mjs","lineno":477,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100056390","name":"Base#mergeConfig","type":"MethodDefinition","paramnames":["config","preventOriginalConfig"]},"vars":{"":null}},"description":"<p>Override this method to change the order configs are applied to this instance.</p>\n","params":[{"type":{"names":["Object"]},"name":"config"},{"type":{"names":["Boolean"]},"optional":true,"description":"<p>True prevents the instance from getting an originalConfig property</p>\n","name":"preventOriginalConfig"}],"returns":[{"type":{"names":["Object"]},"description":"config"}],"access":"protected","name":"mergeConfig","longname":"Base#mergeConfig","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#mergeConfig","$kind":"method","id":1801,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     *\n     */","meta":{"range":[15809,16046],"filename":"Base.mjs","lineno":495,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100056443","name":"Base#onAfterConstructed","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"name":"onAfterConstructed","longname":"Base#onAfterConstructed","kind":"function","memberof":"Base","scope":"instance","params":[],"$longname":"Base#onAfterConstructed","$kind":"method","id":1802,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Gets triggered after all constructors are done\n     * @tutorial 02_ClassSystem\n     */","meta":{"range":[16154,16172],"filename":"Base.mjs","lineno":508,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100056470","name":"Base#onConstructed","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Gets triggered after all constructors are done</p>\n","tags":[{"originalTitle":"tutorial","title":"tutorial","text":"02_ClassSystem","value":"02_ClassSystem"}],"name":"onConstructed","longname":"Base#onConstructed","kind":"function","memberof":"Base","scope":"instance","params":[],"$longname":"Base#onConstructed","$kind":"method","id":1803,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Helper method to replace string based values containing \"@config:\" with the matching config value\n     * of this instance.\n     * @param {Object|Object[]} items\n     */","meta":{"range":[16362,17877],"filename":"Base.mjs","lineno":515,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100056474","name":"Base#parseItemConfigs","type":"MethodDefinition","paramnames":["items"]},"vars":{"":null}},"description":"<p>Helper method to replace string based values containing &quot;@config:&quot; with the matching config value\nof this instance.</p>\n","params":[{"type":{"names":["Object","Array.<Object>"]},"name":"items"}],"name":"parseItemConfigs","longname":"Base#parseItemConfigs","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#parseItemConfigs","$kind":"method","id":1804,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * When using set(), configs without a trailing underscore can already be assigned,\n     * so the hasOwnProperty() check will return true\n     * @param {Boolean} [forceAssign=false]\n     * @protected\n     */","meta":{"range":[18103,19033],"filename":"Base.mjs","lineno":558,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100056645","name":"Base#processConfigs","type":"MethodDefinition","paramnames":["forceAssign"]},"vars":{"":null}},"description":"<p>When using set(), configs without a trailing underscore can already be assigned,\nso the hasOwnProperty() check will return true</p>\n","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"name":"forceAssign"}],"access":"protected","name":"processConfigs","longname":"Base#processConfigs","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#processConfigs","$kind":"method","id":1805,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * @param {String} className\n     * @param {Object} remote\n     * @protected\n     */","meta":{"range":[19136,19595],"filename":"Base.mjs","lineno":585,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100056719","name":"Base.sendRemotes","type":"MethodDefinition","paramnames":["className","remote"]},"vars":{"":null}},"params":[{"type":{"names":["String"]},"name":"className"},{"type":{"names":["Object"]},"name":"remote"}],"access":"protected","name":"sendRemotes","longname":"Base.sendRemotes","kind":"function","memberof":"Base","scope":"static","$longname":"Base.sendRemotes","$kind":"method","id":1806,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Change multiple configs at once, ensuring that all afterSet methods get all new assigned values\n     * @param {Object} values={}\n     */","meta":{"range":[19753,20258],"filename":"Base.mjs","lineno":605,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100056777","name":"Base#set","type":"MethodDefinition","paramnames":["values"]},"vars":{"":null}},"description":"<p>Change multiple configs at once, ensuring that all afterSet methods get all new assigned values</p>\n","params":[{"type":{"names":["Object"]},"defaultvalue":"{}","name":"values"}],"name":"set","longname":"Base#set","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#set","$kind":"method","id":1807,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * We want to assign class fields first and remove them from the config object,\n     * so that afterSet(), beforeGet() and beforeSet() methods can get the new values right away\n     * @param {Object} config\n     * @returns {Object}\n     * @protected\n     */","meta":{"range":[20534,20903],"filename":"Base.mjs","lineno":629,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100056835","name":"Base#setFields","type":"MethodDefinition","paramnames":["config"]},"vars":{"":null}},"description":"<p>We want to assign class fields first and remove them from the config object,\nso that afterSet(), beforeGet() and beforeSet() methods can get the new values right away</p>\n","params":[{"type":{"names":["Object"]},"name":"config"}],"returns":[{"type":{"names":["Object"]}}],"access":"protected","name":"setFields","longname":"Base#setFields","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#setFields","$kind":"method","id":1808,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Sets the value of a static config by a given key\n     * @param {String} key The key of a staticConfig defined inside static getStaticConfig\n     * @param {*} value\n     * @returns {Boolean} true in case the config exists and got changed\n     */","meta":{"range":[21169,21406],"filename":"Base.mjs","lineno":649,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100056892","name":"Base#setStaticConfig","type":"MethodDefinition","paramnames":["key","value"]},"vars":{"":null}},"description":"<p>Sets the value of a static config by a given key</p>\n","params":[{"type":{"names":["String"]},"description":"<p>The key of a staticConfig defined inside static getStaticConfig</p>\n","name":"key"},{"type":{"names":["*"]},"name":"value"}],"returns":[{"type":{"names":["Boolean"]},"description":"true in case the config exists and got changed"}],"name":"setStaticConfig","longname":"Base#setStaticConfig","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#setStaticConfig","$kind":"method","id":1809,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Stores timeoutIds internally, so that destroy() can clear them if needed\n     * @param {Number} time in milliseconds\n     * @returns {Promise<any>}\n     */","meta":{"range":[21583,21861],"filename":"Base.mjs","lineno":665,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100056923","name":"Base#timeout","type":"MethodDefinition","paramnames":["time"]},"vars":{"":null}},"description":"<p>Stores timeoutIds internally, so that destroy() can clear them if needed</p>\n","params":[{"type":{"names":["Number"]},"description":"<p>in milliseconds</p>\n","name":"time"}],"returns":[{"type":{"names":["Promise.<any>"]}}],"name":"timeout","longname":"Base#timeout","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#timeout","$kind":"method","id":1810,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * <p>Enhancing the toString() method, e.g.</p>\n     * `Neo.create('Neo.button.Base').toString() => \"[object Neo.button.Base (neo-button-1)]\"`\n     * @returns {String}\n     */","meta":{"range":[22055,22141],"filename":"Base.mjs","lineno":684,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100056968","name":"Base#Symbol.toStringTag","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Enhancing the toString() method, e.g.</p>\n`Neo.create('Neo.button.Base').toString() => \"[object Neo.button.Base (neo-button-1)]\"`","returns":[{"type":{"names":["String"]}}],"name":"toStringTag","longname":"Base#Symbol.toStringTag","kind":"member","memberof":"Base#Symbol","scope":"static","params":[],"$longname":"Base#Symbol.toStringTag","$kind":"property","id":1811,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * <p>Enhancing the instanceof method. Without this change:</p>\n     * `Neo.collection.Base.prototype instanceof Neo.core.Base => true`\n     * <p>With this change:</p>\n     * `Neo.collection.Base.prototype instanceof Neo.core.Base => false`<br>\n     * `Neo.create(Neo.collection.Base) instanceof Neo.core.Base => true`\n     * @returns {Boolean}\n     */","meta":{"range":[22512,22709],"filename":"Base.mjs","lineno":691,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100056985","name":"Base.Symbol.hasInstance","type":"MethodDefinition","paramnames":["instance"]},"vars":{"":null}},"description":"<p>Enhancing the instanceof method. Without this change:</p>\n`Neo.collection.Base.prototype instanceof Neo.core.Base => true`\n<p>With this change:</p>\n`Neo.collection.Base.prototype instanceof Neo.core.Base => false`<br>\n`Neo.create(Neo.collection.Base) instanceof Neo.core.Base => true`","returns":[{"type":{"names":["Boolean"]}}],"name":"hasInstance","longname":"Base.Symbol.hasInstance","kind":"function","memberof":"Base.Symbol","scope":"static","params":[],"$longname":"Base.Symbol.hasInstance","$kind":"method","id":1812,"neoClassName":"Neo.core.Base"}]}