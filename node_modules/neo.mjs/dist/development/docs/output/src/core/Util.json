{"classData":[{"comment":"/**\n * @class Neo.core.Util\n */","meta":{"filename":"Util.mjs","lineno":1,"columnno":0,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{}},"kind":"class","name":"Util","memberof":"Neo.core","longname":"Neo.core.Util","scope":"static","$longname":"Neo.core.Util","$kind":"class","id":1891,"neoClassName":"Neo.core.Util"},{"comment":"/**\n     * A regex to remove camel case syntax\n     * @member {RegExp} decamelRegEx=/([a-z])([A-Z])/g\n     * @protected\n     * @static\n     */","meta":{"filename":"Util.mjs","lineno":11,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{}},"description":"<p>A regex to remove camel case syntax</p>\n","kind":"member","name":"decamelRegEx","type":{"names":["RegExp"]},"defaultvalue":"/([a-z])([A-Z])/g","access":"protected","scope":"static","longname":"decamelRegEx","$longname":"decamelRegEx","$kind":"property","id":1892,"neoClassName":"Neo.core.Util"},{"comment":"/**\n     * @param {Object} scope\n     * @param {String[]} values\n     */","meta":{"range":[318,456],"filename":"Util.mjs","lineno":17,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100059107","name":"Util.bindMethods","type":"MethodDefinition","paramnames":["scope","values"]},"vars":{"":null}},"params":[{"type":{"names":["Object"]},"name":"scope"},{"type":{"names":["Array.<String>"]},"name":"values"}],"name":"bindMethods","longname":"Util.bindMethods","kind":"function","memberof":"Util","scope":"static","$longname":"Util.bindMethods","$kind":"method","id":1893,"neoClassName":"Neo.core.Util"},{"comment":"/**\n     * Transforms a styles string into a styles object using camelcase syntax\n     * @param {String} string The styles string to parse\n     * @returns {Object} The camelcase styles object\n     */","meta":{"range":[666,1526],"filename":"Util.mjs","lineno":28,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100059133","name":"Util.createStyleObject","type":"MethodDefinition","paramnames":["string"]},"vars":{"":null}},"description":"<p>Transforms a styles string into a styles object using camelcase syntax</p>\n","params":[{"type":{"names":["String"]},"description":"<p>The styles string to parse</p>\n","name":"string"}],"returns":[{"type":{"names":["Object"]},"description":"The camelcase styles object"}],"name":"createStyleObject","longname":"Util.createStyleObject","kind":"function","memberof":"Util","scope":"static","$longname":"Util.createStyleObject","$kind":"method","id":1894,"neoClassName":"Neo.core.Util"},{"comment":"/**\n     * Converts a styles object which can use camelcase syntax into a styles string\n     * @param {Object} styles The styles object\n     * @returns {String} The styles string (DOM ready)\n     */","meta":{"range":[1735,2022],"filename":"Util.mjs","lineno":60,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100059225","name":"Util.createStyles","type":"MethodDefinition","paramnames":["styles"]},"vars":{"":null}},"description":"<p>Converts a styles object which can use camelcase syntax into a styles string</p>\n","params":[{"type":{"names":["Object"]},"description":"<p>The styles object</p>\n","name":"styles"}],"returns":[{"type":{"names":["String"]},"description":"The styles string (DOM ready)"}],"name":"createStyles","longname":"Util.createStyles","kind":"function","memberof":"Util","scope":"static","$longname":"Util.createStyles","$kind":"method","id":1895,"neoClassName":"Neo.core.Util"},{"comment":"/**\n     * Transforms all uppercase characters of a string into -lowercase.\n     * Does not touch special characters.\n     * @param {String} value The input containing uppercase characters\n     * @returns {String} The lowercase output\n     */","meta":{"range":[2275,2375],"filename":"Util.mjs","lineno":78,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100059271","name":"Util.decamel","type":"MethodDefinition","paramnames":["value"]},"vars":{"":null}},"description":"<p>Transforms all uppercase characters of a string into -lowercase.\nDoes not touch special characters.</p>\n","params":[{"type":{"names":["String"]},"description":"<p>The input containing uppercase characters</p>\n","name":"value"}],"returns":[{"type":{"names":["String"]},"description":"The lowercase output"}],"name":"decamel","longname":"Util.decamel","kind":"function","memberof":"Util","scope":"static","$longname":"Util.decamel","$kind":"method","id":1896,"neoClassName":"Neo.core.Util"},{"comment":"/**\n     * Returns true if the passed value is an array\n     * @param {Object} value The value to test\n     * @returns {Boolean}\n     */","meta":{"range":[2522,2587],"filename":"Util.mjs","lineno":87,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100059288","name":"Util.isArray","type":"MethodDefinition","paramnames":["value"]},"vars":{"":null}},"description":"<p>Returns true if the passed value is an array</p>\n","params":[{"type":{"names":["Object"]},"description":"<p>The value to test</p>\n","name":"value"}],"returns":[{"type":{"names":["Boolean"]}}],"name":"isArray","longname":"Util.isArray","kind":"function","memberof":"Util","scope":"static","$longname":"Util.isArray","$kind":"method","id":1897,"neoClassName":"Neo.core.Util"},{"comment":"/**\n     * Returns true if the passed value is a boolean\n     * @param {Object} value The value to test\n     * @returns {Boolean}\n     */","meta":{"range":[2735,2808],"filename":"Util.mjs","lineno":96,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100059299","name":"Util.isBoolean","type":"MethodDefinition","paramnames":["value"]},"vars":{"":null}},"description":"<p>Returns true if the passed value is a boolean</p>\n","params":[{"type":{"names":["Object"]},"description":"<p>The value to test</p>\n","name":"value"}],"returns":[{"type":{"names":["Boolean"]}}],"name":"isBoolean","longname":"Util.isBoolean","kind":"function","memberof":"Util","scope":"static","$longname":"Util.isBoolean","$kind":"method","id":1898,"neoClassName":"Neo.core.Util"},{"comment":"/**\n     * Returns true if the passed value is not undefined\n     * @param {Object} value The value to test\n     * @returns {Boolean}\n     */","meta":{"range":[2960,3035],"filename":"Util.mjs","lineno":105,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100059309","name":"Util.isDefined","type":"MethodDefinition","paramnames":["value"]},"vars":{"":null}},"description":"<p>Returns true if the passed value is not undefined</p>\n","params":[{"type":{"names":["Object"]},"description":"<p>The value to test</p>\n","name":"value"}],"returns":[{"type":{"names":["Boolean"]}}],"name":"isDefined","longname":"Util.isDefined","kind":"function","memberof":"Util","scope":"static","$longname":"Util.isDefined","$kind":"method","id":1899,"neoClassName":"Neo.core.Util"},{"comment":"/**\n     * Returns true if the passed value is an empty Array, Object or String\n     * @param {Array|Object|String} value The value to test\n     * @returns {Boolean}\n     */","meta":{"range":[3219,3692],"filename":"Util.mjs","lineno":114,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100059319","name":"Util.isEmpty","type":"MethodDefinition","paramnames":["value"]},"vars":{"":null}},"description":"<p>Returns true if the passed value is an empty Array, Object or String</p>\n","params":[{"type":{"names":["Array","Object","String"]},"description":"<p>The value to test</p>\n","name":"value"}],"returns":[{"type":{"names":["Boolean"]}}],"name":"isEmpty","longname":"Util.isEmpty","kind":"function","memberof":"Util","scope":"static","$longname":"Util.isEmpty","$kind":"method","id":1900,"neoClassName":"Neo.core.Util"},{"comment":"/**\n     * Returns true if the passed value is a function\n     * @param {Function} value The value to test\n     * @returns {Boolean}\n     */","meta":{"range":[3843,3918],"filename":"Util.mjs","lineno":143,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100059385","name":"Util.isFunction","type":"MethodDefinition","paramnames":["value"]},"vars":{"":null}},"description":"<p>Returns true if the passed value is a function</p>\n","params":[{"type":{"names":["function"]},"description":"<p>The value to test</p>\n","name":"value"}],"returns":[{"type":{"names":["Boolean"]}}],"name":"isFunction","longname":"Util.isFunction","kind":"function","memberof":"Util","scope":"static","$longname":"Util.isFunction","$kind":"method","id":1901,"neoClassName":"Neo.core.Util"},{"comment":"/**\n     * Returns true if the passed value is a number. Returns false for non-finite numbers\n     * @param {Number} value The value to test\n     * @returns {Boolean}\n     */","meta":{"range":[4103,4192],"filename":"Util.mjs","lineno":152,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100059395","name":"Util.isNumber","type":"MethodDefinition","paramnames":["value"]},"vars":{"":null}},"description":"<p>Returns true if the passed value is a number. Returns false for non-finite numbers</p>\n","params":[{"type":{"names":["Number"]},"description":"<p>The value to test</p>\n","name":"value"}],"returns":[{"type":{"names":["Boolean"]}}],"name":"isNumber","longname":"Util.isNumber","kind":"function","memberof":"Util","scope":"static","$longname":"Util.isNumber","$kind":"method","id":1902,"neoClassName":"Neo.core.Util"},{"comment":"/**\n     * Returns true if the passed value is an object\n     * @param {Object} value The value to test\n     * @returns {Boolean}\n     */","meta":{"range":[4340,4423],"filename":"Util.mjs","lineno":161,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100059409","name":"Util.isObject","type":"MethodDefinition","paramnames":["value"]},"vars":{"":null}},"description":"<p>Returns true if the passed value is an object</p>\n","params":[{"type":{"names":["Object"]},"description":"<p>The value to test</p>\n","name":"value"}],"returns":[{"type":{"names":["Boolean"]}}],"name":"isObject","longname":"Util.isObject","kind":"function","memberof":"Util","scope":"static","$longname":"Util.isObject","$kind":"method","id":1903,"neoClassName":"Neo.core.Util"},{"comment":"/**\n     * Returns true if the passed value is a promise.\n     * We are intentionally not checking for `value instanceof Promise`,\n     * to support any \"thenable\" objects for flexibility.\n     * @param {Object} value The value to test\n     * @returns {Boolean}\n     */","meta":{"range":[4703,4783],"filename":"Util.mjs","lineno":172,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100059418","name":"Util.isPromise","type":"MethodDefinition","paramnames":["value"]},"vars":{"":null}},"description":"<p>Returns true if the passed value is a promise.\nWe are intentionally not checking for <code>value instanceof Promise</code>,\nto support any &quot;thenable&quot; objects for flexibility.</p>\n","params":[{"type":{"names":["Object"]},"description":"<p>The value to test</p>\n","name":"value"}],"returns":[{"type":{"names":["Boolean"]}}],"name":"isPromise","longname":"Util.isPromise","kind":"function","memberof":"Util","scope":"static","$longname":"Util.isPromise","$kind":"method","id":1904,"neoClassName":"Neo.core.Util"},{"comment":"/**\n     * Returns true if the passed value is a neo data record\n     * @param {Object} value The value to test\n     * @returns {Boolean}\n     */","meta":{"range":[4939,5022],"filename":"Util.mjs","lineno":181,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100059428","name":"Util.isRecord","type":"MethodDefinition","paramnames":["value"]},"vars":{"":null}},"description":"<p>Returns true if the passed value is a neo data record</p>\n","params":[{"type":{"names":["Object"]},"description":"<p>The value to test</p>\n","name":"value"}],"returns":[{"type":{"names":["Boolean"]}}],"name":"isRecord","longname":"Util.isRecord","kind":"function","memberof":"Util","scope":"static","$longname":"Util.isRecord","$kind":"method","id":1905,"neoClassName":"Neo.core.Util"},{"comment":"/**\n     * Returns true if the passed value is a string\n     * @param {String} value The value to test\n     * @returns {Boolean}\n     */","meta":{"range":[5169,5240],"filename":"Util.mjs","lineno":190,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100059437","name":"Util.isString","type":"MethodDefinition","paramnames":["value"]},"vars":{"":null}},"description":"<p>Returns true if the passed value is a string</p>\n","params":[{"type":{"names":["String"]},"description":"<p>The value to test</p>\n","name":"value"}],"returns":[{"type":{"names":["Boolean"]}}],"name":"isString","longname":"Util.isString","kind":"function","memberof":"Util","scope":"static","$longname":"Util.isString","$kind":"method","id":1906,"neoClassName":"Neo.core.Util"},{"comment":"/**\n     * Converts any iterable (strings, numeric indices and a length property) into a true array\n     * @param {Object|String} iterable\n     * @param {Number} [start=0] start index\n     * @param {Number} [end=iterable.length] end index\n     * @returns {Array}\n     */","meta":{"range":[5521,5838],"filename":"Util.mjs","lineno":201,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100059447","name":"Util.toArray","type":"MethodDefinition","paramnames":["iterable","start","end"]},"vars":{"":null}},"description":"<p>Converts any iterable (strings, numeric indices and a length property) into a true array</p>\n","params":[{"type":{"names":["Object","String"]},"name":"iterable"},{"type":{"names":["Number"]},"optional":true,"defaultvalue":0,"description":"<p>start index</p>\n","name":"start"},{"type":{"names":["Number"]},"optional":true,"defaultvalue":"iterable.length","description":"<p>end index</p>\n","name":"end"}],"returns":[{"type":{"names":["Array"]}}],"name":"toArray","longname":"Util.toArray","kind":"function","memberof":"Util","scope":"static","$longname":"Util.toArray","$kind":"method","id":1907,"neoClassName":"Neo.core.Util"}]}