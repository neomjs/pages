{"classData":[{"comment":"/**\n * Represents an observable container for a config property.\n * This class manages the value of a config, its subscribers, and custom behaviors\n * like merge strategies and equality checks defined via a descriptor object.\n *\n * The primary purpose of this class is to enable fine-grained reactivity and\n * decoupled cross-instance state sharing within the Neo.mjs framework.\n * @class Neo.core.Config\n * @private\n * @internal\n */","meta":{"filename":"Config.mjs","lineno":4,"columnno":0,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{}},"description":"<p>Represents an observable container for a config property.\nThis class manages the value of a config, its subscribers, and custom behaviors\nlike merge strategies and equality checks defined via a descriptor object.</p>\n<p>The primary purpose of this class is to enable fine-grained reactivity and\ndecoupled cross-instance state sharing within the Neo.mjs framework.</p>\n","kind":"class","name":"Config","access":"private","tags":[{"originalTitle":"internal","title":"internal","text":""}],"memberof":"Neo.core","longname":"Neo.core.Config","scope":"static","$longname":"Neo.core.Config","$kind":"class","id":1873,"neoClassName":"Neo.core.Config"},{"comment":"/**\n     * A Set to store callback functions that subscribe to changes in this config's value.\n     * @private\n     */","meta":{"range":[677,694],"filename":"Config.mjs","lineno":24,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100058667","name":"subscribers","type":"ClassPrivateProperty"}},"description":"<p>A Set to store callback functions that subscribe to changes in this config&#39;s value.</p>\n","access":"private","name":"subscribers","longname":"Config#subscribers","kind":"member","memberof":"Config","scope":"instance","$longname":"Config#subscribers","$kind":"property","id":1874,"neoClassName":"Neo.core.Config"},{"comment":"/**\n     * The internal value of the config property.\n     * @member #value\n     * @private\n     */","meta":{"filename":"Config.mjs","lineno":26,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{}},"description":"<p>The internal value of the config property.</p>\n","kind":"member","name":"#value","access":"private","longname":"#value","scope":"global","$longname":"#value","$kind":"property","id":1875,"neoClassName":"Neo.core.Config"},{"comment":"/**\n     * The cloning strategy to use when setting a new value.\n     * Supported values: 'deep', 'shallow', 'none'.\n     * @member {String} clone='deep'\n     */","meta":{"filename":"Config.mjs","lineno":32,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{}},"description":"<p>The cloning strategy to use when setting a new value.\nSupported values: &#39;deep&#39;, &#39;shallow&#39;, &#39;none&#39;.</p>\n","kind":"member","name":"clone","type":{"names":["String"]},"defaultvalue":"'deep'","longname":"clone","scope":"global","$longname":"clone","$kind":"property","id":1876,"neoClassName":"Neo.core.Config"},{"comment":"/**\n     * The cloning strategy to use when getting a value.\n     * Supported values: 'deep', 'shallow', 'none'.\n     * @member {String} cloneOnGet=null\n     */","meta":{"filename":"Config.mjs","lineno":38,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{}},"description":"<p>The cloning strategy to use when getting a value.\nSupported values: &#39;deep&#39;, &#39;shallow&#39;, &#39;none&#39;.</p>\n","kind":"member","name":"cloneOnGet","type":{"names":["String"]},"defaultvalue":null,"longname":"cloneOnGet","scope":"global","$longname":"cloneOnGet","$kind":"property","id":1877,"neoClassName":"Neo.core.Config"},{"comment":"/**\n     * The function used to compare new and old values for equality.\n     * Defaults to `Neo.isEqual`. Can be overridden via a descriptor.\n     * @member {Function} isEqual=Neo.isEqual\n     */","meta":{"filename":"Config.mjs","lineno":44,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{}},"description":"<p>The function used to compare new and old values for equality.\nDefaults to <code>Neo.isEqual</code>. Can be overridden via a descriptor.</p>\n","kind":"member","name":"isEqual","type":{"names":["function"]},"defaultvalue":"Neo.isEqual","longname":"isEqual","scope":"global","$longname":"isEqual","$kind":"property","id":1878,"neoClassName":"Neo.core.Config"},{"comment":"/**\n     * The strategy to use when merging new values into this config.\n     * Defaults to 'replace'. Can be overridden via a descriptor merge property.\n     * @member {Function|String} mergeStrategy='replace'\n     */","meta":{"filename":"Config.mjs","lineno":50,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{}},"description":"<p>The strategy to use when merging new values into this config.\nDefaults to &#39;replace&#39;. Can be overridden via a descriptor merge property.</p>\n","kind":"member","name":"mergeStrategy","type":{"names":["function","String"]},"defaultvalue":"'replace'","longname":"mergeStrategy","scope":"global","$longname":"mergeStrategy","$kind":"property","id":1879,"neoClassName":"Neo.core.Config"},{"comment":"/**\n     * Creates an instance of Config.\n     * @param {any|Object} configObject - The initial value for the config.\n     */","meta":{"range":[1703,1929],"filename":"Config.mjs","lineno":55,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100058670","name":"Config","type":"MethodDefinition","paramnames":["configObject"]},"vars":{"":null}},"description":"<p>Creates an instance of Config.</p>\n","params":[{"type":{"names":["any","Object"]},"description":"<p>The initial value for the config.</p>\n","name":"configObject"}],"name":"Config","longname":"Config","kind":"class","scope":"global","$longname":"Config","$kind":"constructor","id":1880,"neoClassName":"Neo.core.Config"},{"comment":"/**\n     * Gets the current value of the config property.\n     * @returns {any} The current value.\n     */","meta":{"range":[2046,2317],"filename":"Config.mjs","lineno":67,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100058702","name":"Config#get","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Gets the current value of the config property.</p>\n","returns":[{"type":{"names":["any"]},"description":"The current value."}],"name":"get","longname":"Config#get","kind":"function","memberof":"Config","scope":"instance","params":[],"$longname":"Config#get","$kind":"method","id":1881,"neoClassName":"Neo.core.Config"},{"comment":"/**\n     * Initializes the `Config` instance using a descriptor object.\n     * Extracts `clone`, `mergeStrategy` and `isEqual` from the descriptor.\n     * The internal `#value` is NOT set by this method.\n     * @param {Object}   descriptor                       - The descriptor object for the config.\n     * @param {any}      descriptor.value                 - The default value for the config (not set by this method).\n     * @param {string}   [descriptor.clone='deep']        - The clone strategy for set.\n     * @param {string}   [descriptor.cloneOnGet]          - The clone strategy for get. Defaults to 'shallow' if clone is 'deep' or 'shallow', and 'none' if clone is 'none'.\n     * @param {string}   [descriptor.merge='deep']        - The merge strategy.\n     * @param {Function} [descriptor.isEqual=Neo.isEqual] - The equality comparison function.\n     */","meta":{"range":[3192,4129],"filename":"Config.mjs","lineno":85,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100058713","name":"Config#initDescriptor","type":"MethodDefinition","paramnames":[""]},"vars":{"":null}},"description":"<p>Initializes the <code>Config</code> instance using a descriptor object.\nExtracts <code>clone</code>, <code>mergeStrategy</code> and <code>isEqual</code> from the descriptor.\nThe internal <code>#value</code> is NOT set by this method.</p>\n","params":[{"type":{"names":["Object"]},"description":"<p>The descriptor object for the config.</p>\n","name":"descriptor"},{"type":{"names":["any"]},"description":"<p>The default value for the config (not set by this method).</p>\n","name":"descriptor.value"},{"type":{"names":["string"]},"optional":true,"defaultvalue":"'deep'","description":"<p>The clone strategy for set.</p>\n","name":"descriptor.clone"},{"type":{"names":["string"]},"optional":true,"description":"<p>The clone strategy for get. Defaults to &#39;shallow&#39; if clone is &#39;deep&#39; or &#39;shallow&#39;, and &#39;none&#39; if clone is &#39;none&#39;.</p>\n","name":"descriptor.cloneOnGet"},{"type":{"names":["string"]},"optional":true,"defaultvalue":"'deep'","description":"<p>The merge strategy.</p>\n","name":"descriptor.merge"},{"type":{"names":["function"]},"optional":true,"defaultvalue":"Neo.isEqual","description":"<p>The equality comparison function.</p>\n","name":"descriptor.isEqual"}],"name":"initDescriptor","longname":"Config#initDescriptor","kind":"function","memberof":"Config","scope":"instance","$longname":"Config#initDescriptor","$kind":"method","id":1882,"neoClassName":"Neo.core.Config"},{"comment":"/**\n     * Notifies all subscribed callbacks about a change in the config's value.\n     * @param {any} newValue - The new value of the config.\n     * @param {any} oldValue - The old value of the config.\n     */","meta":{"range":[4350,4694],"filename":"Config.mjs","lineno":118,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100058830","name":"Config#notify","type":"MethodDefinition","paramnames":["newValue","oldValue"]},"vars":{"":null}},"description":"<p>Notifies all subscribed callbacks about a change in the config&#39;s value.</p>\n","params":[{"type":{"names":["any"]},"description":"<p>The new value of the config.</p>\n","name":"newValue"},{"type":{"names":["any"]},"description":"<p>The old value of the config.</p>\n","name":"oldValue"}],"name":"notify","longname":"Config#notify","kind":"function","memberof":"Config","scope":"instance","$longname":"Config#notify","$kind":"method","id":1883,"neoClassName":"Neo.core.Config"},{"comment":"/**\n     * Sets a new value for the config property.\n     * This method performs an equality check using `this.isEqual` before updating the value.\n     * If the value has changed, it updates `#value` and notifies all subscribers.\n     * @param {any} newValue - The new value to set.\n     * @returns {Boolean} True if the value changed, false otherwise.\n     */","meta":{"range":[5065,5510],"filename":"Config.mjs","lineno":136,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100058875","name":"Config#set","type":"MethodDefinition","paramnames":["newValue"]},"vars":{"":null}},"description":"<p>Sets a new value for the config property.\nThis method performs an equality check using <code>this.isEqual</code> before updating the value.\nIf the value has changed, it updates <code>#value</code> and notifies all subscribers.</p>\n","params":[{"type":{"names":["any"]},"description":"<p>The new value to set.</p>\n","name":"newValue"}],"returns":[{"type":{"names":["Boolean"]},"description":"True if the value changed, false otherwise."}],"name":"set","longname":"Config#set","kind":"function","memberof":"Config","scope":"instance","$longname":"Config#set","$kind":"method","id":1884,"neoClassName":"Neo.core.Config"},{"comment":"/**\n     * Sets the internal value of the config property directly, without performing\n     * an equality check or notifying subscribers.\n     * This method is intended for internal framework use where direct assignment\n     * is necessary (e.g., during initial setup or specific internal optimizations).\n     * @param {any} newValue - The new value to set directly.\n     */","meta":{"range":[5895,5950],"filename":"Config.mjs","lineno":160,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100058923","name":"Config#setRaw","type":"MethodDefinition","paramnames":["newValue"]},"vars":{"":null}},"description":"<p>Sets the internal value of the config property directly, without performing\nan equality check or notifying subscribers.\nThis method is intended for internal framework use where direct assignment\nis necessary (e.g., during initial setup or specific internal optimizations).</p>\n","params":[{"type":{"names":["any"]},"description":"<p>The new value to set directly.</p>\n","name":"newValue"}],"name":"setRaw","longname":"Config#setRaw","kind":"function","memberof":"Config","scope":"instance","$longname":"Config#setRaw","$kind":"method","id":1885,"neoClassName":"Neo.core.Config"},{"comment":"/**\n     * Subscribes a callback function to changes in this config's value.\n     * The callback will be invoked with `(newValue, oldValue)` whenever the config changes.\n     * @param {Object} options      - An object containing the subscription details.\n     * @param {String} options.id   - The ID of the subscription owner (e.g., a Neo.core.Base instance's id).\n     * @param {Function} options.fn - The callback function.\n     * @returns {Function} A cleanup function to unsubscribe the callback.\n     */","meta":{"range":[6469,7264],"filename":"Config.mjs","lineno":172,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100058935","name":"Config#subscribe","type":"MethodDefinition","paramnames":[""]},"vars":{"":null}},"description":"<p>Subscribes a callback function to changes in this config&#39;s value.\nThe callback will be invoked with <code>(newValue, oldValue)</code> whenever the config changes.</p>\n","params":[{"type":{"names":["Object"]},"description":"<p>An object containing the subscription details.</p>\n","name":"options"},{"type":{"names":["String"]},"description":"<p>The ID of the subscription owner (e.g., a Neo.core.Base instance&#39;s id).</p>\n","name":"options.id"},{"type":{"names":["function"]},"description":"<p>The callback function.</p>\n","name":"options.fn"}],"returns":[{"type":{"names":["function"]},"description":"A cleanup function to unsubscribe the callback."}],"name":"subscribe","longname":"Config#subscribe","kind":"function","memberof":"Config","scope":"instance","$longname":"Config#subscribe","$kind":"method","id":1886,"neoClassName":"Neo.core.Config"}]}