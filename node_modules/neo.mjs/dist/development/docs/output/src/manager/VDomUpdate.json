{"classData":[{"comment":"/**\n * The VDomUpdate manager is a singleton responsible for orchestrating and optimizing\n * component VDOM updates within the Neo.mjs framework. It acts as a central coordinator\n * to optimize the VDOM update process. Its primary goal is to reduce the amount of\n * message roundtrips between the application and VDOM workers by aggregating multiple\n * component updates into a single, optimized VDOM tree.\n *\n * Key Responsibilities:\n * 1. **Update Merging & Aggregation:** Allows a parent component to absorb the update\n *    requests of its children. Instead of each child triggering a separate VDOM update\n *    message to the VDOM worker, the parent sends a single, aggregated VDOM tree. This\n *    significantly reduces the overhead of worker communication and can result in smaller,\n *    more focused data for the VDOM worker to process. While the amount of final DOM\n *    modifications remains the same, this aggregation is key to performance.\n *\n * 2. **Asynchronous Flow Control:** Manages the asynchronous nature of VDOM updates, which\n *    are often processed in a worker thread. It ensures that code awaiting an update\n *    (e.g., via a returned Promise) is correctly notified upon completion.\n *\n * 3. **Dependency Chaining:** Provides a \"post-update\" queue, allowing one component's\n *    update to be declaratively chained to another's, ensuring a predictable order of\n *    operations.\n *\n * 4. **State Tracking:** Keeps track of updates that are \"in-flight\" (i.e., currently\n *    being processed), which helps to avoid race conditions and redundant work.\n *\n * By centralizing these concerns, VDomUpdate plays a critical role in the framework's\n * performance and rendering efficiency.\n *\n * @class Neo.manager.VDomUpdate\n * @extends Neo.collection.Base\n * @singleton\n */","meta":{"filename":"VDomUpdate.mjs","lineno":3,"columnno":0,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/manager","code":{}},"description":"<p>The VDomUpdate manager is a singleton responsible for orchestrating and optimizing\ncomponent VDOM updates within the Neo.mjs framework. It acts as a central coordinator\nto optimize the VDOM update process. Its primary goal is to reduce the amount of\nmessage roundtrips between the application and VDOM workers by aggregating multiple\ncomponent updates into a single, optimized VDOM tree.</p>\n<p>Key Responsibilities:</p>\n<ol>\n<li><p><strong>Update Merging &amp; Aggregation:</strong> Allows a parent component to absorb the update\nrequests of its children. Instead of each child triggering a separate VDOM update\nmessage to the VDOM worker, the parent sends a single, aggregated VDOM tree. This\nsignificantly reduces the overhead of worker communication and can result in smaller,\nmore focused data for the VDOM worker to process. While the amount of final DOM\nmodifications remains the same, this aggregation is key to performance.</p>\n</li>\n<li><p><strong>Asynchronous Flow Control:</strong> Manages the asynchronous nature of VDOM updates, which\nare often processed in a worker thread. It ensures that code awaiting an update\n(e.g., via a returned Promise) is correctly notified upon completion.</p>\n</li>\n<li><p><strong>Dependency Chaining:</strong> Provides a &quot;post-update&quot; queue, allowing one component&#39;s\nupdate to be declaratively chained to another&#39;s, ensuring a predictable order of\noperations.</p>\n</li>\n<li><p><strong>State Tracking:</strong> Keeps track of updates that are &quot;in-flight&quot; (i.e., currently\nbeing processed), which helps to avoid race conditions and redundant work.</p>\n</li>\n</ol>\n<p>By centralizing these concerns, VDomUpdate plays a critical role in the framework&#39;s\nperformance and rendering efficiency.</p>\n","kind":"class","name":"VDomUpdate","augments":["Neo.collection.Base"],"tags":[{"originalTitle":"singleton","title":"singleton","text":""}],"memberof":"Neo.manager","longname":"Neo.manager.VDomUpdate","scope":"static","$longname":"Neo.manager.VDomUpdate","$kind":"class","id":4396,"neoClassName":"Neo.manager.VDomUpdate"},{"comment":"/**\n         * @member {String} className='Neo.manager.VDomUpdate'\n         * @protected\n         */","meta":{"filename":"VDomUpdate.mjs","lineno":42,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/manager","code":{}},"kind":"member","name":"className","type":{"names":["String"]},"defaultvalue":"'Neo.manager.VDomUpdate'","access":"protected","longname":"className","scope":"global","$longname":"className","$kind":"property","id":4397,"neoClassName":"Neo.manager.VDomUpdate"},{"comment":"/**\n         * A collection that maps a parent component's ID (`ownerId`) to the set of child\n         * components whose VDOM updates have been merged into that parent's update cycle.\n         *\n         * The structure for each entry is:\n         * `{ ownerId: 'parent-id', children: Map<'child-id', {childUpdateDepth, distance}> }`\n         *\n         * - `ownerId`: The `id` of the parent component taking responsibility for the update.\n         * - `children`: A Map where keys are the `id`s of the merged children and values\n         *   are objects containing metadata needed to calculate the total update scope.\n         *\n         * @member {Neo.collection.Base|null} mergedCallbackMap=null\n         * @protected\n         */","meta":{"filename":"VDomUpdate.mjs","lineno":57,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/manager","code":{}},"description":"<p>A collection that maps a parent component&#39;s ID (<code>ownerId</code>) to the set of child\ncomponents whose VDOM updates have been merged into that parent&#39;s update cycle.</p>\n<p>The structure for each entry is:\n<code>{ ownerId: &#39;parent-id&#39;, children: Map&lt;&#39;child-id&#39;, {childUpdateDepth, distance}&gt; }</code></p>\n<ul>\n<li><code>ownerId</code>: The <code>id</code> of the parent component taking responsibility for the update.</li>\n<li><code>children</code>: A Map where keys are the <code>id</code>s of the merged children and values\nare objects containing metadata needed to calculate the total update scope.</li>\n</ul>\n","kind":"member","name":"mergedCallbackMap","type":{"names":["Neo.collection.Base","null"]},"defaultvalue":null,"access":"protected","longname":"mergedCallbackMap","scope":"global","$longname":"mergedCallbackMap","$kind":"property","id":4398,"neoClassName":"Neo.manager.VDomUpdate"},{"comment":"/**\n         * A collection that queues components that need to be updated immediately after\n         * another component's update cycle completes. This is used to handle rendering\n         * dependencies.\n         *\n         * The structure for each entry is:\n         * `{ ownerId: 'component-id', children: [{childId, resolve}] }`\n         *\n         * - `ownerId`: The `id` of the component whose update completion will trigger the queued updates.\n         * - `children`: An array of objects, where `childId` is the component to update and\n         *   `resolve` is the Promise resolver to call after that subsequent update is done.\n         *\n         * @member {Neo.collection.Base|null} postUpdateQueueMap=null\n         * @protected\n         */","meta":{"filename":"VDomUpdate.mjs","lineno":73,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/manager","code":{}},"description":"<p>A collection that queues components that need to be updated immediately after\nanother component&#39;s update cycle completes. This is used to handle rendering\ndependencies.</p>\n<p>The structure for each entry is:\n<code>{ ownerId: &#39;component-id&#39;, children: [{childId, resolve}] }</code></p>\n<ul>\n<li><code>ownerId</code>: The <code>id</code> of the component whose update completion will trigger the queued updates.</li>\n<li><code>children</code>: An array of objects, where <code>childId</code> is the component to update and\n<code>resolve</code> is the Promise resolver to call after that subsequent update is done.</li>\n</ul>\n","kind":"member","name":"postUpdateQueueMap","type":{"names":["Neo.collection.Base","null"]},"defaultvalue":null,"access":"protected","longname":"postUpdateQueueMap","scope":"global","$longname":"postUpdateQueueMap","$kind":"property","id":4399,"neoClassName":"Neo.manager.VDomUpdate"},{"comment":"/**\n         * @member {Boolean} singleton=true\n         * @protected\n         */","meta":{"filename":"VDomUpdate.mjs","lineno":78,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/manager","code":{}},"kind":"member","name":"singleton","type":{"names":["Boolean"]},"defaultvalue":true,"access":"protected","longname":"singleton","scope":"global","$longname":"singleton","$kind":"property","id":4400,"neoClassName":"Neo.manager.VDomUpdate"},{"comment":"/**\n     * A Map that tracks VDOM updates that have been dispatched to the VDOM worker but\n     * have not yet completed. This prevents redundant updates for the same component.\n     *\n     * The structure is: `Map<'component-id', updateDepth>`\n     *\n     * @member {Map|null} inFlightUpdateMap=null\n     * @protected\n     */","meta":{"filename":"VDomUpdate.mjs","lineno":90,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/manager","code":{}},"description":"<p>A Map that tracks VDOM updates that have been dispatched to the VDOM worker but\nhave not yet completed. This prevents redundant updates for the same component.</p>\n<p>The structure is: <code>Map&lt;&#39;component-id&#39;, updateDepth&gt;</code></p>\n","kind":"member","name":"inFlightUpdateMap","type":{"names":["Map","null"]},"defaultvalue":null,"access":"protected","longname":"inFlightUpdateMap","scope":"global","$longname":"inFlightUpdateMap","$kind":"property","id":4401,"neoClassName":"Neo.manager.VDomUpdate"},{"comment":"/**\n     * A Map that stores Promise `resolve` functions associated with a component's update.\n     * When a component's VDOM update is finalized, the callbacks for its ID are executed,\n     * resolving the Promise returned by the component's `update()` method.\n     *\n     * The structure is: `Map<'component-id', [callback1, callback2, ...]>`\n     *\n     * @member {Map|null} promiseCallbackMap=null\n     * @protected\n     */","meta":{"filename":"VDomUpdate.mjs","lineno":101,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/manager","code":{}},"description":"<p>A Map that stores Promise <code>resolve</code> functions associated with a component&#39;s update.\nWhen a component&#39;s VDOM update is finalized, the callbacks for its ID are executed,\nresolving the Promise returned by the component&#39;s <code>update()</code> method.</p>\n<p>The structure is: <code>Map&lt;&#39;component-id&#39;, [callback1, callback2, ...]&gt;</code></p>\n","kind":"member","name":"promiseCallbackMap","type":{"names":["Map","null"]},"defaultvalue":null,"access":"protected","longname":"promiseCallbackMap","scope":"global","$longname":"promiseCallbackMap","$kind":"property","id":4402,"neoClassName":"Neo.manager.VDomUpdate"},{"comment":"/**\n     * Initializes the manager's internal collections and maps.\n     * This is called automatically when the singleton instance is created.\n     * @param {Object} config\n     */","meta":{"range":[4765,5100],"filename":"VDomUpdate.mjs","lineno":108,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/manager","code":{"id":"astnode100133171","name":"VDomUpdate#construct","type":"MethodDefinition","paramnames":["config"]},"vars":{"":null}},"description":"<p>Initializes the manager&#39;s internal collections and maps.\nThis is called automatically when the singleton instance is created.</p>\n","params":[{"type":{"names":["Object"]},"name":"config"}],"name":"construct","longname":"VDomUpdate#construct","kind":"function","memberof":"VDomUpdate","scope":"instance","$longname":"VDomUpdate#construct","$kind":"method","id":4403,"neoClassName":"Neo.manager.VDomUpdate"},{"comment":"/**\n     * Registers a callback function to be executed when a specific component's\n     * VDOM update completes. This is the mechanism that resolves the Promise\n     * returned by `Component#update()`.\n     * @param {String}   ownerId  The `id` of the component owning the update.\n     * @param {Function} callback The function to execute upon completion.\n     */","meta":{"range":[5475,5715],"filename":"VDomUpdate.mjs","lineno":126,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/manager","code":{"id":"astnode100133226","name":"VDomUpdate#addPromiseCallback","type":"MethodDefinition","paramnames":["ownerId","callback"]},"vars":{"":null}},"description":"<p>Registers a callback function to be executed when a specific component&#39;s\nVDOM update completes. This is the mechanism that resolves the Promise\nreturned by <code>Component#update()</code>.</p>\n","params":[{"type":{"names":["String"]},"description":"<p>The <code>id</code> of the component owning the update.</p>\n","name":"ownerId"},{"type":{"names":["function"]},"description":"<p>The function to execute upon completion.</p>\n","name":"callback"}],"name":"addPromiseCallback","longname":"VDomUpdate#addPromiseCallback","kind":"function","memberof":"VDomUpdate","scope":"instance","$longname":"VDomUpdate#addPromiseCallback","$kind":"method","id":4404,"neoClassName":"Neo.manager.VDomUpdate"},{"comment":"/**\n     * Executes all callbacks associated with a completed VDOM update for a given `ownerId`.\n     * This method first processes callbacks for any children that were merged into this\n     * update cycle, then executes the callbacks for the `ownerId` itself.\n     * @param {String} ownerId The `id` of the component whose update has just completed.\n     * @param {Object} [data]  Optional data to pass to the callbacks.\n     */","meta":{"range":[6155,6609],"filename":"VDomUpdate.mjs","lineno":143,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/manager","code":{"id":"astnode100133267","name":"VDomUpdate#executeCallbacks","type":"MethodDefinition","paramnames":["ownerId","data"]},"vars":{"":null}},"description":"<p>Executes all callbacks associated with a completed VDOM update for a given <code>ownerId</code>.\nThis method first processes callbacks for any children that were merged into this\nupdate cycle, then executes the callbacks for the <code>ownerId</code> itself.</p>\n","params":[{"type":{"names":["String"]},"description":"<p>The <code>id</code> of the component whose update has just completed.</p>\n","name":"ownerId"},{"type":{"names":["Object"]},"optional":true,"description":"<p>Optional data to pass to the callbacks.</p>\n","name":"data"}],"name":"executeCallbacks","longname":"VDomUpdate#executeCallbacks","kind":"function","memberof":"VDomUpdate","scope":"instance","$longname":"VDomUpdate#executeCallbacks","$kind":"method","id":4405,"neoClassName":"Neo.manager.VDomUpdate"},{"comment":"/**\n     * A helper method that invokes all registered promise callbacks for a given\n     * component ID and then clears them from the queue.\n     * @param {String} ownerId The `id` of the component.\n     * @param {Object} [data]  Optional data to pass to the callbacks.\n     */","meta":{"range":[6898,7138],"filename":"VDomUpdate.mjs","lineno":164,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/manager","code":{"id":"astnode100133331","name":"VDomUpdate#executePromiseCallbacks","type":"MethodDefinition","paramnames":["ownerId","data"]},"vars":{"":null}},"description":"<p>A helper method that invokes all registered promise callbacks for a given\ncomponent ID and then clears them from the queue.</p>\n","params":[{"type":{"names":["String"]},"description":"<p>The <code>id</code> of the component.</p>\n","name":"ownerId"},{"type":{"names":["Object"]},"optional":true,"description":"<p>Optional data to pass to the callbacks.</p>\n","name":"data"}],"name":"executePromiseCallbacks","longname":"VDomUpdate#executePromiseCallbacks","kind":"function","memberof":"VDomUpdate","scope":"instance","$longname":"VDomUpdate#executePromiseCallbacks","$kind":"method","id":4406,"neoClassName":"Neo.manager.VDomUpdate"},{"comment":"/**\n     * Calculates the required `updateDepth` for a parent component based on its own\n     * needs and the needs of all child components whose updates have been merged into it.\n     * The final depth is the maximum required depth to ensure all changes are rendered.\n     *\n     * For example, if a parent needs to update its direct content (`updateDepth: 1`) but\n     * a merged child 3 levels down needs a full subtree update (`childUpdateDepth: -1`),\n     * this method will return -1, signaling a full recursive update from the parent.\n     *\n     * This method is called by the parent component right before it dispatches its VDOM update.\n     * @param {String} ownerId The `id` of the parent component.\n     * @returns {Number|null} The adjusted update depth, or `null` if no merged children exist.\n     */","meta":{"range":[7963,8860],"filename":"VDomUpdate.mjs","lineno":185,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/manager","code":{"id":"astnode100133360","name":"VDomUpdate#getAdjustedUpdateDepth","type":"MethodDefinition","paramnames":["ownerId"]},"vars":{"":null}},"description":"<p>Calculates the required <code>updateDepth</code> for a parent component based on its own\nneeds and the needs of all child components whose updates have been merged into it.\nThe final depth is the maximum required depth to ensure all changes are rendered.</p>\n<p>For example, if a parent needs to update its direct content (<code>updateDepth: 1</code>) but\na merged child 3 levels down needs a full subtree update (<code>childUpdateDepth: -1</code>),\nthis method will return -1, signaling a full recursive update from the parent.</p>\n<p>This method is called by the parent component right before it dispatches its VDOM update.</p>\n","params":[{"type":{"names":["String"]},"description":"<p>The <code>id</code> of the parent component.</p>\n","name":"ownerId"}],"returns":[{"type":{"names":["Number","null"]},"description":"The adjusted update depth, or `null` if no merged children exist."}],"name":"getAdjustedUpdateDepth","longname":"VDomUpdate#getAdjustedUpdateDepth","kind":"function","memberof":"VDomUpdate","scope":"instance","$longname":"VDomUpdate#getAdjustedUpdateDepth","$kind":"method","id":4407,"neoClassName":"Neo.manager.VDomUpdate"},{"comment":"/**\n     * Retrieves the `updateDepth` for a component's update that is currently in-flight.\n     * @param {String} ownerId The `id` of the component owning the update.\n     * @returns {Number|undefined} The update depth, or `undefined` if no update is in-flight.\n     */","meta":{"range":[9142,9232],"filename":"VDomUpdate.mjs","lineno":219,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/manager","code":{"id":"astnode100133459","name":"VDomUpdate#getInFlightUpdateDepth","type":"MethodDefinition","paramnames":["ownerId"]},"vars":{"":null}},"description":"<p>Retrieves the <code>updateDepth</code> for a component&#39;s update that is currently in-flight.</p>\n","params":[{"type":{"names":["String"]},"description":"<p>The <code>id</code> of the component owning the update.</p>\n","name":"ownerId"}],"returns":[{"type":{"names":["Number","undefined"]},"description":"The update depth, or `undefined` if no update is in-flight."}],"name":"getInFlightUpdateDepth","longname":"VDomUpdate#getInFlightUpdateDepth","kind":"function","memberof":"VDomUpdate","scope":"instance","$longname":"VDomUpdate#getInFlightUpdateDepth","$kind":"method","id":4408,"neoClassName":"Neo.manager.VDomUpdate"},{"comment":"/**\n     * Returns a Set of child component IDs that have been merged into a parent's update cycle.\n     * This is used by the parent to know which children it is responsible for updating.\n     * @param {String} ownerId The `id` of the parent component.\n     * @returns {Set<String>|null} A Set containing the IDs of the merged children, or `null`.\n     */","meta":{"range":[9599,9790],"filename":"VDomUpdate.mjs","lineno":229,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/manager","code":{"id":"astnode100133472","name":"VDomUpdate#getMergedChildIds","type":"MethodDefinition","paramnames":["ownerId"]},"vars":{"":null}},"description":"<p>Returns a Set of child component IDs that have been merged into a parent&#39;s update cycle.\nThis is used by the parent to know which children it is responsible for updating.</p>\n","params":[{"type":{"names":["String"]},"description":"<p>The <code>id</code> of the parent component.</p>\n","name":"ownerId"}],"returns":[{"type":{"names":["Set.<String>","null"]},"description":"A Set containing the IDs of the merged children, or `null`."}],"name":"getMergedChildIds","longname":"VDomUpdate#getMergedChildIds","kind":"function","memberof":"VDomUpdate","scope":"instance","$longname":"VDomUpdate#getMergedChildIds","$kind":"method","id":4409,"neoClassName":"Neo.manager.VDomUpdate"},{"comment":"/**\n     * Marks a component's VDOM update as \"in-flight,\" meaning it has been sent to the\n     * worker for processing.\n     * @param {String} ownerId     The `id` of the component owning the update.\n     * @param {Number} updateDepth The depth of the in-flight update.\n     */","meta":{"range":[10079,10188],"filename":"VDomUpdate.mjs","lineno":243,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/manager","code":{"id":"astnode100133501","name":"VDomUpdate#registerInFlightUpdate","type":"MethodDefinition","paramnames":["ownerId","updateDepth"]},"vars":{"":null}},"description":"<p>Marks a component&#39;s VDOM update as &quot;in-flight,&quot; meaning it has been sent to the\nworker for processing.</p>\n","params":[{"type":{"names":["String"]},"description":"<p>The <code>id</code> of the component owning the update.</p>\n","name":"ownerId"},{"type":{"names":["Number"]},"description":"<p>The depth of the in-flight update.</p>\n","name":"updateDepth"}],"name":"registerInFlightUpdate","longname":"VDomUpdate#registerInFlightUpdate","kind":"function","memberof":"VDomUpdate","scope":"instance","$longname":"VDomUpdate#registerInFlightUpdate","$kind":"method","id":4410,"neoClassName":"Neo.manager.VDomUpdate"},{"comment":"/**\n     * Registers a child's update request to be merged into its parent's update cycle.\n     * This is called by a child component when it determines it can delegate its update\n     * to an ancestor.\n     * @param {String} ownerId          The `id` of the parent component that will own the merged update.\n     * @param {String} childId          The `id` of the child component requesting the merge.\n     * @param {Number} childUpdateDepth The update depth required by the child.\n     * @param {Number} distance         The component tree distance (number of levels) between the parent and child.\n     */","meta":{"range":[10806,11145],"filename":"VDomUpdate.mjs","lineno":256,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/manager","code":{"id":"astnode100133516","name":"VDomUpdate#registerMerged","type":"MethodDefinition","paramnames":["ownerId","childId","childUpdateDepth","distance"]},"vars":{"":null}},"description":"<p>Registers a child&#39;s update request to be merged into its parent&#39;s update cycle.\nThis is called by a child component when it determines it can delegate its update\nto an ancestor.</p>\n","params":[{"type":{"names":["String"]},"description":"<p>The <code>id</code> of the parent component that will own the merged update.</p>\n","name":"ownerId"},{"type":{"names":["String"]},"description":"<p>The <code>id</code> of the child component requesting the merge.</p>\n","name":"childId"},{"type":{"names":["Number"]},"description":"<p>The update depth required by the child.</p>\n","name":"childUpdateDepth"},{"type":{"names":["Number"]},"description":"<p>The component tree distance (number of levels) between the parent and child.</p>\n","name":"distance"}],"name":"registerMerged","longname":"VDomUpdate#registerMerged","kind":"function","memberof":"VDomUpdate","scope":"instance","$longname":"VDomUpdate#registerMerged","$kind":"method","id":4411,"neoClassName":"Neo.manager.VDomUpdate"},{"comment":"/**\n     * Queues a component update to be executed after another component's update is complete.\n     * @param {String} ownerId     The `id` of the component to wait for.\n     * @param {String} childId     The `id` of the component to update afterward.\n     * @param {Function} [resolve] The Promise resolver to be called when the `childId`'s subsequent update finishes.\n     */","meta":{"range":[11535,11836],"filename":"VDomUpdate.mjs","lineno":274,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/manager","code":{"id":"astnode100133571","name":"VDomUpdate#registerPostUpdate","type":"MethodDefinition","paramnames":["ownerId","childId","resolve"]},"vars":{"":null}},"description":"<p>Queues a component update to be executed after another component&#39;s update is complete.</p>\n","params":[{"type":{"names":["String"]},"description":"<p>The <code>id</code> of the component to wait for.</p>\n","name":"ownerId"},{"type":{"names":["String"]},"description":"<p>The <code>id</code> of the component to update afterward.</p>\n","name":"childId"},{"type":{"names":["function"]},"optional":true,"description":"<p>The Promise resolver to be called when the <code>childId</code>&#39;s subsequent update finishes.</p>\n","name":"resolve"}],"name":"registerPostUpdate","longname":"VDomUpdate#registerPostUpdate","kind":"function","memberof":"VDomUpdate","scope":"instance","$longname":"VDomUpdate#registerPostUpdate","$kind":"method","id":4412,"neoClassName":"Neo.manager.VDomUpdate"},{"comment":"/**\n     * Triggers all pending updates that were queued to run after the specified `ownerId`'s\n     * update has completed.\n     * @param {String} ownerId The `id` of the component whose update has just finished.\n     */","meta":{"range":[12068,12587],"filename":"VDomUpdate.mjs","lineno":291,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/manager","code":{"id":"astnode100133623","name":"VDomUpdate#triggerPostUpdates","type":"MethodDefinition","paramnames":["ownerId"]},"vars":{"":null}},"description":"<p>Triggers all pending updates that were queued to run after the specified <code>ownerId</code>&#39;s\nupdate has completed.</p>\n","params":[{"type":{"names":["String"]},"description":"<p>The <code>id</code> of the component whose update has just finished.</p>\n","name":"ownerId"}],"name":"triggerPostUpdates","longname":"VDomUpdate#triggerPostUpdates","kind":"function","memberof":"VDomUpdate","scope":"instance","$longname":"VDomUpdate#triggerPostUpdates","$kind":"method","id":4413,"neoClassName":"Neo.manager.VDomUpdate"},{"comment":"/**\n     * Removes a component's update from the \"in-flight\" registry. This is called after\n     * the VDOM worker confirms the update has been processed.\n     * @param {String} ownerId The `id` of the component owning the update.\n     */","meta":{"range":[12836,12924],"filename":"VDomUpdate.mjs","lineno":315,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/manager","code":{"id":"astnode100133697","name":"VDomUpdate#unregisterInFlightUpdate","type":"MethodDefinition","paramnames":["ownerId"]},"vars":{"":null}},"description":"<p>Removes a component&#39;s update from the &quot;in-flight&quot; registry. This is called after\nthe VDOM worker confirms the update has been processed.</p>\n","params":[{"type":{"names":["String"]},"description":"<p>The <code>id</code> of the component owning the update.</p>\n","name":"ownerId"}],"name":"unregisterInFlightUpdate","longname":"VDomUpdate#unregisterInFlightUpdate","kind":"function","memberof":"VDomUpdate","scope":"instance","$longname":"VDomUpdate#unregisterInFlightUpdate","$kind":"method","id":4414,"neoClassName":"Neo.manager.VDomUpdate"}]}