{"classData":[{"comment":"/**\n * @class Neo.data.RecordFactory\n * @extends Neo.core.Base\n * @singleton\n */","meta":{"filename":"RecordFactory.mjs","lineno":11,"columnno":0,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/data","code":{}},"kind":"class","name":"RecordFactory","augments":["Neo.core.Base"],"tags":[{"originalTitle":"singleton","title":"singleton","text":""}],"memberof":"Neo.data","longname":"Neo.data.RecordFactory","scope":"static","$longname":"Neo.data.RecordFactory","$kind":"class","id":1988,"neoClassName":"Neo.data.RecordFactory"},{"comment":"/**\n         * @member {String} className='Neo.data.RecordFactory'\n         * @protected\n         */","meta":{"filename":"RecordFactory.mjs","lineno":22,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/data","code":{}},"kind":"member","name":"className","type":{"names":["String"]},"defaultvalue":"'Neo.data.RecordFactory'","access":"protected","longname":"className","scope":"global","$longname":"className","$kind":"property","id":1989,"neoClassName":"Neo.data.RecordFactory"},{"comment":"/**\n         * @member {String} recordNamespace='Neo.data.record'\n         */","meta":{"filename":"RecordFactory.mjs","lineno":26,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/data","code":{}},"kind":"member","name":"recordNamespace","type":{"names":["String"]},"defaultvalue":"'Neo.data.record'","longname":"recordNamespace","scope":"global","$longname":"recordNamespace","$kind":"property","id":1990,"neoClassName":"Neo.data.RecordFactory"},{"comment":"/**\n         * @member {Boolean} singleton=true\n         * @protected\n         */","meta":{"filename":"RecordFactory.mjs","lineno":31,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/data","code":{}},"kind":"member","name":"singleton","type":{"names":["Boolean"]},"defaultvalue":true,"access":"protected","longname":"singleton","scope":"global","$longname":"singleton","$kind":"property","id":1991,"neoClassName":"Neo.data.RecordFactory"},{"comment":"/**\n     * Assigns model-based default values to a data object\n     * @param {Object}         data\n     * @param {Neo.data.Model} model\n     * @returns {Object}\n     */","meta":{"range":[963,1634],"filename":"RecordFactory.mjs","lineno":40,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/data","code":{"id":"astnode100061185","name":"RecordFactory#assignDefaultValues","type":"MethodDefinition","paramnames":["data","model"]},"vars":{"":null}},"description":"<p>Assigns model-based default values to a data object</p>\n","params":[{"type":{"names":["Object"]},"name":"data"},{"type":{"names":["Neo.data.Model"]},"name":"model"}],"returns":[{"type":{"names":["Object"]}}],"name":"assignDefaultValues","longname":"RecordFactory#assignDefaultValues","kind":"function","memberof":"RecordFactory","scope":"instance","$longname":"RecordFactory#assignDefaultValues","$kind":"method","id":1992,"neoClassName":"Neo.data.RecordFactory"},{"comment":"/**\n     * @param {Object} data\n     * @param {Object} data.field\n     * @param {Neo.data.Model} data.model\n     * @param {String} data.path=''\n     * @param {Object} data.proto\n     */","meta":{"range":[1830,3025],"filename":"RecordFactory.mjs","lineno":64,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/data","code":{"id":"astnode100061257","name":"RecordFactory#createField","type":"MethodDefinition","paramnames":[""]},"vars":{"":null}},"params":[{"type":{"names":["Object"]},"name":"data"},{"type":{"names":["Object"]},"name":"data.field"},{"type":{"names":["Neo.data.Model"]},"name":"data.model"},{"type":{"names":["String"]},"defaultvalue":"''","name":"data.path"},{"type":{"names":["Object"]},"name":"data.proto"}],"name":"createField","longname":"RecordFactory#createField","kind":"function","memberof":"RecordFactory","scope":"instance","$longname":"RecordFactory#createField","$kind":"method","id":1993,"neoClassName":"Neo.data.RecordFactory"},{"comment":"/**\n     * @param {Neo.data.Model} model\n     * @param {Object} config\n     * @returns {Object}\n     */","meta":{"range":[3139,3401],"filename":"RecordFactory.mjs","lineno":104,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/data","code":{"id":"astnode100061392","name":"RecordFactory#createRecord","type":"MethodDefinition","paramnames":["model","config"]},"vars":{"":null}},"params":[{"type":{"names":["Neo.data.Model"]},"name":"model"},{"type":{"names":["Object"]},"name":"config"}],"returns":[{"type":{"names":["Object"]}}],"name":"createRecord","longname":"RecordFactory#createRecord","kind":"function","memberof":"RecordFactory","scope":"instance","$longname":"RecordFactory#createRecord","$kind":"method","id":1994,"neoClassName":"Neo.data.RecordFactory"},{"comment":"/**\n     * @param {Neo.data.Model} model\n     * @param {Boolean} overwrite=false\n     * @returns {Object}\n     */","meta":{"range":[3525,10008],"filename":"RecordFactory.mjs","lineno":119,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/data","code":{"id":"astnode100061435","name":"RecordFactory#createRecordClass","type":"MethodDefinition","paramnames":["model","overwrite"]},"vars":{"":null}},"params":[{"type":{"names":["Neo.data.Model"]},"name":"model"},{"type":{"names":["Boolean"]},"defaultvalue":false,"name":"overwrite"}],"returns":[{"type":{"names":["Object"]}}],"name":"createRecordClass","longname":"RecordFactory#createRecordClass","kind":"function","memberof":"RecordFactory","scope":"instance","$longname":"RecordFactory#createRecordClass","$kind":"method","id":1995,"neoClassName":"Neo.data.RecordFactory"},{"comment":"/**\n                     * @param {Object} config\n                     */","meta":{"range":[4612,5159],"filename":"RecordFactory.mjs","lineno":148,"columnno":20,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/data","code":{"id":"astnode100061551","name":"ns[undefined]","type":"MethodDefinition","paramnames":["config"]},"vars":{"":null}},"params":[{"type":{"names":["Object"]},"name":"config"}],"name":"ns[undefined]","longname":"<anonymous>~ns[undefined]","kind":"class","memberof":"<anonymous>","scope":"inner","$longname":"ns[undefined]","$kind":"constructor","id":1996,"neoClassName":"Neo.data.RecordFactory"},{"comment":"/**\n                     * @param {String} fieldName\n                     * @returns {Boolean|null} null in case the model does not use trackModifiedFields, true in case a change was found\n                     */","meta":{"range":[5414,6892],"filename":"RecordFactory.mjs","lineno":167,"columnno":20,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/data","code":{"id":"astnode100061599","name":"ns[undefined]#isModifiedField","type":"MethodDefinition","paramnames":["fieldName"]},"vars":{"":null}},"params":[{"type":{"names":["String"]},"name":"fieldName"}],"returns":[{"type":{"names":["Boolean","null"]},"description":"null in case the model does not use trackModifiedFields, true in case a change was found"}],"name":"isModifiedField","longname":"ns[undefined]#isModifiedField","kind":"function","memberof":"ns[undefined]","scope":"instance","$longname":"ns[undefined]#ns[undefined]#isModifiedField","$kind":"method","id":1997,"neoClassName":"Neo.data.RecordFactory"},{"comment":"/**\n                     * The single source of truth for record field changes.\n                     * Executes instance.setRecordFields(), and can get used via:\n                     * - Neo.util.Function:createSequence()\n                     * - Neo.util.Function:intercept(),\n                     * to \"listen\" to field changes\n                     * @param {Object}         data\n                     * @param {Object}         data.fields\n                     * @param {Neo.data.Model} data.model\n                     * @param {Object}         data.record\n                     * @param {Boolean}        silent=false\n                     * @returns {Object}\n                     */","meta":{"range":[7617,7823],"filename":"RecordFactory.mjs","lineno":211,"columnno":20,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/data","code":{"id":"astnode100061715","name":"ns[undefined]#notifyChange","type":"MethodDefinition","paramnames":["data","silent"]},"vars":{"":null}},"description":"<p>The single source of truth for record field changes.\nExecutes instance.setRecordFields(), and can get used via:</p>\n<ul>\n<li>Neo.util.Function:createSequence()</li>\n<li>Neo.util.Function:intercept(),\nto &quot;listen&quot; to field changes</li>\n</ul>\n","params":[{"type":{"names":["Object"]},"name":"data"},{"type":{"names":["Object"]},"name":"data.fields"},{"type":{"names":["Neo.data.Model"]},"name":"data.model"},{"type":{"names":["Object"]},"name":"data.record"},{"type":{"names":["Boolean"]},"defaultvalue":false,"name":"silent"}],"returns":[{"type":{"names":["Object"]}}],"name":"notifyChange","longname":"ns[undefined]#notifyChange","kind":"function","memberof":"ns[undefined]","scope":"instance","$longname":"ns[undefined]#ns[undefined]#notifyChange","$kind":"method","id":1998,"neoClassName":"Neo.data.RecordFactory"},{"comment":"/**\n                     * Bulk-update multiple record fields at once\n                     * @param {Object} fields\n                     */","meta":{"range":[8005,8133],"filename":"RecordFactory.mjs","lineno":221,"columnno":20,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/data","code":{"id":"astnode100061739","name":"ns[undefined]#reset","type":"MethodDefinition","paramnames":["fields"]},"vars":{"":null}},"description":"<p>Bulk-update multiple record fields at once</p>\n","params":[{"type":{"names":["Object"]},"name":"fields"}],"name":"reset","longname":"ns[undefined]#reset","kind":"function","memberof":"ns[undefined]","scope":"instance","$longname":"ns[undefined]#ns[undefined]#reset","$kind":"method","id":1999,"neoClassName":"Neo.data.RecordFactory"},{"comment":"/**\n                     * Bulk-update multiple record fields at once\n                     * @param {Object} fields\n                     */","meta":{"range":[8315,8423],"filename":"RecordFactory.mjs","lineno":230,"columnno":20,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/data","code":{"id":"astnode100061756","name":"ns[undefined]#set","type":"MethodDefinition","paramnames":["fields"]},"vars":{"":null}},"description":"<p>Bulk-update multiple record fields at once</p>\n","params":[{"type":{"names":["Object"]},"name":"fields"}],"name":"set","longname":"ns[undefined]#set","kind":"function","memberof":"ns[undefined]","scope":"instance","$longname":"ns[undefined]#ns[undefined]#set","$kind":"method","id":2000,"neoClassName":"Neo.data.RecordFactory"},{"comment":"/**\n                     * If the model uses trackModifiedFields, we will store the original data\n                     * for tracking the dirty state (changed fields)\n                     * @param {Object} fields\n                     * @protected\n                     */","meta":{"range":[8736,8896],"filename":"RecordFactory.mjs","lineno":240,"columnno":20,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/data","code":{"id":"astnode100061773","name":"ns[undefined]#setOriginal","type":"MethodDefinition","paramnames":["fields"]},"vars":{"":null}},"description":"<p>If the model uses trackModifiedFields, we will store the original data\nfor tracking the dirty state (changed fields)</p>\n","params":[{"type":{"names":["Object"]},"name":"fields"}],"access":"protected","name":"setOriginal","longname":"ns[undefined]#setOriginal","kind":"function","memberof":"ns[undefined]","scope":"instance","$longname":"ns[undefined]#ns[undefined]#setOriginal","$kind":"method","id":2001,"neoClassName":"Neo.data.RecordFactory"},{"comment":"/**\n                     * Bulk-update multiple record fields at once without triggering a change event\n                     * @param {Object} fields\n                     */","meta":{"range":[9112,9232],"filename":"RecordFactory.mjs","lineno":248,"columnno":20,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/data","code":{"id":"astnode100061794","name":"ns[undefined]#setSilent","type":"MethodDefinition","paramnames":["fields"]},"vars":{"":null}},"description":"<p>Bulk-update multiple record fields at once without triggering a change event</p>\n","params":[{"type":{"names":["Object"]},"name":"fields"}],"name":"setSilent","longname":"ns[undefined]#setSilent","kind":"function","memberof":"ns[undefined]","scope":"instance","$longname":"ns[undefined]#ns[undefined]#setSilent","$kind":"method","id":2002,"neoClassName":"Neo.data.RecordFactory"},{"comment":"/**\n                     * When using JSON.stringify(this), we want to get the raw data\n                     * @returns {Object}\n                     */","meta":{"range":[9427,9524],"filename":"RecordFactory.mjs","lineno":256,"columnno":20,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/data","code":{"id":"astnode100061812","name":"ns[undefined]#toJSON","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>When using JSON.stringify(this), we want to get the raw data</p>\n","returns":[{"type":{"names":["Object"]}}],"name":"toJSON","longname":"ns[undefined]#toJSON","kind":"function","memberof":"ns[undefined]","scope":"instance","params":[],"$longname":"ns[undefined]#ns[undefined]#toJSON","$kind":"method","id":2003,"neoClassName":"Neo.data.RecordFactory"},{"comment":"/**\n     * Tests if a given object is an instance of a class created by this factory\n     * @param {Object} record\n     * @returns {Boolean}\n     */","meta":{"range":[10167,10232],"filename":"RecordFactory.mjs","lineno":282,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/data","code":{"id":"astnode100061883","name":"RecordFactory#isRecord","type":"MethodDefinition","paramnames":["record"]},"vars":{"":null}},"description":"<p>Tests if a given object is an instance of a class created by this factory</p>\n","params":[{"type":{"names":["Object"]},"name":"record"}],"returns":[{"type":{"names":["Boolean"]}}],"name":"isRecord","longname":"RecordFactory#isRecord","kind":"function","memberof":"RecordFactory","scope":"instance","$longname":"RecordFactory#isRecord","$kind":"method","id":2004,"neoClassName":"Neo.data.RecordFactory"},{"comment":"/**\n     * Gets triggered after changing the value of a record field.\n     * E.g. myRecord.foo = 'bar';\n     * @param {Object} opts\n     * @param {Object[]} opts.fields Each field object contains the keys: name, oldValue, value\n     * @param {Neo.data.Model} opts.model The model instance of the changed record\n     * @param {Object} opts.record\n     */","meta":{"range":[10596,10682],"filename":"RecordFactory.mjs","lineno":294,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/data","code":{"id":"astnode100061892","name":"RecordFactory#onRecordChange","type":"MethodDefinition","paramnames":["opts"]},"vars":{"":null}},"description":"<p>Gets triggered after changing the value of a record field.\nE.g. myRecord.foo = &#39;bar&#39;;</p>\n","params":[{"type":{"names":["Object"]},"name":"opts"},{"type":{"names":["Array.<Object>"]},"description":"<p>Each field object contains the keys: name, oldValue, value</p>\n","name":"opts.fields"},{"type":{"names":["Neo.data.Model"]},"description":"<p>The model instance of the changed record</p>\n","name":"opts.model"},{"type":{"names":["Object"]},"name":"opts.record"}],"name":"onRecordChange","longname":"RecordFactory#onRecordChange","kind":"function","memberof":"RecordFactory","scope":"instance","$longname":"RecordFactory#onRecordChange","$kind":"method","id":2005,"neoClassName":"Neo.data.RecordFactory"},{"comment":"/**\n     * @param {Object}  data\n     * @param {Object}  data.record\n     * @param {Object}  data.field\n     * @param {*}       [data.value=null]\n     * @param {Object}  [data.recordConfig=null]\n     * @param {Boolean} [data.useOriginalData=false]\n     * @returns {*}\n     */","meta":{"range":[10968,13261],"filename":"RecordFactory.mjs","lineno":307,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/data","code":{"id":"astnode100061899","name":"RecordFactory#parseRecordValue","type":"MethodDefinition","paramnames":[""]},"vars":{"":null}},"params":[{"type":{"names":["Object"]},"name":"data"},{"type":{"names":["Object"]},"name":"data.record"},{"type":{"names":["Object"]},"name":"data.field"},{"type":{"names":["*"]},"optional":true,"defaultvalue":null,"name":"data.value"},{"type":{"names":["Object"]},"optional":true,"defaultvalue":null,"name":"data.recordConfig"},{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"name":"data.useOriginalData"}],"returns":[{"type":{"names":["*"]}}],"name":"parseRecordValue","longname":"RecordFactory#parseRecordValue","kind":"function","memberof":"RecordFactory","scope":"instance","$longname":"RecordFactory#parseRecordValue","$kind":"method","id":2006,"neoClassName":"Neo.data.RecordFactory"},{"comment":"/**\n     * @param {Object}         data\n     * @param {String}         data.fieldName\n     * @param {Neo.data.Model} data.model\n     * @param {Record}         data.record\n     * @param {Boolean}        data.useOriginalData=false true will apply changes to the originalData symbol\n     * @param {*}              data.value\n     * @protected\n     */","meta":{"range":[13619,14209],"filename":"RecordFactory.mjs","lineno":385,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/data","code":{"id":"astnode100062184","name":"RecordFactory#setRecordData","type":"MethodDefinition","paramnames":[""]},"vars":{"":null}},"params":[{"type":{"names":["Object"]},"name":"data"},{"type":{"names":["String"]},"name":"data.fieldName"},{"type":{"names":["Neo.data.Model"]},"name":"data.model"},{"type":{"names":["Record"]},"name":"data.record"},{"type":{"names":["Boolean"]},"defaultvalue":false,"description":"<p>true will apply changes to the originalData symbol</p>\n","name":"data.useOriginalData"},{"type":{"names":["*"]},"name":"data.value"}],"access":"protected","name":"setRecordData","longname":"RecordFactory#setRecordData","kind":"function","memberof":"RecordFactory","scope":"instance","$longname":"RecordFactory#setRecordData","$kind":"method","id":2007,"neoClassName":"Neo.data.RecordFactory"},{"comment":"/**\n     * @param {Object}         data\n     * @param {Object[]}       data.changedFields=[] Internal flag\n     * @param {Object}         data.fields\n     * @param {Neo.data.Model} data.model\n     * @param {Object}         data.record\n     * @param {Boolean}        data.silent=false\n     * @param {Boolean}        data.useOriginalData=false true will apply changes to the originalData symbol\n     */","meta":{"range":[14620,16818],"filename":"RecordFactory.mjs","lineno":414,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/data","code":{"id":"astnode100062275","name":"RecordFactory#setRecordFields","type":"MethodDefinition","paramnames":[""]},"vars":{"":null}},"params":[{"type":{"names":["Object"]},"name":"data"},{"type":{"names":["Array.<Object>"]},"defaultvalue":"[","description":"<p>Internal flag</p>\n","name":"data.changedFields"},{"type":{"names":["Object"]},"name":"data.fields"},{"type":{"names":["Neo.data.Model"]},"name":"data.model"},{"type":{"names":["Object"]},"name":"data.record"},{"type":{"names":["Boolean"]},"defaultvalue":false,"name":"data.silent"},{"type":{"names":["Boolean"]},"defaultvalue":false,"description":"<p>true will apply changes to the originalData symbol</p>\n","name":"data.useOriginalData"}],"name":"setRecordFields","longname":"RecordFactory#setRecordFields","kind":"function","memberof":"RecordFactory","scope":"instance","$longname":"RecordFactory#setRecordFields","$kind":"method","id":2008,"neoClassName":"Neo.data.RecordFactory"}]}