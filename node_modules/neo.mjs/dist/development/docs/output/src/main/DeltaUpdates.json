{"classData":[{"comment":"/**\n * Manages and applies the Virtual DOM (VDom) delta updates generated by `Neo.vdom.Helper` to the real browser DOM.\n * This class acts as the bridge between the VDom worker's calculated changes and the actual rendering on the main thread.\n * It orchestrates various DOM manipulation operations such as node insertions, removals, moves, attribute updates,\n * and handles dynamic renderer switching based on `Neo.config.useDomApiRenderer`.\n *\n * As a singleton per browser window, it provides a centralized and efficient mechanism for synchronized DOM updates,\n * ensuring the UI accurately reflects the application state.\n * @class Neo.main.DeltaUpdates\n * @extends Neo.core.Base\n * @singleton\n */","meta":{"filename":"DeltaUpdates.mjs","lineno":7,"columnno":0,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/main","code":{}},"description":"<p>Manages and applies the Virtual DOM (VDom) delta updates generated by <code>Neo.vdom.Helper</code> to the real browser DOM.\nThis class acts as the bridge between the VDom worker&#39;s calculated changes and the actual rendering on the main thread.\nIt orchestrates various DOM manipulation operations such as node insertions, removals, moves, attribute updates,\nand handles dynamic renderer switching based on <code>Neo.config.useDomApiRenderer</code>.</p>\n<p>As a singleton per browser window, it provides a centralized and efficient mechanism for synchronized DOM updates,\nensuring the UI accurately reflects the application state.</p>\n","kind":"class","name":"DeltaUpdates","augments":["Neo.core.Base"],"tags":[{"originalTitle":"singleton","title":"singleton","text":""}],"memberof":"Neo.main","longname":"Neo.main.DeltaUpdates","scope":"static","$longname":"Neo.main.DeltaUpdates","$kind":"class","id":4102,"neoClassName":"Neo.main.DeltaUpdates"},{"comment":"/**\n         * @member {String} className='Neo.main.DeltaUpdates'\n         * @protected\n         */","meta":{"filename":"DeltaUpdates.mjs","lineno":25,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/main","code":{}},"kind":"member","name":"className","type":{"names":["String"]},"defaultvalue":"'Neo.main.DeltaUpdates'","access":"protected","longname":"className","scope":"global","$longname":"className","$kind":"property","id":4103,"neoClassName":"Neo.main.DeltaUpdates"},{"comment":"/**\n         * @member {Number} countDeltas=0\n         * @protected\n         */","meta":{"filename":"DeltaUpdates.mjs","lineno":30,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/main","code":{}},"kind":"member","name":"countDeltas","type":{"names":["Number"]},"defaultvalue":0,"access":"protected","longname":"countDeltas","scope":"global","$longname":"countDeltas","$kind":"property","id":4104,"neoClassName":"Neo.main.DeltaUpdates"},{"comment":"/**\n         * @member {Number} countDeltasPer250ms=0\n         * @protected\n         */","meta":{"filename":"DeltaUpdates.mjs","lineno":35,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/main","code":{}},"kind":"member","name":"countDeltasPer250ms","type":{"names":["Number"]},"defaultvalue":0,"access":"protected","longname":"countDeltasPer250ms","scope":"global","$longname":"countDeltasPer250ms","$kind":"property","id":4105,"neoClassName":"Neo.main.DeltaUpdates"},{"comment":"/**\n         * @member {Number} countUpdates=0\n         * @protected\n         */","meta":{"filename":"DeltaUpdates.mjs","lineno":40,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/main","code":{}},"kind":"member","name":"countUpdates","type":{"names":["Number"]},"defaultvalue":0,"access":"protected","longname":"countUpdates","scope":"global","$longname":"countUpdates","$kind":"property","id":4106,"neoClassName":"Neo.main.DeltaUpdates"},{"comment":"/**\n         * @member {Boolean} renderCountDeltas_=false\n         * @protected\n         * @reactive\n         */","meta":{"filename":"DeltaUpdates.mjs","lineno":46,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/main","code":{}},"kind":"member","name":"renderCountDeltas_","type":{"names":["Boolean"]},"defaultvalue":false,"access":"protected","tags":[{"originalTitle":"reactive","title":"reactive","text":""}],"longname":"renderCountDeltas_","scope":"global","$longname":"renderCountDeltas_","$kind":"property","id":4107,"neoClassName":"Neo.main.DeltaUpdates"},{"comment":"/**\n         * @member {Boolean} singleton=true\n         */","meta":{"filename":"DeltaUpdates.mjs","lineno":50,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/main","code":{}},"kind":"member","name":"singleton","type":{"names":["Boolean"]},"defaultvalue":true,"longname":"singleton","scope":"global","$longname":"singleton","$kind":"property","id":4108,"neoClassName":"Neo.main.DeltaUpdates"},{"comment":"/**\n     * @member {Number} logDeltasIntervalId=0\n     * @protected\n     */","meta":{"filename":"DeltaUpdates.mjs","lineno":57,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/main","code":{}},"kind":"member","name":"logDeltasIntervalId","type":{"names":["Number"]},"defaultvalue":0,"access":"protected","longname":"logDeltasIntervalId","scope":"global","$longname":"logDeltasIntervalId","$kind":"property","id":4109,"neoClassName":"Neo.main.DeltaUpdates"},{"comment":"/**\n     * @param {Object} config\n     */","meta":{"range":[1863,2393],"filename":"DeltaUpdates.mjs","lineno":62,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/main","code":{"id":"astnode100118630","name":"DeltaUpdates#construct","type":"MethodDefinition","paramnames":["config"]},"vars":{"":null}},"params":[{"type":{"names":["Object"]},"name":"config"}],"name":"construct","longname":"DeltaUpdates#construct","kind":"function","memberof":"DeltaUpdates","scope":"instance","$longname":"DeltaUpdates#construct","$kind":"method","id":4110,"neoClassName":"Neo.main.DeltaUpdates"},{"comment":"/**\n     * Triggered after the renderCountDeltas config got changed\n     * @param {Boolean} value\n     * @param {Boolean} oldValue\n     * @protected\n     */","meta":{"range":[2560,3263],"filename":"DeltaUpdates.mjs","lineno":84,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/main","code":{"id":"astnode100118679","name":"DeltaUpdates#afterSetRenderCountDeltas","type":"MethodDefinition","paramnames":["value","oldValue"]},"vars":{"":null}},"description":"<p>Triggered after the renderCountDeltas config got changed</p>\n","params":[{"type":{"names":["Boolean"]},"name":"value"},{"type":{"names":["Boolean"]},"name":"oldValue"}],"access":"protected","name":"afterSetRenderCountDeltas","longname":"DeltaUpdates#afterSetRenderCountDeltas","kind":"function","memberof":"DeltaUpdates","scope":"instance","$longname":"DeltaUpdates#afterSetRenderCountDeltas","$kind":"method","id":4111,"neoClassName":"Neo.main.DeltaUpdates"},{"comment":"/**\n     * Changes the tag name (nodeName) of an existing HTMLElement in the DOM.\n     * This operation is performed by creating a new HTML element with the desired `nodeName`,\n     * meticulously copying all attributes and the `innerHTML` from the original `node` to the new one,\n     * and then seamlessly replacing the original `node` with the newly created element within its parent.\n     *\n     * @param {HTMLElement} node     The existing DOM HTMLElement whose tag name needs to be changed.\n     * @param {String}      nodeName The new tag name (e.g., 'div', 'span', 'p') for the element.\n     */","meta":{"range":[3876,4412],"filename":"DeltaUpdates.mjs","lineno":116,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/main","code":{"id":"astnode100118756","name":"DeltaUpdates#changeNodeName","type":"MethodDefinition","paramnames":["node","nodeName"]},"vars":{"":null}},"description":"<p>Changes the tag name (nodeName) of an existing HTMLElement in the DOM.\nThis operation is performed by creating a new HTML element with the desired <code>nodeName</code>,\nmeticulously copying all attributes and the <code>innerHTML</code> from the original <code>node</code> to the new one,\nand then seamlessly replacing the original <code>node</code> with the newly created element within its parent.</p>\n","params":[{"type":{"names":["HTMLElement"]},"description":"<p>The existing DOM HTMLElement whose tag name needs to be changed.</p>\n","name":"node"},{"type":{"names":["String"]},"description":"<p>The new tag name (e.g., &#39;div&#39;, &#39;span&#39;, &#39;p&#39;) for the element.</p>\n","name":"nodeName"}],"name":"changeNodeName","longname":"DeltaUpdates#changeNodeName","kind":"function","memberof":"DeltaUpdates","scope":"instance","$longname":"DeltaUpdates#changeNodeName","$kind":"method","id":4112,"neoClassName":"Neo.main.DeltaUpdates"},{"comment":"/**\n     * @param {Object} delta\n     * @param {String} delta.id\n     */","meta":{"range":[4495,4560],"filename":"DeltaUpdates.mjs","lineno":139,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/main","code":{"id":"astnode100118831","name":"DeltaUpdates#focusNode","type":"MethodDefinition","paramnames":[""]},"vars":{"":null}},"params":[{"type":{"names":["Object"]},"name":"delta"},{"type":{"names":["String"]},"name":"delta.id"}],"name":"focusNode","longname":"DeltaUpdates#focusNode","kind":"function","memberof":"DeltaUpdates","scope":"instance","$longname":"DeltaUpdates#focusNode","$kind":"method","id":4113,"neoClassName":"Neo.main.DeltaUpdates"},{"comment":"/**\n     * Imports either (if not already imported):\n     * `Neo.main.render.DomApiRenderer`      if Neo.config.useDomApiRenderer === true\n     * `Neo.main.render.StringBasedRenderer` if Neo.config.useDomApiRenderer === false\n     * @returns {Promise<void>}\n     * @protected\n     */","meta":{"range":[4854,5234],"filename":"DeltaUpdates.mjs","lineno":150,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/main","code":{"id":"astnode100118840","name":"DeltaUpdates#importRenderer","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Imports either (if not already imported):\n<code>Neo.main.render.DomApiRenderer</code>      if Neo.config.useDomApiRenderer === true\n<code>Neo.main.render.StringBasedRenderer</code> if Neo.config.useDomApiRenderer === false</p>\n","returns":[{"type":{"names":["Promise.<void>"]}}],"access":"protected","name":"importRenderer","longname":"DeltaUpdates#importRenderer","kind":"function","memberof":"DeltaUpdates","scope":"instance","params":[],"async":true,"$longname":"DeltaUpdates#importRenderer","$kind":"method","id":4114,"neoClassName":"Neo.main.DeltaUpdates"},{"comment":"/**\n     * @returns {Promise<void>}\n     */","meta":{"range":[5288,5609],"filename":"DeltaUpdates.mjs","lineno":167,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/main","code":{"id":"astnode100118872","name":"DeltaUpdates#initAsync","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"returns":[{"type":{"names":["Promise.<void>"]}}],"name":"initAsync","longname":"DeltaUpdates#initAsync","kind":"function","memberof":"DeltaUpdates","scope":"instance","params":[],"async":true,"$longname":"DeltaUpdates#initAsync","$kind":"method","id":4115,"neoClassName":"Neo.main.DeltaUpdates"},{"comment":"/**\n     * Inserts a new node into the DOM tree based on delta updates.\n     * This method handles both string-based (outerHTML) and direct DOM API (vnode) mounting.\n     * It ensures the node is inserted at the correct index within the parent.\n     * This method is synchronous and *expects* the appropriate renderer (DomApiRenderer or StringBasedRenderer) to be already loaded.\n     *\n     * @param {Object}         delta\n     * @param {Boolean}        delta.hasLeadingTextChildren Flag to honor leading comments, which require special treatment.\n     * @param {Number}         delta.index                  The index at which to insert the new node within its parent.\n     * @param {String}         [delta.outerHTML]            The string representation of the new node (for string-based mounting).\n     * @param {String}         delta.parentId               The ID of the parent DOM node.\n     * @param {Neo.vdom.VNode} [delta.vnode]                The VNode representation of the new node (for direct DOM API mounting).\n     */","meta":{"range":[6651,7202],"filename":"DeltaUpdates.mjs","lineno":194,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/main","code":{"id":"astnode100118907","name":"DeltaUpdates#insertNode","type":"MethodDefinition","paramnames":[""]},"vars":{"":null}},"description":"<p>Inserts a new node into the DOM tree based on delta updates.\nThis method handles both string-based (outerHTML) and direct DOM API (vnode) mounting.\nIt ensures the node is inserted at the correct index within the parent.\nThis method is synchronous and <em>expects</em> the appropriate renderer (DomApiRenderer or StringBasedRenderer) to be already loaded.</p>\n","params":[{"type":{"names":["Object"]},"name":"delta"},{"type":{"names":["Boolean"]},"description":"<p>Flag to honor leading comments, which require special treatment.</p>\n","name":"delta.hasLeadingTextChildren"},{"type":{"names":["Number"]},"description":"<p>The index at which to insert the new node within its parent.</p>\n","name":"delta.index"},{"type":{"names":["String"]},"optional":true,"description":"<p>The string representation of the new node (for string-based mounting).</p>\n","name":"delta.outerHTML"},{"type":{"names":["String"]},"description":"<p>The ID of the parent DOM node.</p>\n","name":"delta.parentId"},{"type":{"names":["Neo.vdom.VNode"]},"optional":true,"description":"<p>The VNode representation of the new node (for direct DOM API mounting).</p>\n","name":"delta.vnode"}],"name":"insertNode","longname":"DeltaUpdates#insertNode","kind":"function","memberof":"DeltaUpdates","scope":"instance","$longname":"DeltaUpdates#insertNode","$kind":"method","id":4116,"neoClassName":"Neo.main.DeltaUpdates"},{"comment":"/**\n     *\n     */","meta":{"range":[7231,7680],"filename":"DeltaUpdates.mjs","lineno":212,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/main","code":{"id":"astnode100118983","name":"DeltaUpdates#checkRendererAvailability","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"name":"checkRendererAvailability","longname":"DeltaUpdates#checkRendererAvailability","kind":"function","memberof":"DeltaUpdates","scope":"instance","params":[],"$longname":"DeltaUpdates#checkRendererAvailability","$kind":"method","id":4117,"neoClassName":"Neo.main.DeltaUpdates"},{"comment":"/**\n     * Moves an existing DOM node to a new position within its parent or to a new parent.\n     * This method directly manipulates the DOM using the pre-calculated physical index,\n     * accounting for potential text nodes wrapped in comments.\n     * It performs a direct sibling swap when an element is immediately followed by its target position,\n     * which is necessary to prevent attempting to replace a node with itself.\n     *\n     * @param {Object} delta\n     * @param {String} delta.id       The ID of the DOM node to move.\n     * @param {Number} delta.index    The physical index at which to insert the node within the target parent's childNodes.\n     * @param {String} delta.parentId The ID of the target parent DOM node.\n     */","meta":{"range":[8435,9484],"filename":"DeltaUpdates.mjs","lineno":238,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/main","code":{"id":"astnode100119017","name":"DeltaUpdates#moveNode","type":"MethodDefinition","paramnames":[""]},"vars":{"":null}},"description":"<p>Moves an existing DOM node to a new position within its parent or to a new parent.\nThis method directly manipulates the DOM using the pre-calculated physical index,\naccounting for potential text nodes wrapped in comments.\nIt performs a direct sibling swap when an element is immediately followed by its target position,\nwhich is necessary to prevent attempting to replace a node with itself.</p>\n","params":[{"type":{"names":["Object"]},"name":"delta"},{"type":{"names":["String"]},"description":"<p>The ID of the DOM node to move.</p>\n","name":"delta.id"},{"type":{"names":["Number"]},"description":"<p>The physical index at which to insert the node within the target parent&#39;s childNodes.</p>\n","name":"delta.index"},{"type":{"names":["String"]},"description":"<p>The ID of the target parent DOM node.</p>\n","name":"delta.parentId"}],"name":"moveNode","longname":"DeltaUpdates#moveNode","kind":"function","memberof":"DeltaUpdates","scope":"instance","$longname":"DeltaUpdates#moveNode","$kind":"method","id":4118,"neoClassName":"Neo.main.DeltaUpdates"},{"comment":"/**\n     * Handler for global Neo.config changes.\n     * If the `Neo.config.useDomApiRenderer` value changes, this method dynamically loads the renderer.\n     * @param {Object} config\n     * @return {Promise<void>}\n     */","meta":{"range":[9717,9864],"filename":"DeltaUpdates.mjs","lineno":269,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/main","code":{"id":"astnode100119103","name":"DeltaUpdates#onNeoConfigChange","type":"MethodDefinition","paramnames":["config"]},"vars":{"":null}},"description":"<p>Handler for global Neo.config changes.\nIf the <code>Neo.config.useDomApiRenderer</code> value changes, this method dynamically loads the renderer.</p>\n","params":[{"type":{"names":["Object"]},"name":"config"}],"returns":[{"type":{"names":["Promise.<void>"]}}],"name":"onNeoConfigChange","longname":"DeltaUpdates#onNeoConfigChange","kind":"function","memberof":"DeltaUpdates","scope":"instance","async":true,"$longname":"DeltaUpdates#onNeoConfigChange","$kind":"method","id":4119,"neoClassName":"Neo.main.DeltaUpdates"},{"comment":"/**\n     * Clears all child nodes of a given parent DOM node.\n     * This is achieved by setting its `innerHTML` property to an empty string,\n     * which is generally considered the fastest and most efficient way to remove\n     * all children from a DOM element in modern browsers.\n     *\n     * @param {Object} delta\n     * @param {String} delta.parentId The ID of the parent DOM node whose children will be removed.\n     */","meta":{"range":[10301,10444],"filename":"DeltaUpdates.mjs","lineno":284,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/main","code":{"id":"astnode100119122","name":"DeltaUpdates#removeAll","type":"MethodDefinition","paramnames":[""]},"vars":{"":null}},"description":"<p>Clears all child nodes of a given parent DOM node.\nThis is achieved by setting its <code>innerHTML</code> property to an empty string,\nwhich is generally considered the fastest and most efficient way to remove\nall children from a DOM element in modern browsers.</p>\n","params":[{"type":{"names":["Object"]},"name":"delta"},{"type":{"names":["String"]},"description":"<p>The ID of the parent DOM node whose children will be removed.</p>\n","name":"delta.parentId"}],"name":"removeAll","longname":"DeltaUpdates#removeAll","kind":"function","memberof":"DeltaUpdates","scope":"instance","$longname":"DeltaUpdates#removeAll","$kind":"method","id":4120,"neoClassName":"Neo.main.DeltaUpdates"},{"comment":"/**\n     * Removes a DOM node from its parent.\n     * This method handles both standard HTML elements and virtual text nodes,\n     * which are typically wrapped within comment nodes in the DOM.\n     *\n     * @param {Object} delta\n     * @param {String} delta.id       The ID of the DOM node to remove.\n     * @param {String} delta.parentId The ID of the parent DOM node (required for text node removal).\n     */","meta":{"range":[10866,12102],"filename":"DeltaUpdates.mjs","lineno":301,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/main","code":{"id":"astnode100119146","name":"DeltaUpdates#removeNode","type":"MethodDefinition","paramnames":[""]},"vars":{"":null}},"description":"<p>Removes a DOM node from its parent.\nThis method handles both standard HTML elements and virtual text nodes,\nwhich are typically wrapped within comment nodes in the DOM.</p>\n","params":[{"type":{"names":["Object"]},"name":"delta"},{"type":{"names":["String"]},"description":"<p>The ID of the DOM node to remove.</p>\n","name":"delta.id"},{"type":{"names":["String"]},"description":"<p>The ID of the parent DOM node (required for text node removal).</p>\n","name":"delta.parentId"}],"name":"removeNode","longname":"DeltaUpdates#removeNode","kind":"function","memberof":"DeltaUpdates","scope":"instance","$longname":"DeltaUpdates#removeNode","$kind":"method","id":4121,"neoClassName":"Neo.main.DeltaUpdates"},{"comment":"/**\n     * Replaces an existing child DOM node (`fromId`) with a new DOM node (`toId`)\n     * within a specified parent DOM node (`parentId`).\n     * This operation directly invokes the native `Node.replaceChild()` API,\n     * performing an atomic swap of the elements in the DOM tree.\n     * It is typically used when a specific DOM element needs to be completely\n     * exchanged for a different one at the same position.\n     *\n     * @param {Object} delta\n     * @param {String} delta.fromId   The ID of the existing child DOM node to be replaced.\n     * @param {String} delta.parentId The ID of the parent DOM node containing the child to be replaced.\n     * @param {String} delta.toId     The ID of the new DOM node that will replace the old one.\n     */","meta":{"range":[12873,13056],"filename":"DeltaUpdates.mjs","lineno":347,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/main","code":{"id":"astnode100119249","name":"DeltaUpdates#replaceChild","type":"MethodDefinition","paramnames":[""]},"vars":{"":null}},"description":"<p>Replaces an existing child DOM node (<code>fromId</code>) with a new DOM node (<code>toId</code>)\nwithin a specified parent DOM node (<code>parentId</code>).\nThis operation directly invokes the native <code>Node.replaceChild()</code> API,\nperforming an atomic swap of the elements in the DOM tree.\nIt is typically used when a specific DOM element needs to be completely\nexchanged for a different one at the same position.</p>\n","params":[{"type":{"names":["Object"]},"name":"delta"},{"type":{"names":["String"]},"description":"<p>The ID of the existing child DOM node to be replaced.</p>\n","name":"delta.fromId"},{"type":{"names":["String"]},"description":"<p>The ID of the parent DOM node containing the child to be replaced.</p>\n","name":"delta.parentId"},{"type":{"names":["String"]},"description":"<p>The ID of the new DOM node that will replace the old one.</p>\n","name":"delta.toId"}],"name":"replaceChild","longname":"DeltaUpdates#replaceChild","kind":"function","memberof":"DeltaUpdates","scope":"instance","$longname":"DeltaUpdates#replaceChild","$kind":"method","id":4122,"neoClassName":"Neo.main.DeltaUpdates"},{"comment":"/**\n     * Updates various properties of an existing DOM node based on the provided delta.\n     * This includes updating attributes, class names, inner HTML, node name, and inline styles.\n     * It handles specific cases for attribute types (e.g., boolean attributes, 'value')\n     * and style properties (e.g., '!important').\n     *\n     * @param {Object} delta\n     * @param {String} delta.id            The ID of the DOM node to update.\n     * @param {Object} [delta.attributes]  An object containing attribute key-value pairs to update or remove (if value is null/empty).\n     * @param {Object} [delta.cls]         An object containing 'add' and/or 'remove' arrays for CSS classes.\n     * @param {String} [delta.innerHTML]   The new inner HTML content for the node.\n     * @param {String} [delta.nodeName]    The new tag name for the node (will trigger a node replacement).\n     * @param {String} [delta.outerHTML]   The new outer HTML content for the node (will trigger a node replacement).\n     * @param {Object} [delta.style]       An object containing CSS style properties to update. Values can include '!important'.\n     * @param {String} [delta.textContent] The new text content for the node (replaces innerHTML if present).\n     */","meta":{"range":[14309,17300],"filename":"DeltaUpdates.mjs","lineno":369,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/main","code":{"id":"astnode100119270","name":"DeltaUpdates#updateNode","type":"MethodDefinition","paramnames":["delta"]},"vars":{"":null}},"description":"<p>Updates various properties of an existing DOM node based on the provided delta.\nThis includes updating attributes, class names, inner HTML, node name, and inline styles.\nIt handles specific cases for attribute types (e.g., boolean attributes, &#39;value&#39;)\nand style properties (e.g., &#39;!important&#39;).</p>\n","params":[{"type":{"names":["Object"]},"name":"delta"},{"type":{"names":["String"]},"description":"<p>The ID of the DOM node to update.</p>\n","name":"delta.id"},{"type":{"names":["Object"]},"optional":true,"description":"<p>An object containing attribute key-value pairs to update or remove (if value is null/empty).</p>\n","name":"delta.attributes"},{"type":{"names":["Object"]},"optional":true,"description":"<p>An object containing &#39;add&#39; and/or &#39;remove&#39; arrays for CSS classes.</p>\n","name":"delta.cls"},{"type":{"names":["String"]},"optional":true,"description":"<p>The new inner HTML content for the node.</p>\n","name":"delta.innerHTML"},{"type":{"names":["String"]},"optional":true,"description":"<p>The new tag name for the node (will trigger a node replacement).</p>\n","name":"delta.nodeName"},{"type":{"names":["String"]},"optional":true,"description":"<p>The new outer HTML content for the node (will trigger a node replacement).</p>\n","name":"delta.outerHTML"},{"type":{"names":["Object"]},"optional":true,"description":"<p>An object containing CSS style properties to update. Values can include &#39;!important&#39;.</p>\n","name":"delta.style"},{"type":{"names":["String"]},"optional":true,"description":"<p>The new text content for the node (replaces innerHTML if present).</p>\n","name":"delta.textContent"}],"name":"updateNode","longname":"DeltaUpdates#updateNode","kind":"function","memberof":"DeltaUpdates","scope":"instance","$longname":"DeltaUpdates#updateNode","$kind":"method","id":4123,"neoClassName":"Neo.main.DeltaUpdates"},{"comment":"/**\n     * Updates the text content of a virtual text node within the DOM.\n     * Virtual text nodes are rendered within the DOM as a pair of HTML comments,\n     * with their content embedded between them. This method locates the specific\n     * text node by its ID (embedded in the start comment tag) within its parent's\n     * innerHTML and replaces its content using a regular expression.\n     *\n     * @param {Object} delta\n     * @param {String} delta.id       The unique ID of the virtual text node, which is embedded in its opening comment tag.\n     * @param {String} delta.parentId The ID of the parent DOM node whose `innerHTML` contains the virtual text node.\n     * @param {String} delta.value    The new text content to be applied to the virtual text node.\n     */","meta":{"range":[18087,18404],"filename":"DeltaUpdates.mjs","lineno":447,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/main","code":{"id":"astnode100119555","name":"DeltaUpdates#updateVtext","type":"MethodDefinition","paramnames":[""]},"vars":{"":null}},"description":"<p>Updates the text content of a virtual text node within the DOM.\nVirtual text nodes are rendered within the DOM as a pair of HTML comments,\nwith their content embedded between them. This method locates the specific\ntext node by its ID (embedded in the start comment tag) within its parent&#39;s\ninnerHTML and replaces its content using a regular expression.</p>\n","params":[{"type":{"names":["Object"]},"name":"delta"},{"type":{"names":["String"]},"description":"<p>The unique ID of the virtual text node, which is embedded in its opening comment tag.</p>\n","name":"delta.id"},{"type":{"names":["String"]},"description":"<p>The ID of the parent DOM node whose <code>innerHTML</code> contains the virtual text node.</p>\n","name":"delta.parentId"},{"type":{"names":["String"]},"description":"<p>The new text content to be applied to the virtual text node.</p>\n","name":"delta.value"}],"name":"updateVtext","longname":"DeltaUpdates#updateVtext","kind":"function","memberof":"DeltaUpdates","scope":"instance","$longname":"DeltaUpdates#updateVtext","$kind":"method","id":4124,"neoClassName":"Neo.main.DeltaUpdates"},{"comment":"/**\n     * Applies a set of VDom delta updates to the real DOM.\n     * This method is the core entry point for rendering changes initiated from the VDom worker.\n     * It iterates through the provided deltas and dispatches them to specific DOM manipulation\n     * methods (e.g., insertNode, removeNode, updateNode) based on their `action` property.\n     * This method expects the appropriate renderer (DomApiRenderer or StringBasedRenderer)\n     * to be loaded based on `Neo.config.useDomApiRenderer`.\n     *\n     * @param {Object} data\n     * @param {Object|Object[]} data.deltas An array of delta objects, or a single delta object,\n     * representing changes to be applied to the DOM.\n     * Each delta object contains an `action` property\n     * (e.g., 'insertNode', 'removeNode', 'updateNode', 'moveNode')\n     * and additional properties relevant to the specific action.\n     * @param {String} data.id             The unique ID of the request, used for sending a reply back to the origin.\n     * @param {String} [data.origin='app'] The origin of the message (e.g., 'app'), used for sending replies.\n     */","meta":{"range":[19527,20392],"filename":"DeltaUpdates.mjs","lineno":473,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/main","code":{"id":"astnode100119603","name":"DeltaUpdates#update","type":"MethodDefinition","paramnames":["data"]},"vars":{"":null}},"description":"<p>Applies a set of VDom delta updates to the real DOM.\nThis method is the core entry point for rendering changes initiated from the VDom worker.\nIt iterates through the provided deltas and dispatches them to specific DOM manipulation\nmethods (e.g., insertNode, removeNode, updateNode) based on their <code>action</code> property.\nThis method expects the appropriate renderer (DomApiRenderer or StringBasedRenderer)\nto be loaded based on <code>Neo.config.useDomApiRenderer</code>.</p>\n","params":[{"type":{"names":["Object"]},"name":"data"},{"type":{"names":["Object","Array.<Object>"]},"description":"<p>An array of delta objects, or a single delta object,\nrepresenting changes to be applied to the DOM.\nEach delta object contains an <code>action</code> property\n(e.g., &#39;insertNode&#39;, &#39;removeNode&#39;, &#39;updateNode&#39;, &#39;moveNode&#39;)\nand additional properties relevant to the specific action.</p>\n","name":"data.deltas"},{"type":{"names":["String"]},"description":"<p>The unique ID of the request, used for sending a reply back to the origin.</p>\n","name":"data.id"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"'app'","description":"<p>The origin of the message (e.g., &#39;app&#39;), used for sending replies.</p>\n","name":"data.origin"}],"name":"update","longname":"DeltaUpdates#update","kind":"function","memberof":"DeltaUpdates","scope":"instance","$longname":"DeltaUpdates#update","$kind":"method","id":4125,"neoClassName":"Neo.main.DeltaUpdates"}]}