{"classData":[{"comment":"/**\n * Base class for main thread addons\n * @class Neo.main.addon.Base\n * @extends Neo.core.Base\n *\n * This version aligns the file loading and readiness state according to the rule:\n * `initAsync()` MUST await for `loadFiles()` to be completed before the addon is considered `isReady`.\n * `preloadFilesDelay` controls when `loadFiles()` is initiated in the background, but can be\n * overridden by `cacheMethodCall()`.\n */","meta":{"filename":"Base.mjs","lineno":3,"columnno":0,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/main/addon","code":{}},"description":"<p>Base class for main thread addons</p>\n","kind":"class","name":"Base","augments":["Neo.core.Base"],"memberof":"Neo.main.addon","longname":"Neo.main.addon.Base","scope":"static","$longname":"Neo.main.addon.Base","$kind":"class","id":3705,"neoClassName":"Neo.main.addon.Base"},{"comment":"/**\n         * @member {String} className='Neo.main.addon.Base'\n         * @protected\n         */","meta":{"filename":"Base.mjs","lineno":19,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/main/addon","code":{}},"kind":"member","name":"className","type":{"names":["String"]},"defaultvalue":"'Neo.main.addon.Base'","access":"protected","longname":"className","scope":"global","$longname":"className","$kind":"property","id":3706,"neoClassName":"Neo.main.addon.Base"},{"comment":"/**\n         * An identifier for core.Base to get handled like singletons for remote method access\n         * @member {Boolean} isMainThreadAddon=true\n         * @protected\n         */","meta":{"filename":"Base.mjs","lineno":25,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/main/addon","code":{}},"description":"<p>An identifier for core.Base to get handled like singletons for remote method access</p>\n","kind":"member","name":"isMainThreadAddon","type":{"names":["Boolean"]},"defaultvalue":true,"access":"protected","longname":"isMainThreadAddon","scope":"global","$longname":"isMainThreadAddon","$kind":"property","id":3707,"neoClassName":"Neo.main.addon.Base"},{"comment":"/**\n         * Amount in ms to delay the background loading of library files.\n         * Set to `false` to disable automated preloading and rely solely on lazy loading\n         * via `cacheMethodCall()`. Set to `0` for immediate background preload.\n         * @member {Boolean|Number} preloadFilesDelay=5000\n         * @protected\n         */","meta":{"filename":"Base.mjs","lineno":33,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/main/addon","code":{}},"description":"<p>Amount in ms to delay the background loading of library files.\nSet to <code>false</code> to disable automated preloading and rely solely on lazy loading\nvia <code>cacheMethodCall()</code>. Set to <code>0</code> for immediate background preload.</p>\n","kind":"member","name":"preloadFilesDelay","type":{"names":["Boolean","Number"]},"defaultvalue":5000,"access":"protected","longname":"preloadFilesDelay","scope":"global","$longname":"preloadFilesDelay","$kind":"property","id":3708,"neoClassName":"Neo.main.addon.Base"},{"comment":"/**\n     * Internal cache for remote method calls received when `isReady` is false.\n     * @member {Object[]} cache=[]\n     */","meta":{"filename":"Base.mjs","lineno":40,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/main/addon","code":{}},"description":"<p>Internal cache for remote method calls received when <code>isReady</code> is false.</p>\n","kind":"member","name":"cache","type":{"names":["Array.<Object>"]},"defaultvalue":"[]","longname":"cache","scope":"global","$longname":"cache","$kind":"property","id":3709,"neoClassName":"Neo.main.addon.Base"},{"comment":"/**\n     * Returns true if `loadFiles()` has been initiated and is currently in progress.\n     * @member {Boolean} isLoading\n     */","meta":{"filename":"Base.mjs","lineno":45,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/main/addon","code":{}},"description":"<p>Returns true if <code>loadFiles()</code> has been initiated and is currently in progress.</p>\n","kind":"member","name":"isLoading","type":{"names":["Boolean"]},"longname":"isLoading","scope":"global","$longname":"isLoading","$kind":"property","id":3710,"neoClassName":"Neo.main.addon.Base"},{"comment":"/**\n     * A private promise that tracks the completion of `loadFiles()`.\n     * This ensures `loadFiles()` is called only once and can be awaited by multiple consumers.\n     * @member {Promise<void>|null} #loadFilesPromise=null\n     */","meta":{"filename":"Base.mjs","lineno":54,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/main/addon","code":{}},"description":"<p>A private promise that tracks the completion of <code>loadFiles()</code>.\nThis ensures <code>loadFiles()</code> is called only once and can be awaited by multiple consumers.</p>\n","kind":"member","name":"#loadFilesPromise","type":{"names":["Promise.<void>","null"]},"defaultvalue":null,"longname":"#loadFilesPromise","scope":"global","$longname":"#loadFilesPromise","$kind":"property","id":3711,"neoClassName":"Neo.main.addon.Base"},{"comment":"/**\n     * The `resolve` function for `#loadFilesPromise`, allowing external control over its resolution.\n     * @member {Function|null} #loadFilesPromiseResolver=null\n     */","meta":{"filename":"Base.mjs","lineno":59,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/main/addon","code":{}},"description":"<p>The <code>resolve</code> function for <code>#loadFilesPromise</code>, allowing external control over its resolution.</p>\n","kind":"member","name":"#loadFilesPromiseResolver","type":{"names":["function","null"]},"defaultvalue":null,"longname":"#loadFilesPromiseResolver","scope":"global","$longname":"#loadFilesPromiseResolver","$kind":"property","id":3712,"neoClassName":"Neo.main.addon.Base"},{"comment":"/**\n     * @param {Object} config\n     */","meta":{"range":[2319,3735],"filename":"Base.mjs","lineno":64,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/main/addon","code":{"id":"astnode100105898","name":"Base#construct","type":"MethodDefinition","paramnames":["config"]},"vars":{"":null}},"params":[{"type":{"names":["Object"]},"name":"config"}],"name":"construct","longname":"Base#construct","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#construct","$kind":"method","id":3713,"neoClassName":"Neo.main.addon.Base"},{"comment":"/**\n     * Async initialization hook for instances.\n     * `initAsync` MUST await for `loadFiles()` to be completed. Only then the addon is ready.\n     * @returns {Promise<void>}\n     */","meta":{"range":[4634,5012],"filename":"Base.mjs","lineno":122,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/main/addon","code":{"id":"astnode100106040","name":"Base#initAsync","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Async initialization hook for instances.\n<code>initAsync</code> MUST await for <code>loadFiles()</code> to be completed. Only then the addon is ready.</p>\n","returns":[{"type":{"names":["Promise.<void>"]}}],"name":"initAsync","longname":"Base#initAsync","kind":"function","memberof":"Base","scope":"instance","params":[],"async":true,"$longname":"Base#initAsync","$kind":"method","id":3714,"neoClassName":"Neo.main.addon.Base"},{"comment":"/**\n     * Triggered after the `isReady` config got changed.\n     * When `isReady` becomes true, any cached remote method calls are executed.\n     * At this point, `initAsync` has already ensured that `me.#loadFilesPromise` is resolved.\n     *\n     * This method is kept synchronous, delegating the async cache processing to a private method.\n     *\n     * @param {Boolean} value\n     * @param {Boolean} oldValue\n     * @protected\n     */","meta":{"range":[5461,5747],"filename":"Base.mjs","lineno":144,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/main/addon","code":{"id":"astnode100106060","name":"Base#afterSetIsReady","type":"MethodDefinition","paramnames":["value","oldValue"]},"vars":{"":null}},"description":"<p>Triggered after the <code>isReady</code> config got changed.\nWhen <code>isReady</code> becomes true, any cached remote method calls are executed.\nAt this point, <code>initAsync</code> has already ensured that <code>me.#loadFilesPromise</code> is resolved.</p>\n<p>This method is kept synchronous, delegating the async cache processing to a private method.</p>\n","params":[{"type":{"names":["Boolean"]},"name":"value"},{"type":{"names":["Boolean"]},"name":"oldValue"}],"access":"protected","name":"afterSetIsReady","longname":"Base#afterSetIsReady","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#afterSetIsReady","$kind":"method","id":3715,"neoClassName":"Neo.main.addon.Base"},{"comment":"/**\n     * Internally caches remote method calls if `isReady` is false.\n     * It also ensures that `loadFiles()` is initiated immediately, bypassing `preloadFilesDelay`.\n     * @param {Object} item - Contains method name (`fn`) and data (`data`).\n     * @returns {Promise<unknown>} A promise that resolves with the method's return value.\n     */","meta":{"range":[6104,6603],"filename":"Base.mjs","lineno":158,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/main/addon","code":{"id":"astnode100106075","name":"Base#cacheMethodCall","type":"MethodDefinition","paramnames":["item"]},"vars":{"":null}},"description":"<p>Internally caches remote method calls if <code>isReady</code> is false.\nIt also ensures that <code>loadFiles()</code> is initiated immediately, bypassing <code>preloadFilesDelay</code>.</p>\n","params":[{"type":{"names":["Object"]},"description":"<p>Contains method name (<code>fn</code>) and data (<code>data</code>).</p>\n","name":"item"}],"returns":[{"type":{"names":["Promise.<unknown>"]},"description":"A promise that resolves with the method's return value."}],"name":"cacheMethodCall","longname":"Base#cacheMethodCall","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#cacheMethodCall","$kind":"method","id":3716,"neoClassName":"Neo.main.addon.Base"},{"comment":"/**\n     * Placeholder method for loading external files.\n     * Subclasses (e.g., `Neo.main.addon.AmCharts`) must implement this.\n     * It **must** return a Promise that resolves when all necessary files are loaded.\n     * If `loadFiles()` is called multiple times, it should return the same pending promise\n     * or a resolved promise if files are already loaded.\n     * @returns {Promise<void>}\n     */","meta":{"range":[7021,7041],"filename":"Base.mjs","lineno":180,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/main/addon","code":{"id":"astnode100106117","name":"Base#loadFiles","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Placeholder method for loading external files.\nSubclasses (e.g., <code>Neo.main.addon.AmCharts</code>) must implement this.\nIt <strong>must</strong> return a Promise that resolves when all necessary files are loaded.\nIf <code>loadFiles()</code> is called multiple times, it should return the same pending promise\nor a resolved promise if files are already loaded.</p>\n","returns":[{"type":{"names":["Promise.<void>"]}}],"name":"loadFiles","longname":"Base#loadFiles","kind":"function","memberof":"Base","scope":"instance","params":[],"async":true,"$longname":"Base#loadFiles","$kind":"method","id":3717,"neoClassName":"Neo.main.addon.Base"},{"comment":"/**\n     * Handles intercepted remote method calls.\n     * If the addon is not ready, the call is cached using `cacheMethodCall()`.\n     * Otherwise, the original method is executed.\n     * @param {Object} msg The remote message object.\n     * @returns {Promise<any>} A promise that resolves with the method's return value.\n     */","meta":{"range":[7383,7490],"filename":"Base.mjs","lineno":189,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/main/addon","code":{"id":"astnode100106121","name":"Base#onInterceptRemotes","type":"MethodDefinition","paramnames":["msg"]},"vars":{"":null}},"description":"<p>Handles intercepted remote method calls.\nIf the addon is not ready, the call is cached using <code>cacheMethodCall()</code>.\nOtherwise, the original method is executed.</p>\n","params":[{"type":{"names":["Object"]},"description":"<p>The remote message object.</p>\n","name":"msg"}],"returns":[{"type":{"names":["Promise.<any>"]},"description":"A promise that resolves with the method's return value."}],"name":"onInterceptRemotes","longname":"Base#onInterceptRemotes","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#onInterceptRemotes","$kind":"method","id":3718,"neoClassName":"Neo.main.addon.Base"}]}