{"classData":[{"comment":"/**\n * @class Neo.form.Container\n * @extends Neo.container.Base\n */","meta":{"filename":"Container.mjs","lineno":6,"columnno":0,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form","code":{}},"kind":"class","name":"Container","augments":["Neo.container.Base"],"memberof":"Neo.form","longname":"Neo.form.Container","scope":"static","$longname":"Neo.form.Container","$kind":"class","id":2257,"neoClassName":"Neo.form.Container"},{"comment":"/**\n         * @member {String} className='Neo.form.Container'\n         * @protected\n         */","meta":{"filename":"Container.mjs","lineno":16,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form","code":{}},"kind":"member","name":"className","type":{"names":["String"]},"defaultvalue":"'Neo.form.Container'","access":"protected","longname":"className","scope":"global","$longname":"className","$kind":"property","id":2258,"neoClassName":"Neo.form.Container"},{"comment":"/**\n         * @member {String} ntype='form-container'\n         * @protected\n         */","meta":{"filename":"Container.mjs","lineno":21,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form","code":{}},"kind":"member","name":"ntype","type":{"names":["String"]},"defaultvalue":"'form-container'","access":"protected","longname":"ntype","scope":"global","$longname":"ntype","$kind":"property","id":2259,"neoClassName":"Neo.form.Container"},{"comment":"/**\n         * @member {String[]} baseCls=['neo-form-container'],\n         * @protected\n         */","meta":{"filename":"Container.mjs","lineno":26,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form","code":{}},"kind":"member","name":"baseCls","type":{"names":["Array.<String>"]},"defaultvalue":"['neo-form-container'],","access":"protected","longname":"baseCls","scope":"global","$longname":"baseCls","$kind":"property","id":2260,"neoClassName":"Neo.form.Container"},{"comment":"/**\n         * @member {Object} vdom={tag: 'form',cn:[],onsubmit:'return false;'}\n         */","meta":{"filename":"Container.mjs","lineno":30,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form","code":{}},"kind":"member","name":"vdom","type":{"names":["Object"]},"defaultvalue":"{tag: 'form',cn:[],onsubmit:'return false;'}","description":"<p>&#39;form&#39;,cn:[],onsubmit:&#39;return false;&#39;}</p>\n","longname":"vdom","scope":"global","$longname":"vdom","$kind":"property","id":2261,"neoClassName":"Neo.form.Container"},{"comment":"/**\n     * Helper function used by setValues() which wraps the leaves of a tree structure into a new property.\n     * @param {Object} values\n     * @param {String} configName\n     * @param {String[]} fieldPaths\n     * @param {String} currentPath=''\n     */","meta":{"range":[1217,2353],"filename":"Container.mjs","lineno":41,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form","code":{"id":"astnode100068485","name":"Container.adjustTreeLeaves","type":"MethodDefinition","paramnames":["values","configName","fieldPaths","currentPath"]},"vars":{"":null}},"description":"<p>Helper function used by setValues() which wraps the leaves of a tree structure into a new property.</p>\n","params":[{"type":{"names":["Object"]},"name":"values"},{"type":{"names":["String"]},"name":"configName"},{"type":{"names":["Array.<String>"]},"name":"fieldPaths"},{"type":{"names":["String"]},"defaultvalue":"''","name":"currentPath"}],"name":"adjustTreeLeaves","longname":"Container.adjustTreeLeaves","kind":"function","memberof":"Container","scope":"static","$longname":"Container.adjustTreeLeaves","$kind":"method","id":2262,"neoClassName":"Neo.form.Container"},{"comment":"/**\n     * @param {Neo.container.Base} parent\n     * @param {Object[]} modules\n     * @returns {Object[]}\n     */","meta":{"range":[2477,2833],"filename":"Container.mjs","lineno":78,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form","code":{"id":"astnode100068633","name":"Container#findNotLoadedModules","type":"MethodDefinition","paramnames":["parent","modules"]},"vars":{"":null}},"params":[{"type":{"names":["Neo.container.Base"]},"name":"parent"},{"type":{"names":["Array.<Object>"]},"name":"modules"}],"returns":[{"type":{"names":["Array.<Object>"]}}],"name":"findNotLoadedModules","longname":"Container#findNotLoadedModules","kind":"function","memberof":"Container","scope":"instance","$longname":"Container#findNotLoadedModules","$kind":"method","id":2263,"neoClassName":"Neo.form.Container"},{"comment":"/**\n     * Either pass a field name or id\n     * @param {String} name\n     * @returns {Promise<Neo.form.field.Base|null>} fields\n     */","meta":{"range":[2980,3365],"filename":"Container.mjs","lineno":95,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form","code":{"id":"astnode100068693","name":"Container#getField","type":"MethodDefinition","paramnames":["name"]},"vars":{"":null}},"description":"<p>Either pass a field name or id</p>\n","params":[{"type":{"names":["String"]},"name":"name"}],"returns":[{"type":{"names":["Promise.<(Neo.form.field.Base|null)>"]},"description":"fields"}],"name":"getField","longname":"Container#getField","kind":"function","memberof":"Container","scope":"instance","async":true,"$longname":"Container#getField","$kind":"method","id":2264,"neoClassName":"Neo.form.Container"},{"comment":"/**\n     * @param {Neo.form.field.Base} field\n     * @returns {String}\n     */","meta":{"range":[3454,3626],"filename":"Container.mjs","lineno":116,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form","code":{"id":"astnode100068740","name":"Container#getFieldPath","type":"MethodDefinition","paramnames":["field"]},"vars":{"":null}},"params":[{"type":{"names":["Neo.form.field.Base"]},"name":"field"}],"returns":[{"type":{"names":["String"]}}],"name":"getFieldPath","longname":"Container#getFieldPath","kind":"function","memberof":"Container","scope":"instance","$longname":"Container#getFieldPath","$kind":"method","id":2265,"neoClassName":"Neo.form.Container"},{"comment":"/**\n     * @returns {Promise<Neo.form.field.Base[]>} fields\n     */","meta":{"range":[3704,3955],"filename":"Container.mjs","lineno":127,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form","code":{"id":"astnode100068778","name":"Container#getFields","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"returns":[{"type":{"names":["Promise.<Array.<Neo.form.field.Base>>"]},"description":"fields"}],"name":"getFields","longname":"Container#getFields","kind":"function","memberof":"Container","scope":"instance","params":[],"async":true,"$longname":"Container#getFields","$kind":"method","id":2266,"neoClassName":"Neo.form.Container"},{"comment":"/**\n     * This function will return one of the following states:\n     * - clean      => all fields are clean (untouched)\n     * - invalid    => at least one field is invalid\n     * - valid      => all required fields are valid\n     * - inProgress => at least one field is valid, at least one field is clean\n     * @returns {Promise<String>}\n     */","meta":{"range":[4316,5740],"filename":"Container.mjs","lineno":148,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form","code":{"id":"astnode100068816","name":"Container#getFormState","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>This function will return one of the following states:</p>\n<ul>\n<li>clean      =&gt; all fields are clean (untouched)</li>\n<li>invalid    =&gt; at least one field is invalid</li>\n<li>valid      =&gt; all required fields are valid</li>\n<li>inProgress =&gt; at least one field is valid, at least one field is clean</li>\n</ul>\n","returns":[{"type":{"names":["Promise.<String>"]}}],"name":"getFormState","longname":"Container#getFormState","kind":"function","memberof":"Container","scope":"instance","params":[],"async":true,"$longname":"Container#getFormState","$kind":"method","id":2267,"neoClassName":"Neo.form.Container"},{"comment":"/**\n     * @returns {Promise<Object>}\n     */","meta":{"range":[5796,7662],"filename":"Container.mjs","lineno":201,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form","code":{"id":"astnode100068957","name":"Container#getSubmitValues","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"returns":[{"type":{"names":["Promise.<Object>"]}}],"name":"getSubmitValues","longname":"Container#getSubmitValues","kind":"function","memberof":"Container","scope":"instance","params":[],"async":true,"$longname":"Container#getSubmitValues","$kind":"method","id":2268,"neoClassName":"Neo.form.Container"},{"comment":"/**\n     * @deprecated in v7.x\n     * @returns {Promise<Object>}\n     */","meta":{"range":[7745,7808],"filename":"Container.mjs","lineno":261,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form","code":{"id":"astnode100069176","name":"Container#getValues","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"deprecated":"in v7.x","returns":[{"type":{"names":["Promise.<Object>"]}}],"name":"getValues","longname":"Container#getValues","kind":"function","memberof":"Container","scope":"instance","params":[],"async":true,"$longname":"Container#getValues","$kind":"method","id":2269,"neoClassName":"Neo.form.Container"},{"comment":"/**\n     * Returns true in case no form field isValid() call returns false\n     * @returns {Promise<Boolean>}\n     */","meta":{"range":[7936,8210],"filename":"Container.mjs","lineno":269,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form","code":{"id":"astnode100069185","name":"Container#isValid","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Returns true in case no form field isValid() call returns false</p>\n","returns":[{"type":{"names":["Promise.<Boolean>"]}}],"name":"isValid","longname":"Container#isValid","kind":"function","memberof":"Container","scope":"instance","params":[],"async":true,"$longname":"Container#isValid","$kind":"method","id":2270,"neoClassName":"Neo.form.Container"},{"comment":"/**\n     * Loads all not loaded items inside card layouts\n     * @returns {Promise<Neo.component.Base[]>}\n     */","meta":{"range":[8334,8661],"filename":"Container.mjs","lineno":287,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form","code":{"id":"astnode100069225","name":"Container#loadModules","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Loads all not loaded items inside card layouts</p>\n","returns":[{"type":{"names":["Promise.<Array.<Neo.component.Base>>"]}}],"name":"loadModules","longname":"Container#loadModules","kind":"function","memberof":"Container","scope":"instance","params":[],"async":true,"$longname":"Container#loadModules","$kind":"method","id":2271,"neoClassName":"Neo.form.Container"},{"comment":"/**\n     * Resets field values by field name or field id.\n     * Fields not included with a value will get reset to null.\n     * @param {Object} [values]\n     */","meta":{"range":[8833,9153],"filename":"Container.mjs","lineno":306,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form","code":{"id":"astnode100069277","name":"Container#reset","type":"MethodDefinition","paramnames":["values"]},"vars":{"":null}},"description":"<p>Resets field values by field name or field id.\nFields not included with a value will get reset to null.</p>\n","params":[{"type":{"names":["Object"]},"optional":true,"name":"values"}],"name":"reset","longname":"Container#reset","kind":"function","memberof":"Container","scope":"instance","async":true,"$longname":"Container#reset","$kind":"method","id":2272,"neoClassName":"Neo.form.Container"},{"comment":"/**\n     * Set field configs by field name or field id\n     * @param {Object} configs={}\n     * @param {Boolean} suspendEvents=false\n     */","meta":{"range":[9304,11267],"filename":"Container.mjs","lineno":324,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form","code":{"id":"astnode100069334","name":"Container#setConfigs","type":"MethodDefinition","paramnames":["configs","suspendEvents"]},"vars":{"":null}},"description":"<p>Set field configs by field name or field id</p>\n","params":[{"type":{"names":["Object"]},"defaultvalue":"{}","name":"configs"},{"type":{"names":["Boolean"]},"defaultvalue":false,"name":"suspendEvents"}],"name":"setConfigs","longname":"Container#setConfigs","kind":"function","memberof":"Container","scope":"instance","async":true,"$longname":"Container#setConfigs","$kind":"method","id":2273,"neoClassName":"Neo.form.Container"},{"comment":"/**\n     * Set field values by field name or field id\n     * @param {Object} values={}\n     * @param {Boolean} suspendEvents=false\n     */","meta":{"range":[11416,11986],"filename":"Container.mjs","lineno":380,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form","code":{"id":"astnode100069529","name":"Container#setValues","type":"MethodDefinition","paramnames":["values","suspendEvents"]},"vars":{"":null}},"description":"<p>Set field values by field name or field id</p>\n","params":[{"type":{"names":["Object"]},"defaultvalue":"{}","name":"values"},{"type":{"names":["Boolean"]},"defaultvalue":false,"name":"suspendEvents"}],"name":"setValues","longname":"Container#setValues","kind":"function","memberof":"Container","scope":"instance","async":true,"$longname":"Container#setValues","$kind":"method","id":2274,"neoClassName":"Neo.form.Container"},{"comment":"/**\n     * Updates the invalid state for all fields which have validate() implemented.\n     * This can be useful for create-entity forms which show up \"clean\" until pressing a submit button.\n     * @returns {Promise<Boolean>}\n     */","meta":{"range":[12230,12551],"filename":"Container.mjs","lineno":404,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/form","code":{"id":"astnode100069601","name":"Container#validate","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Updates the invalid state for all fields which have validate() implemented.\nThis can be useful for create-entity forms which show up &quot;clean&quot; until pressing a submit button.</p>\n","returns":[{"type":{"names":["Promise.<Boolean>"]}}],"name":"validate","longname":"Container#validate","kind":"function","memberof":"Container","scope":"instance","params":[],"async":true,"$longname":"Container#validate","$kind":"method","id":2275,"neoClassName":"Neo.form.Container"}]}