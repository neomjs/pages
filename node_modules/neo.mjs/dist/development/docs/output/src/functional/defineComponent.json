{"classData":[{"comment":"/**\n * Factory function to create a functional component class from a specification object.\n * This enables a \"Beginner Mode\" for creating components without writing a class,\n * while still providing access to the full class-based feature set.\n *\n * It's important to understand the two ways of managing state:\n *\n * 1.  **Named Configs (Public API):** Defined in the `config` object (e.g., `text_`).\n *     - **Purpose:** Defines the component's public API for external control, similar to props.\n *     - **Use Case:** For data that a parent component will set or change.\n *     - **Features:** Integrates with the full config system (e.g., `afterSetText()` hooks).\n *\n * 2.  **`useConfig()` (Internal State):** Used inside `createVdom` or other methods.\n *     - **Purpose:** Manages private, encapsulated state that is internal to the component.\n *     - **Use Case:** For state that the component manages itself and is not controlled by the parent.\n *     - **Features:** Provides a simple, concise way to handle local reactive state.\n *\n * @param {Object} spec - The specification object for the component.\n * @returns {Neo.functional.component.Base} The generated component class.\n *\n * @example\n * import { defineComponent } from 'neo/functional/defineComponent.mjs';\n * import { useConfig }       from 'neo/functional/useConfig.mjs';\n *\n * const MyComponent = defineComponent({\n *     // 1. Define the Public API via the `config` object.\n *     config: {\n *         className: 'MyApp.MyFunctionalComponent',\n *         ntype    : 'my-functional-component',\n *\n *         // `text_` is a NAMED CONFIG. It's part of the component's public API.\n *         // A parent can create this component with a `text` config.\n *         // It is reactive and will generate `afterSetText()` and `beforeSetText()` hooks.\n *         text_: 'Hello World'\n *     },\n *\n *     // 2. Define the component's logic and VDOM.\n *     createVdom(config) {\n *         // `useConfig` creates ANONYMOUS, INTERNAL STATE.\n *         // The `count` state is private to this component and cannot be set by a parent.\n *         const [count, setCount] = useConfig(0);\n *\n *         return {\n *             tag: 'div',\n *             cn: [{\n *                 tag: 'h1',\n *                 // Access the public, named config via the `config` parameter.\n *                 text: config.text\n *             }, {\n *                 tag: 'p',\n *                 // Access the private, internal state directly.\n *                 text: `You clicked ${count} times`\n *             }, {\n *                 tag: 'button',\n *                 text: 'Click me',\n *                 // The setter from `useConfig` updates the internal state.\n *                 onclick: () => setCount(count + 1)\n *             }]\n *         };\n *     },\n *\n *     // 3. Lifecycle hooks for named configs work automatically.\n *     afterSetText(newValue, oldValue) {\n *         console.log(`Text changed from '${oldValue}' to '${newValue}'`);\n *     }\n * });\n *\n * // The returned MyComponent is a class constructor that can be used with Neo.create()\n * // const instance = Neo.create(MyComponent, {\n * //     text: 'Welcome to Neo.mjs!' // Set the public config on creation.\n * // });\n */","meta":{"range":[3287,4099],"filename":"defineComponent.mjs","lineno":75,"columnno":0,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/functional","code":{"id":"astnode100093577","name":"exports.defineComponent","type":"FunctionDeclaration","paramnames":["spec"]}},"description":"<p>Factory function to create a functional component class from a specification object.\nThis enables a &quot;Beginner Mode&quot; for creating components without writing a class,\nwhile still providing access to the full class-based feature set.</p>\n<p>It&#39;s important to understand the two ways of managing state:</p>\n<ol>\n<li><p><strong>Named Configs (Public API):</strong> Defined in the <code>config</code> object (e.g., <code>text_</code>).</p>\n<ul>\n<li><strong>Purpose:</strong> Defines the component&#39;s public API for external control, similar to props.</li>\n<li><strong>Use Case:</strong> For data that a parent component will set or change.</li>\n<li><strong>Features:</strong> Integrates with the full config system (e.g., <code>afterSetText()</code> hooks).</li>\n</ul>\n</li>\n<li><p><strong><code>useConfig()</code> (Internal State):</strong> Used inside <code>createVdom</code> or other methods.</p>\n<ul>\n<li><strong>Purpose:</strong> Manages private, encapsulated state that is internal to the component.</li>\n<li><strong>Use Case:</strong> For state that the component manages itself and is not controlled by the parent.</li>\n<li><strong>Features:</strong> Provides a simple, concise way to handle local reactive state.</li>\n</ul>\n</li>\n</ol>\n","params":[{"type":{"names":["Object"]},"description":"<p>The specification object for the component.</p>\n","name":"spec"}],"returns":[{"type":{"names":["Neo.functional.component.Base"]},"description":"The generated component class."}],"examples":["import { defineComponent } from 'neo/functional/defineComponent.mjs';\nimport { useConfig }       from 'neo/functional/useConfig.mjs';\n\nconst MyComponent = defineComponent({\n    // 1. Define the Public API via the `config` object.\n    config: {\n        className: 'MyApp.MyFunctionalComponent',\n        ntype    : 'my-functional-component',\n\n        // `text_` is a NAMED CONFIG. It's part of the component's public API.\n        // A parent can create this component with a `text` config.\n        // It is reactive and will generate `afterSetText()` and `beforeSetText()` hooks.\n        text_: 'Hello World'\n    },\n\n    // 2. Define the component's logic and VDOM.\n    createVdom(config) {\n        // `useConfig` creates ANONYMOUS, INTERNAL STATE.\n        // The `count` state is private to this component and cannot be set by a parent.\n        const [count, setCount] = useConfig(0);\n\n        return {\n            tag: 'div',\n            cn: [{\n                tag: 'h1',\n                // Access the public, named config via the `config` parameter.\n                text: config.text\n            }, {\n                tag: 'p',\n                // Access the private, internal state directly.\n                text: `You clicked ${count} times`\n            }, {\n                tag: 'button',\n                text: 'Click me',\n                // The setter from `useConfig` updates the internal state.\n                onclick: () => setCount(count + 1)\n            }]\n        };\n    },\n\n    // 3. Lifecycle hooks for named configs work automatically.\n    afterSetText(newValue, oldValue) {\n        console.log(`Text changed from '${oldValue}' to '${newValue}'`);\n    }\n});\n\n// The returned MyComponent is a class constructor that can be used with Neo.create()\n// const instance = Neo.create(MyComponent, {\n//     text: 'Welcome to Neo.mjs!' // Set the public config on creation.\n// });"],"name":"defineComponent","longname":"defineComponent","kind":"function","scope":"global","$longname":"defineComponent","$kind":"method","id":3267,"neoClassName":"Neo.functional.defineComponent"}]}