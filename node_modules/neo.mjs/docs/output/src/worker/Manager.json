{"classData":[{"comment":"/**\n * The worker manager lives inside the main thread and creates the App, Data & VDom worker.\n * Also, responsible for sending messages from the main thread to the different workers.\n * @class Neo.worker.Manager\n * @extends Neo.core.Base\n * @singleton\n */","meta":{"filename":"Manager.mjs","lineno":16,"columnno":0,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/worker","code":{}},"description":"<p>The worker manager lives inside the main thread and creates the App, Data &amp; VDom worker.\nAlso, responsible for sending messages from the main thread to the different workers.</p>\n","kind":"class","name":"Manager","augments":["Neo.core.Base"],"tags":[{"originalTitle":"singleton","title":"singleton","text":""}],"memberof":"Neo.worker","longname":"Neo.worker.Manager","scope":"static","$longname":"Neo.worker.Manager","$kind":"class","id":5472,"neoClassName":"Neo.worker.Manager"},{"comment":"/**\n         * @member {String} className='Neo.worker.Manager'\n         * @protected\n         */","meta":{"filename":"Manager.mjs","lineno":29,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/worker","code":{}},"kind":"member","name":"className","type":{"names":["String"]},"defaultvalue":"'Neo.worker.Manager'","access":"protected","longname":"className","scope":"global","$longname":"className","$kind":"property","id":5473,"neoClassName":"Neo.worker.Manager"},{"comment":"/**\n         * @member {Number} activeWorkers=0\n         * @protected\n         */","meta":{"filename":"Manager.mjs","lineno":34,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/worker","code":{}},"kind":"member","name":"activeWorkers","type":{"names":["Number"]},"defaultvalue":0,"access":"protected","longname":"activeWorkers","scope":"global","$longname":"activeWorkers","$kind":"property","id":5474,"neoClassName":"Neo.worker.Manager"},{"comment":"/**\n         * @member {String[]} appNames=[]\n         * @protected\n         */","meta":{"filename":"Manager.mjs","lineno":39,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/worker","code":{}},"kind":"member","name":"appNames","type":{"names":["Array.<String>"]},"defaultvalue":"[]","access":"protected","longname":"appNames","scope":"global","$longname":"appNames","$kind":"property","id":5475,"neoClassName":"Neo.worker.Manager"},{"comment":"/**\n         * @member {Number} constructedThreads=0\n         * @protected\n         */","meta":{"filename":"Manager.mjs","lineno":44,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/worker","code":{}},"kind":"member","name":"constructedThreads","type":{"names":["Number"]},"defaultvalue":0,"access":"protected","longname":"constructedThreads","scope":"global","$longname":"constructedThreads","$kind":"property","id":5476,"neoClassName":"Neo.worker.Manager"},{"comment":"/**\n         * @member {String[]|Neo.core.Base[]|null} mixins=[Observable, RemoteMethodAccess]\n         */","meta":{"filename":"Manager.mjs","lineno":48,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/worker","code":{}},"kind":"member","name":"mixins","type":{"names":["Array.<String>","Array.<Neo.core.Base>","null"]},"defaultvalue":"[Observable, RemoteMethodAccess]","description":"<p>RemoteMethodAccess]</p>\n","longname":"mixins","scope":"global","$longname":"mixins","$kind":"property","id":5477,"neoClassName":"Neo.worker.Manager"},{"comment":"/**\n         * Remote method access for other workers\n         * @member {Object} remote\n         * @protected\n         */","meta":{"filename":"Manager.mjs","lineno":54,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/worker","code":{}},"description":"<p>Remote method access for other workers</p>\n","kind":"member","name":"remote","type":{"names":["Object"]},"access":"protected","longname":"remote","scope":"global","$longname":"remote","$kind":"property","id":5478,"neoClassName":"Neo.worker.Manager"},{"comment":"/**\n         * True in case the current browser supports window.SharedWorker.\n         * @member {Boolean} sharedWorkersEnabled=false\n         * @protected\n         */","meta":{"filename":"Manager.mjs","lineno":66,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/worker","code":{}},"description":"<p>True in case the current browser supports window.SharedWorker.</p>\n","kind":"member","name":"sharedWorkersEnabled","type":{"names":["Boolean"]},"defaultvalue":false,"access":"protected","longname":"sharedWorkersEnabled","scope":"global","$longname":"sharedWorkersEnabled","$kind":"property","id":5479,"neoClassName":"Neo.worker.Manager"},{"comment":"/**\n         * @member {Boolean} singleton=true\n         * @protected\n         */","meta":{"filename":"Manager.mjs","lineno":71,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/worker","code":{}},"kind":"member","name":"singleton","type":{"names":["Boolean"]},"defaultvalue":true,"access":"protected","longname":"singleton","scope":"global","$longname":"singleton","$kind":"property","id":5480,"neoClassName":"Neo.worker.Manager"},{"comment":"/**\n         * Internal flag to stop the worker communication in case their creation fails\n         * @member {Boolean} stopCommunication=false\n         * @protected\n         */","meta":{"filename":"Manager.mjs","lineno":77,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/worker","code":{}},"description":"<p>Internal flag to stop the worker communication in case their creation fails</p>\n","kind":"member","name":"stopCommunication","type":{"names":["Boolean"]},"defaultvalue":false,"access":"protected","longname":"stopCommunication","scope":"global","$longname":"stopCommunication","$kind":"property","id":5481,"neoClassName":"Neo.worker.Manager"},{"comment":"/**\n         * True in case the current browser supports window.Worker.\n         * The neo.mjs framework is not able to run without web workers.\n         * @member {Boolean} sharedWorkersEnabled=false\n         * @protected\n         */","meta":{"filename":"Manager.mjs","lineno":84,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/worker","code":{}},"description":"<p>True in case the current browser supports window.Worker.\nThe neo.mjs framework is not able to run without web workers.</p>\n","kind":"member","name":"sharedWorkersEnabled","type":{"names":["Boolean"]},"defaultvalue":false,"access":"protected","longname":"sharedWorkersEnabled","scope":"global","$longname":"sharedWorkersEnabled","$kind":"property","id":5482,"neoClassName":"Neo.worker.Manager"},{"comment":"/**\n         * Using the current timestamp as a unique window identifier\n         * @member {Number} windowId=new Date().getTime()\n         * @protected\n         */","meta":{"filename":"Manager.mjs","lineno":90,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/worker","code":{}},"description":"<p>Using the current timestamp as a unique window identifier</p>\n","kind":"member","name":"windowId","type":{"names":["Number"]},"defaultvalue":"new","access":"protected","longname":"windowId","scope":"global","$longname":"windowId","$kind":"property","id":5483,"neoClassName":"Neo.worker.Manager"},{"comment":"/**\n         * Contains the fileNames for the App, Data & Vdom workers\n         * @member {Object} workers\n         * @protected\n         */","meta":{"filename":"Manager.mjs","lineno":96,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/worker","code":{}},"description":"<p>Contains the fileNames for the App, Data &amp; Vdom workers</p>\n","kind":"member","name":"workers","type":{"names":["Object"]},"access":"protected","longname":"workers","scope":"global","$longname":"workers","$kind":"property","id":5484,"neoClassName":"Neo.worker.Manager"},{"comment":"/**\n     * navigator.serviceWorker.controller can be null in case we load a page for the first time\n     * or in case of a force refresh.\n     * See: https://www.w3.org/TR/service-workers/#navigator-service-worker-controller\n     * Only in this case main.addon.ServiceWorker will store the active registration once ready here.\n     * @member {ServiceWorker|null} serviceWorker=null\n     */","meta":{"filename":"Manager.mjs","lineno":122,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/worker","code":{}},"description":"<p>navigator.serviceWorker.controller can be null in case we load a page for the first time\nor in case of a force refresh.\nSee: <a href=\"https://www.w3.org/TR/service-workers/#navigator-service-worker-controller\">https://www.w3.org/TR/service-workers/#navigator-service-worker-controller</a>\nOnly in this case main.addon.ServiceWorker will store the active registration once ready here.</p>\n","kind":"member","name":"serviceWorker","type":{"names":["ServiceWorker","null"]},"defaultvalue":null,"longname":"serviceWorker","scope":"global","$longname":"serviceWorker","$kind":"property","id":5485,"neoClassName":"Neo.worker.Manager"},{"comment":"/**\n     * @param {Object} config\n     */","meta":{"range":[4200,4990],"filename":"Manager.mjs","lineno":127,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/worker","code":{"id":"astnode100173334","name":"Manager#construct","type":"MethodDefinition","paramnames":["config"]},"vars":{"":null}},"params":[{"type":{"names":["Object"]},"name":"config"}],"name":"construct","longname":"Manager#construct","kind":"function","memberof":"Manager","scope":"instance","$longname":"Manager#construct","$kind":"method","id":5486,"neoClassName":"Neo.worker.Manager"},{"comment":"/**\n     * Sends a message to each worker defined inside the this.workers config.\n     * Only sends to workers that are currently active and available.\n     * @param {Object} msg             The message payload to broadcast.\n     * @param {Object} [excludeOrigin] Optionally pass the origin realm name to exclude from the broadcast.\n     */","meta":{"range":[5341,5583],"filename":"Manager.mjs","lineno":156,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/worker","code":{"id":"astnode100173434","name":"Manager#broadcast","type":"MethodDefinition","paramnames":["msg","excludeOrigin"]},"vars":{"":null}},"description":"<p>Sends a message to each worker defined inside the this.workers config.\nOnly sends to workers that are currently active and available.</p>\n","params":[{"type":{"names":["Object"]},"description":"<p>The message payload to broadcast.</p>\n","name":"msg"},{"type":{"names":["Object"]},"optional":true,"description":"<p>Optionally pass the origin realm name to exclude from the broadcast.</p>\n","name":"excludeOrigin"}],"name":"broadcast","longname":"Manager#broadcast","kind":"function","memberof":"Manager","scope":"instance","$longname":"Manager#broadcast","$kind":"method","id":5487,"neoClassName":"Neo.worker.Manager"},{"comment":"/**\n     * Creates a web worker using the passed options as well as adding error & message event listeners.\n     * @param {Object} opts\n     * @returns {SharedWorker|Worker}\n     */","meta":{"range":[5775,6550],"filename":"Manager.mjs","lineno":171,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/worker","code":{"id":"astnode100173476","name":"Manager#createWorker","type":"MethodDefinition","paramnames":["opts"]},"vars":{"":null}},"description":"<p>Creates a web worker using the passed options as well as adding error &amp; message event listeners.</p>\n","params":[{"type":{"names":["Object"]},"name":"opts"}],"returns":[{"type":{"names":["SharedWorker","Worker"]}}],"name":"createWorker","longname":"Manager#createWorker","kind":"function","memberof":"Manager","scope":"instance","$longname":"Manager#createWorker","$kind":"method","id":5488,"neoClassName":"Neo.worker.Manager"},{"comment":"/**\n     * Calls createWorker for each worker inside the this.workers config.\n     */","meta":{"range":[6646,7970],"filename":"Manager.mjs","lineno":193,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/worker","code":{"id":"astnode100173595","name":"Manager#createWorkers","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Calls createWorker for each worker inside the this.workers config.</p>\n","name":"createWorkers","longname":"Manager#createWorkers","kind":"function","memberof":"Manager","scope":"instance","params":[],"$longname":"Manager#createWorkers","$kind":"method","id":5489,"neoClassName":"Neo.worker.Manager"},{"comment":"/**\n     *\n     */","meta":{"range":[7999,8601],"filename":"Manager.mjs","lineno":240,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/worker","code":{"id":"astnode100173753","name":"Manager#detectFeatures","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"name":"detectFeatures","longname":"Manager#detectFeatures","kind":"function","memberof":"Manager","scope":"instance","params":[],"$longname":"Manager#detectFeatures","$kind":"method","id":5490,"neoClassName":"Neo.worker.Manager"},{"comment":"/**\n     * @param {String|Worker} name\n     * @returns {Worker}\n     */","meta":{"range":[8683,8901],"filename":"Manager.mjs","lineno":264,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/worker","code":{"id":"astnode100173827","name":"Manager#getWorker","type":"MethodDefinition","paramnames":["name"]},"vars":{"":null}},"params":[{"type":{"names":["String","Worker"]},"name":"name"}],"returns":[{"type":{"names":["Worker"]}}],"name":"getWorker","longname":"Manager#getWorker","kind":"function","memberof":"Manager","scope":"instance","$longname":"Manager#getWorker","$kind":"method","id":5491,"neoClassName":"Neo.worker.Manager"},{"comment":"/**\n     *\n     */","meta":{"range":[8930,9017],"filename":"Manager.mjs","lineno":275,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/worker","code":{"id":"astnode100173856","name":"Manager#loadApplication","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"name":"loadApplication","longname":"Manager#loadApplication","kind":"function","memberof":"Manager","scope":"instance","params":[],"$longname":"Manager#loadApplication","$kind":"method","id":5492,"neoClassName":"Neo.worker.Manager"},{"comment":"/**\n     * @param {Object} data\n     */","meta":{"range":[9067,9442],"filename":"Manager.mjs","lineno":282,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/worker","code":{"id":"astnode100173869","name":"Manager#onWorkerConstructed","type":"MethodDefinition","paramnames":["data"]},"vars":{"":null}},"params":[{"type":{"names":["Object"]},"name":"data"}],"name":"onWorkerConstructed","longname":"Manager#onWorkerConstructed","kind":"function","memberof":"Manager","scope":"instance","$longname":"Manager#onWorkerConstructed","$kind":"method","id":5493,"neoClassName":"Neo.worker.Manager"},{"comment":"/**\n     * Handler method for worker error events\n     * @param {Object} e\n     */","meta":{"range":[9535,9699],"filename":"Manager.mjs","lineno":299,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/worker","code":{"id":"astnode100173914","name":"Manager#onWorkerError","type":"MethodDefinition","paramnames":["e"]},"vars":{"":null}},"description":"<p>Handler method for worker error events</p>\n","params":[{"type":{"names":["Object"]},"name":"e"}],"name":"onWorkerError","longname":"Manager#onWorkerError","kind":"function","memberof":"Manager","scope":"instance","$longname":"Manager#onWorkerError","$kind":"method","id":5494,"neoClassName":"Neo.worker.Manager"},{"comment":"/**\n     * Handler method for worker message events\n     * @param {Object} event\n     */","meta":{"range":[9798,11894],"filename":"Manager.mjs","lineno":308,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/worker","code":{"id":"astnode100173929","name":"Manager#onWorkerMessage","type":"MethodDefinition","paramnames":["event"]},"vars":{"":null}},"description":"<p>Handler method for worker message events</p>\n","params":[{"type":{"names":["Object"]},"name":"event"}],"name":"onWorkerMessage","longname":"Manager#onWorkerMessage","kind":"function","memberof":"Manager","scope":"instance","$longname":"Manager#onWorkerMessage","$kind":"method","id":5495,"neoClassName":"Neo.worker.Manager"},{"comment":"/**\n     * @param {Object} data\n     * @param {String} data.replyId\n     * @returns {Promise<any>}\n     */","meta":{"range":[12011,12173],"filename":"Manager.mjs","lineno":380,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/worker","code":{"id":"astnode100174188","name":"Manager#promiseForwardMessage","type":"MethodDefinition","paramnames":["data"]},"vars":{"":null}},"params":[{"type":{"names":["Object"]},"name":"data"},{"type":{"names":["String"]},"name":"data.replyId"}],"returns":[{"type":{"names":["Promise.<any>"]}}],"name":"promiseForwardMessage","longname":"Manager#promiseForwardMessage","kind":"function","memberof":"Manager","scope":"instance","$longname":"Manager#promiseForwardMessage","$kind":"method","id":5496,"neoClassName":"Neo.worker.Manager"},{"comment":"/**\n     * @param {String} dest app, canvas, data or vdom\n     * @param {Object} opts configs for Neo.worker.Message\n     * @param {Array} [transfer] An optional array of Transferable objects to transfer ownership of.\n     * If the ownership of an object is transferred, it becomes unusable (neutered) in the context it was sent from\n     * and becomes available only to the worker it was sent to.\n     * @returns {Promise<any>}\n     */","meta":{"range":[12620,13118],"filename":"Manager.mjs","lineno":394,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/worker","code":{"id":"astnode100174216","name":"Manager#promiseMessage","type":"MethodDefinition","paramnames":["dest","opts","transfer"]},"vars":{"":null}},"params":[{"type":{"names":["String"]},"description":"<p>app, canvas, data or vdom</p>\n","name":"dest"},{"type":{"names":["Object"]},"description":"<p>configs for Neo.worker.Message</p>\n","name":"opts"},{"type":{"names":["Array"]},"optional":true,"description":"<p>An optional array of Transferable objects to transfer ownership of.\nIf the ownership of an object is transferred, it becomes unusable (neutered) in the context it was sent from\nand becomes available only to the worker it was sent to.</p>\n","name":"transfer"}],"returns":[{"type":{"names":["Promise.<any>"]}}],"name":"promiseMessage","longname":"Manager#promiseMessage","kind":"function","memberof":"Manager","scope":"instance","$longname":"Manager#promiseMessage","$kind":"method","id":5497,"neoClassName":"Neo.worker.Manager"},{"comment":"/**\n     * @param {String} replyId\n     */","meta":{"range":[13171,13460],"filename":"Manager.mjs","lineno":415,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/worker","code":{"id":"astnode100174283","name":"Manager#resolveDomOperationPromise","type":"MethodDefinition","paramnames":["replyId"]},"vars":{"":null}},"params":[{"type":{"names":["String"]},"name":"replyId"}],"name":"resolveDomOperationPromise","longname":"Manager#resolveDomOperationPromise","kind":"function","memberof":"Manager","scope":"instance","$longname":"Manager#resolveDomOperationPromise","$kind":"method","id":5498,"neoClassName":"Neo.worker.Manager"},{"comment":"/**\n     * @param {String} dest app, canvas, data or vdom\n     * @param {Object} opts configs for Neo.worker.Message\n     * @param {Array} [transfer] An optional array of Transferable objects to transfer ownership of.\n     * If the ownership of an object is transferred, it becomes unusable (neutered) in the context it was sent from\n     * and becomes available only to the worker it was sent to.\n     * @returns {Neo.worker.Message|null}\n     * @protected\n     */","meta":{"range":[13936,14541],"filename":"Manager.mjs","lineno":436,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/worker","code":{"id":"astnode100174318","name":"Manager#sendMessage","type":"MethodDefinition","paramnames":["dest","opts","transfer"]},"vars":{"":null}},"params":[{"type":{"names":["String"]},"description":"<p>app, canvas, data or vdom</p>\n","name":"dest"},{"type":{"names":["Object"]},"description":"<p>configs for Neo.worker.Message</p>\n","name":"opts"},{"type":{"names":["Array"]},"optional":true,"description":"<p>An optional array of Transferable objects to transfer ownership of.\nIf the ownership of an object is transferred, it becomes unusable (neutered) in the context it was sent from\nand becomes available only to the worker it was sent to.</p>\n","name":"transfer"}],"returns":[{"type":{"names":["Neo.worker.Message","null"]}}],"access":"protected","name":"sendMessage","longname":"Manager#sendMessage","kind":"function","memberof":"Manager","scope":"instance","$longname":"Manager#sendMessage","$kind":"method","id":5499,"neoClassName":"Neo.worker.Manager"},{"comment":"/**\n     * Initiates a global Neo.config change from the Main Thread.\n     *\n     * This method acts as a proxy, routing the config change request to the App Worker.\n     * This design centralizes the complex multi-threaded and multi-window synchronization\n     * logic within the App Worker's `setGlobalConfig` method.\n     *\n     * Developers should typically use `Neo.setGlobalConfig(config)` directly,\n     * which will correctly resolve to this proxy when called from the Main Thread.\n     *\n     * @param {Object} config The partial or full Neo.config object with changes to apply.\n     */","meta":{"range":[15147,15457],"filename":"Manager.mjs","lineno":473,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/worker","code":{"id":"astnode100174397","name":"Manager#setGlobalConfig","type":"MethodDefinition","paramnames":["config"]},"vars":{"":null}},"description":"<p>Initiates a global Neo.config change from the Main Thread.</p>\n<p>This method acts as a proxy, routing the config change request to the App Worker.\nThis design centralizes the complex multi-threaded and multi-window synchronization\nlogic within the App Worker&#39;s <code>setGlobalConfig</code> method.</p>\n<p>Developers should typically use <code>Neo.setGlobalConfig(config)</code> directly,\nwhich will correctly resolve to this proxy when called from the Main Thread.</p>\n","params":[{"type":{"names":["Object"]},"description":"<p>The partial or full Neo.config object with changes to apply.</p>\n","name":"config"}],"name":"setGlobalConfig","longname":"Manager#setGlobalConfig","kind":"function","memberof":"Manager","scope":"instance","$longname":"Manager#setGlobalConfig","$kind":"method","id":5500,"neoClassName":"Neo.worker.Manager"},{"comment":"/**\n     * Change Neo.config globally from a worker\n     * @param {Object}  data\n     * @param {Boolean} data.broadcast\n     * @param {Object}  data.config\n     * @param {String}  [data.excludeOrigin]\n     */","meta":{"range":[15676,15924],"filename":"Manager.mjs","lineno":487,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/worker","code":{"id":"astnode100174412","name":"Manager#setNeoConfig","type":"MethodDefinition","paramnames":[""]},"vars":{"":null}},"description":"<p>Change Neo.config globally from a worker</p>\n","params":[{"type":{"names":["Object"]},"name":"data"},{"type":{"names":["Boolean"]},"name":"data.broadcast"},{"type":{"names":["Object"]},"name":"data.config"},{"type":{"names":["String"]},"optional":true,"name":"data.excludeOrigin"}],"name":"setNeoConfig","longname":"Manager#setNeoConfig","kind":"function","memberof":"Manager","scope":"instance","$longname":"Manager#setNeoConfig","$kind":"method","id":5501,"neoClassName":"Neo.worker.Manager"}]}