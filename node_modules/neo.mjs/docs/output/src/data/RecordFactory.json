{"classData":[{"comment":"/**\n * @class Neo.data.RecordFactory\n * @extends Neo.core.Base\n * @singleton\n */","meta":{"filename":"RecordFactory.mjs","lineno":9,"columnno":0,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/data","code":{}},"kind":"class","name":"RecordFactory","augments":["Neo.core.Base"],"tags":[{"originalTitle":"singleton","title":"singleton","text":""}],"memberof":"Neo.data","longname":"Neo.data.RecordFactory","scope":"static","$longname":"Neo.data.RecordFactory","$kind":"class","id":1875,"neoClassName":"Neo.data.RecordFactory"},{"comment":"/**\n         * @member {String} className='Neo.data.RecordFactory'\n         * @protected\n         */","meta":{"filename":"RecordFactory.mjs","lineno":20,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/data","code":{}},"kind":"member","name":"className","type":{"names":["String"]},"defaultvalue":"'Neo.data.RecordFactory'","access":"protected","longname":"className","scope":"global","$longname":"className","$kind":"property","id":1876,"neoClassName":"Neo.data.RecordFactory"},{"comment":"/**\n         * The internal record prefix for original field values.\n         * Only used in case the model has trackModifiedFields set to true.\n         * @member {String} ovPrefix='ov_'\n         */","meta":{"filename":"RecordFactory.mjs","lineno":26,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/data","code":{}},"description":"<p>The internal record prefix for original field values.\nOnly used in case the model has trackModifiedFields set to true.</p>\n","kind":"member","name":"ovPrefix","type":{"names":["String"]},"defaultvalue":"'ov_'","longname":"ovPrefix","scope":"global","$longname":"ovPrefix","$kind":"property","id":1877,"neoClassName":"Neo.data.RecordFactory"},{"comment":"/**\n         * @member {String} recordNamespace='Neo.data.record'\n         */","meta":{"filename":"RecordFactory.mjs","lineno":30,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/data","code":{}},"kind":"member","name":"recordNamespace","type":{"names":["String"]},"defaultvalue":"'Neo.data.record'","longname":"recordNamespace","scope":"global","$longname":"recordNamespace","$kind":"property","id":1878,"neoClassName":"Neo.data.RecordFactory"},{"comment":"/**\n         * @member {Boolean} singleton=true\n         * @protected\n         */","meta":{"filename":"RecordFactory.mjs","lineno":35,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/data","code":{}},"kind":"member","name":"singleton","type":{"names":["Boolean"]},"defaultvalue":true,"access":"protected","longname":"singleton","scope":"global","$longname":"singleton","$kind":"property","id":1879,"neoClassName":"Neo.data.RecordFactory"},{"comment":"/**\n     * @param {Object} data\n     * @param {Object} data.field\n     * @param {Neo.data.RecordFactory} data.me\n     * @param {Neo.data.Model} data.model\n     * @param {String} data.path=''\n     */","meta":{"range":[1153,3059],"filename":"RecordFactory.mjs","lineno":45,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/data","code":{"id":"astnode100059152","name":"RecordFactory#createField","type":"MethodDefinition","paramnames":[""]},"vars":{"":null}},"params":[{"type":{"names":["Object"]},"name":"data"},{"type":{"names":["Object"]},"name":"data.field"},{"type":{"names":["Neo.data.RecordFactory"]},"name":"data.me"},{"type":{"names":["Neo.data.Model"]},"name":"data.model"},{"type":{"names":["String"]},"defaultvalue":"''","name":"data.path"}],"name":"createField","longname":"RecordFactory#createField","kind":"function","memberof":"RecordFactory","scope":"instance","$longname":"RecordFactory#createField","$kind":"method","id":1880,"neoClassName":"Neo.data.RecordFactory"},{"comment":"/**\n     * @param {Neo.data.Model} model\n     * @param {Object} config\n     * @returns {Object}\n     */","meta":{"range":[3173,3435],"filename":"RecordFactory.mjs","lineno":104,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/data","code":{"id":"astnode100059359","name":"RecordFactory#createRecord","type":"MethodDefinition","paramnames":["model","config"]},"vars":{"":null}},"params":[{"type":{"names":["Neo.data.Model"]},"name":"model"},{"type":{"names":["Object"]},"name":"config"}],"returns":[{"type":{"names":["Object"]}}],"name":"createRecord","longname":"RecordFactory#createRecord","kind":"function","memberof":"RecordFactory","scope":"instance","$longname":"RecordFactory#createRecord","$kind":"method","id":1881,"neoClassName":"Neo.data.RecordFactory"},{"comment":"/**\n     * @param {Neo.data.Model} model\n     * @param {Boolean} overwrite=false\n     * @returns {Object}\n     */","meta":{"range":[3559,5742],"filename":"RecordFactory.mjs","lineno":119,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/data","code":{"id":"astnode100059402","name":"RecordFactory#createRecordClass","type":"MethodDefinition","paramnames":["model","overwrite"]},"vars":{"":null}},"params":[{"type":{"names":["Neo.data.Model"]},"name":"model"},{"type":{"names":["Boolean"]},"defaultvalue":false,"name":"overwrite"}],"returns":[{"type":{"names":["Object"]}}],"name":"createRecordClass","longname":"RecordFactory#createRecordClass","kind":"function","memberof":"RecordFactory","scope":"instance","$longname":"RecordFactory#createRecordClass","$kind":"method","id":1882,"neoClassName":"Neo.data.RecordFactory"},{"comment":"","meta":{"range":[4226,4366],"filename":"RecordFactory.mjs","lineno":135,"columnno":20,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/data","code":{"id":"astnode100059489","name":"ns[undefined]","type":"MethodDefinition","paramnames":["config"]},"vars":{"":null}},"undocumented":true,"name":"ns[undefined]","longname":"<anonymous>~ns~ns[undefined]","kind":"class","memberof":"<anonymous>~ns","scope":"inner","params":[],"$longname":"ns~ns[undefined]","$kind":"constructor","id":1883,"neoClassName":"Neo.data.RecordFactory"},{"comment":"/**\n                     * Bulk-update multiple record fields at once\n                     * @param {Object} fields\n                     */","meta":{"range":[4548,4653],"filename":"RecordFactory.mjs","lineno":144,"columnno":20,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/data","code":{"id":"astnode100059506","name":"ns[undefined]#set","type":"MethodDefinition","paramnames":["fields"]},"vars":{"":null}},"description":"<p>Bulk-update multiple record fields at once</p>\n","params":[{"type":{"names":["Object"]},"name":"fields"}],"name":"undefined]#set","longname":"<anonymous>~ns.undefined]#set","kind":"function","memberof":"<anonymous>~ns","scope":"static","$longname":"ns.undefined]#set","$kind":"method","id":1884,"neoClassName":"Neo.data.RecordFactory"},{"comment":"/**\n                     * Bulk-update multiple record fields at once without triggering a change event\n                     * @param {Object} fields\n                     */","meta":{"range":[4869,4986],"filename":"RecordFactory.mjs","lineno":152,"columnno":20,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/data","code":{"id":"astnode100059519","name":"ns[undefined]#setSilent","type":"MethodDefinition","paramnames":["fields"]},"vars":{"":null}},"description":"<p>Bulk-update multiple record fields at once without triggering a change event</p>\n","params":[{"type":{"names":["Object"]},"name":"fields"}],"name":"undefined]#setSilent","longname":"<anonymous>~ns.undefined]#setSilent","kind":"function","memberof":"<anonymous>~ns","scope":"static","$longname":"ns.undefined]#setSilent","$kind":"method","id":1885,"neoClassName":"Neo.data.RecordFactory"},{"comment":"/**\n                     * When using JSON.stringify(this), we want to get the raw data\n                     * @returns {Object}\n                     */","meta":{"range":[5181,5261],"filename":"RecordFactory.mjs","lineno":160,"columnno":20,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/data","code":{"id":"astnode100059533","name":"ns[undefined]#toJSON","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>When using JSON.stringify(this), we want to get the raw data</p>\n","returns":[{"type":{"names":["Object"]}}],"name":"undefined]#toJSON","longname":"<anonymous>~ns.undefined]#toJSON","kind":"function","memberof":"<anonymous>~ns","scope":"static","params":[],"$longname":"ns.undefined]#toJSON","$kind":"method","id":1886,"neoClassName":"Neo.data.RecordFactory"},{"comment":"/**\n     * @param {Object} record\n     * @param {Boolean} trackModifiedFields\n     * @returns {Boolean} true in case a change was found\n     */","meta":{"range":[5896,6404],"filename":"RecordFactory.mjs","lineno":186,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/data","code":{"id":"astnode100059602","name":"RecordFactory#isModified","type":"MethodDefinition","paramnames":["record","trackModifiedFields"]},"vars":{"":null}},"params":[{"type":{"names":["Object"]},"name":"record"},{"type":{"names":["Boolean"]},"name":"trackModifiedFields"}],"returns":[{"type":{"names":["Boolean"]},"description":"true in case a change was found"}],"name":"isModified","longname":"RecordFactory#isModified","kind":"function","memberof":"RecordFactory","scope":"instance","$longname":"RecordFactory#isModified","$kind":"method","id":1887,"neoClassName":"Neo.data.RecordFactory"},{"comment":"/**\n     * @param {Object} record\n     * @param {String} fieldName\n     * @returns {Boolean|null} null in case the model does not use trackModifiedFields, true in case a change was found\n     */","meta":{"range":[6609,7012],"filename":"RecordFactory.mjs","lineno":212,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/data","code":{"id":"astnode100059667","name":"RecordFactory#isModifiedField","type":"MethodDefinition","paramnames":["record","fieldName"]},"vars":{"":null}},"params":[{"type":{"names":["Object"]},"name":"record"},{"type":{"names":["String"]},"name":"fieldName"}],"returns":[{"type":{"names":["Boolean","null"]},"description":"null in case the model does not use trackModifiedFields, true in case a change was found"}],"name":"isModifiedField","longname":"RecordFactory#isModifiedField","kind":"function","memberof":"RecordFactory","scope":"instance","$longname":"RecordFactory#isModifiedField","$kind":"method","id":1888,"neoClassName":"Neo.data.RecordFactory"},{"comment":"/**\n     * Tests if a given object is an instance of a class created by this factory\n     * @param {Object} record\n     * @returns {Boolean}\n     */","meta":{"range":[7171,7227],"filename":"RecordFactory.mjs","lineno":231,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/data","code":{"id":"astnode100059718","name":"RecordFactory#isRecord","type":"MethodDefinition","paramnames":["record"]},"vars":{"":null}},"description":"<p>Tests if a given object is an instance of a class created by this factory</p>\n","params":[{"type":{"names":["Object"]},"name":"record"}],"returns":[{"type":{"names":["Boolean"]}}],"name":"isRecord","longname":"RecordFactory#isRecord","kind":"function","memberof":"RecordFactory","scope":"instance","$longname":"RecordFactory#isRecord","$kind":"method","id":1889,"neoClassName":"Neo.data.RecordFactory"},{"comment":"/**\n     * Gets triggered after changing the value of a record field.\n     * E.g. myRecord.foo = 'bar';\n     * @param {Object} opts\n     * @param {Object[]} opts.fields Each field object contains the keys: name, oldValue, value\n     * @param {Neo.data.Model} opts.model The model instance of the changed record\n     * @param {Object} opts.record\n     */","meta":{"range":[7591,7677],"filename":"RecordFactory.mjs","lineno":243,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/data","code":{"id":"astnode100059725","name":"RecordFactory#onRecordChange","type":"MethodDefinition","paramnames":["opts"]},"vars":{"":null}},"description":"<p>Gets triggered after changing the value of a record field.\nE.g. myRecord.foo = &#39;bar&#39;;</p>\n","params":[{"type":{"names":["Object"]},"name":"opts"},{"type":{"names":["Array.<Object>"]},"description":"<p>Each field object contains the keys: name, oldValue, value</p>\n","name":"opts.fields"},{"type":{"names":["Neo.data.Model"]},"description":"<p>The model instance of the changed record</p>\n","name":"opts.model"},{"type":{"names":["Object"]},"name":"opts.record"}],"name":"onRecordChange","longname":"RecordFactory#onRecordChange","kind":"function","memberof":"RecordFactory","scope":"instance","$longname":"RecordFactory#onRecordChange","$kind":"method","id":1890,"neoClassName":"Neo.data.RecordFactory"},{"comment":"/**\n     * todo: parse value for more field types\n     * @param {Object} record\n     * @param {Object} field\n     * @param {*} value\n     * @param {Object} recordConfig=null\n     * @returns {*}\n     */","meta":{"range":[7889,10152],"filename":"RecordFactory.mjs","lineno":255,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/data","code":{"id":"astnode100059732","name":"RecordFactory#parseRecordValue","type":"MethodDefinition","paramnames":["record","field","value","recordConfig"]},"vars":{"":null}},"description":"<p>todo: parse value for more field types</p>\n","params":[{"type":{"names":["Object"]},"name":"record"},{"type":{"names":["Object"]},"name":"field"},{"type":{"names":["*"]},"name":"value"},{"type":{"names":["Object"]},"defaultvalue":null,"name":"recordConfig"}],"returns":[{"type":{"names":["*"]}}],"name":"parseRecordValue","longname":"RecordFactory#parseRecordValue","kind":"function","memberof":"RecordFactory","scope":"instance","$longname":"RecordFactory#parseRecordValue","$kind":"method","id":1891,"neoClassName":"Neo.data.RecordFactory"},{"comment":"/**\n     * @param {String} fieldName\n     * @param {Neo.data.Model} model\n     * @param {Record} record\n     * @param {*} value\n     * @protected\n     */","meta":{"range":[10316,10728],"filename":"RecordFactory.mjs","lineno":331,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/data","code":{"id":"astnode100060012","name":"RecordFactory#setRecordData","type":"MethodDefinition","paramnames":["fieldName","model","record","value"]},"vars":{"":null}},"params":[{"type":{"names":["String"]},"name":"fieldName"},{"type":{"names":["Neo.data.Model"]},"name":"model"},{"type":{"names":["Record"]},"name":"record"},{"type":{"names":["*"]},"name":"value"}],"access":"protected","name":"setRecordData","longname":"RecordFactory#setRecordData","kind":"function","memberof":"RecordFactory","scope":"instance","$longname":"RecordFactory#setRecordData","$kind":"method","id":1892,"neoClassName":"Neo.data.RecordFactory"},{"comment":"/**\n     * @param {Neo.data.Model} model\n     * @param {Object} record\n     * @param {Object} fields\n     * @param {Boolean} silent=false\n     * @param {Object[]} changedFields=[] Internal flag\n     */","meta":{"range":[10940,12078],"filename":"RecordFactory.mjs","lineno":352,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/data","code":{"id":"astnode100060078","name":"RecordFactory#setRecordFields","type":"MethodDefinition","paramnames":["model","record","fields","silent","changedFields"]},"vars":{"":null}},"params":[{"type":{"names":["Neo.data.Model"]},"name":"model"},{"type":{"names":["Object"]},"name":"record"},{"type":{"names":["Object"]},"name":"fields"},{"type":{"names":["Boolean"]},"defaultvalue":false,"name":"silent"},{"type":{"names":["Array.<Object>"]},"defaultvalue":"[","description":"<p>Internal flag</p>\n","name":"changedFields"}],"name":"setRecordFields","longname":"RecordFactory#setRecordFields","kind":"function","memberof":"RecordFactory","scope":"instance","$longname":"RecordFactory#setRecordFields","$kind":"method","id":1893,"neoClassName":"Neo.data.RecordFactory"}]}