{"classData":[{"comment":"/**\n * A unique, non-enumerable key for the internal event map.\n * Using a Symbol prevents property name collisions on the consuming class instance,\n * providing a robust way to manage private state within a mixin.\n * @type {Symbol}\n */","meta":{"range":[452,487],"filename":"Observable.mjs","lineno":12,"columnno":6,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100058977","name":"eventMapSymbol","type":"CallExpression","value":""}},"description":"<p>A unique, non-enumerable key for the internal event map.\nUsing a Symbol prevents property name collisions on the consuming class instance,\nproviding a robust way to manage private state within a mixin.</p>\n","type":{"names":["Symbol"]},"name":"eventMapSymbol","longname":"eventMapSymbol","kind":"constant","scope":"global","params":[],"$longname":"eventMapSymbol","$kind":"constant","id":1920,"neoClassName":"Neo.core.Observable"},{"comment":"/**\n * @class Neo.core.Observable\n * @extends Neo.core.Base\n */","meta":{"filename":"Observable.mjs","lineno":14,"columnno":0,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{}},"kind":"class","name":"Observable","augments":["Neo.core.Base"],"memberof":"Neo.core","longname":"Neo.core.Observable","scope":"static","$longname":"Neo.core.Observable","$kind":"class","id":1921,"neoClassName":"Neo.core.Observable"},{"comment":"/**\n         * @member {String} className='Neo.core.Observable'\n         * @protected\n         */","meta":{"filename":"Observable.mjs","lineno":24,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{}},"kind":"member","name":"className","type":{"names":["String"]},"defaultvalue":"'Neo.core.Observable'","access":"protected","longname":"className","scope":"global","$longname":"className","$kind":"property","id":1922,"neoClassName":"Neo.core.Observable"},{"comment":"/**\n         * @member {String} ntype='mixin-observable'\n         * @protected\n         */","meta":{"filename":"Observable.mjs","lineno":29,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{}},"kind":"member","name":"ntype","type":{"names":["String"]},"defaultvalue":"'mixin-observable'","access":"protected","longname":"ntype","scope":"global","$longname":"ntype","$kind":"property","id":1923,"neoClassName":"Neo.core.Observable"},{"comment":"/**\n         * A declarative way to assign event listeners to an instance upon creation.\n         * The framework processes this config and calls `on()` to populate the\n         * internal event registry. This config should not be manipulated directly after\n         * instantiation; use `on()` and `un()` instead.\n         * @member {Object|null} listeners_\n         * @example\n         * listeners: {\n         *     myEvent: 'onMyEvent',\n         *     otherEvent: {\n         *         fn: 'onOtherEvent',\n         *         delay: 100,\n         *         once: true\n         *     },\n         *     scope: this\n         * }\n         * @reactive\n         */","meta":{"filename":"Observable.mjs","lineno":48,"columnno":8,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{}},"description":"<p>A declarative way to assign event listeners to an instance upon creation.\nThe framework processes this config and calls <code>on()</code> to populate the\ninternal event registry. This config should not be manipulated directly after\ninstantiation; use <code>on()</code> and <code>un()</code> instead.</p>\n","kind":"member","name":"listeners_","type":{"names":["Object","null"]},"examples":["listeners: {\n    myEvent: 'onMyEvent',\n    otherEvent: {\n        fn: 'onOtherEvent',\n        delay: 100,\n        once: true\n    },\n    scope: this\n}"],"tags":[{"originalTitle":"reactive","title":"reactive","text":""}],"longname":"listeners_","scope":"global","$longname":"listeners_","$kind":"property","id":1924,"neoClassName":"Neo.core.Observable"},{"comment":"/**\n     * @member {Object} [eventMapSymbol]\n     * @private\n     */","meta":{"filename":"Observable.mjs","lineno":59,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{}},"kind":"member","name":"eventMapSymbol","type":{"names":["Object"]},"optional":true,"access":"private","longname":"eventMapSymbol","scope":"global","$longname":"eventMapSymbol","$kind":"property","id":1925,"neoClassName":"Neo.core.Observable"},{"comment":"/**\n     * @param {Object|String} name\n     * @param {Object} [opts]\n     * @param {Object} [scope]\n     * @param {String} [eventId]\n     * @param {Object} [data]\n     * @param {Number|String} [order]\n     * @returns {String|null} eventId null in case an object gets passed as the name (multiple ids)\n     */","meta":{"range":[2089,5859],"filename":"Observable.mjs","lineno":69,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100059000","name":"Observable#addListener","type":"MethodDefinition","paramnames":["name","opts","scope","eventId","data","order"]},"vars":{"":null}},"params":[{"type":{"names":["Object","String"]},"name":"name"},{"type":{"names":["Object"]},"optional":true,"name":"opts"},{"type":{"names":["Object"]},"optional":true,"name":"scope"},{"type":{"names":["String"]},"optional":true,"name":"eventId"},{"type":{"names":["Object"]},"optional":true,"name":"data"},{"type":{"names":["Number","String"]},"optional":true,"name":"order"}],"returns":[{"type":{"names":["String","null"]},"description":"eventId null in case an object gets passed as the name (multiple ids)"}],"name":"addListener","longname":"Observable#addListener","kind":"function","memberof":"Observable","scope":"instance","$longname":"Observable#addListener","$kind":"method","id":1926,"neoClassName":"Neo.core.Observable"},{"comment":"/**\n     * This hook is the bridge between the declarative `listeners_` config and the\n     * imperative `on()`/`un()` methods. It's called automatically by the framework\n     * whenever the `listeners` config property is changed.\n     * @param {Object} value The new listeners object\n     * @param {Object} oldValue The old listeners object\n     * @protected\n     */","meta":{"range":[6237,6594],"filename":"Observable.mjs","lineno":181,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100059426","name":"Observable#afterSetListeners","type":"MethodDefinition","paramnames":["value","oldValue"]},"vars":{"":null}},"description":"<p>This hook is the bridge between the declarative <code>listeners_</code> config and the\nimperative <code>on()</code>/<code>un()</code> methods. It&#39;s called automatically by the framework\nwhenever the <code>listeners</code> config property is changed.</p>\n","params":[{"type":{"names":["Object"]},"description":"<p>The new listeners object</p>\n","name":"value"},{"type":{"names":["Object"]},"description":"<p>The old listeners object</p>\n","name":"oldValue"}],"access":"protected","name":"afterSetListeners","longname":"Observable#afterSetListeners","kind":"function","memberof":"Observable","scope":"instance","$longname":"Observable#afterSetListeners","$kind":"method","id":1927,"neoClassName":"Neo.core.Observable"},{"comment":"/**\n     * Call the passed function, or a function by *name* which exists in the passed scope's\n     * or this component's ownership chain.\n     * @param {Function|String} fn A function, or the name of a function to find in the passed scope object.\n     * @param {Object} scope       The scope to find the function in if it is specified as a string.\n     * @param {Array} args         Arguments to pass to the callback.\n     */","meta":{"range":[7032,7204],"filename":"Observable.mjs","lineno":199,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100059470","name":"Observable#callback","type":"MethodDefinition","paramnames":["fn","scope","args"]},"vars":{"":null}},"description":"<p>Call the passed function, or a function by <em>name</em> which exists in the passed scope&#39;s\nor this component&#39;s ownership chain.</p>\n","params":[{"type":{"names":["function","String"]},"description":"<p>A function, or the name of a function to find in the passed scope object.</p>\n","name":"fn"},{"type":{"names":["Object"]},"description":"<p>The scope to find the function in if it is specified as a string.</p>\n","name":"scope"},{"type":{"names":["Array"]},"description":"<p>Arguments to pass to the callback.</p>\n","name":"args"}],"name":"callback","longname":"Observable#callback","kind":"function","memberof":"Observable","scope":"instance","$longname":"Observable#callback","$kind":"method","id":1928,"neoClassName":"Neo.core.Observable"},{"comment":"/**\n     * Internal helper method for events which use the delay option\n     * @param {Object} cb\n     * @param {Array} args\n     * @param {Number} delay\n     */","meta":{"range":[7376,7508],"filename":"Observable.mjs","lineno":212,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100059500","name":"Observable#delayedCallback","type":"MethodDefinition","paramnames":["cb","args","delay"]},"vars":{"":null}},"description":"<p>Internal helper method for events which use the delay option</p>\n","params":[{"type":{"names":["Object"]},"name":"cb"},{"type":{"names":["Array"]},"name":"args"},{"type":{"names":["Number"]},"name":"delay"}],"name":"delayedCallback","longname":"Observable#delayedCallback","kind":"function","memberof":"Observable","scope":"instance","$longname":"Observable#delayedCallback","$kind":"method","id":1929,"neoClassName":"Neo.core.Observable"},{"comment":"/**\n     * @param name\n     */","meta":{"range":[7549,9322],"filename":"Observable.mjs","lineno":221,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100059529","name":"Observable#fire","type":"MethodDefinition","paramnames":["name"]},"vars":{"":null}},"params":[{"name":"name"}],"name":"fire","longname":"Observable#fire","kind":"function","memberof":"Observable","scope":"instance","$longname":"Observable#fire","$kind":"method","id":1930,"neoClassName":"Neo.core.Observable"},{"comment":"/**\n     * Alias for addListener\n     * @param {Object|String} name\n     * @param {Object} [opts]\n     * @param {Object} [scope]\n     * @param {String} [eventId]\n     * @param {Object} [data]\n     * @param {Number} [order]\n     * @returns {String} eventId\n     */","meta":{"range":[9596,9656],"filename":"Observable.mjs","lineno":273,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100059738","name":"Observable#on","type":"MethodDefinition","paramnames":["args"]},"vars":{"":null}},"description":"<p>Alias for addListener</p>\n","params":[{"type":{"names":["Object","String"]},"name":"name"},{"type":{"names":["Object"]},"optional":true,"name":"opts"},{"type":{"names":["Object"]},"optional":true,"name":"scope"},{"type":{"names":["String"]},"optional":true,"name":"eventId"},{"type":{"names":["Object"]},"optional":true,"name":"data"},{"type":{"names":["Number"]},"optional":true,"name":"order"}],"returns":[{"type":{"names":["String"]},"description":"eventId"}],"name":"on","longname":"Observable#on","kind":"function","memberof":"Observable","scope":"instance","$longname":"Observable#on","$kind":"method","id":1931,"neoClassName":"Neo.core.Observable"},{"comment":"/**\n     * There are different syntax's how you can use this method.\n     * Using the eventId:\n     * ```\n     * this.removeListener('change', 'neo-event-7');\n     * ```\n     * Passing the handler method:\n     * ```\n     * this.removeListener('change', this.onChange, this);\n     * ```\n     * Passing an object:\n     * ```\n     * me.field.un({\n     *     change                    : me.onFieldChange,\n     *     changeClearToOriginalValue: me.onFieldChange,\n     *     scope                     : me\n     * });\n     * ```\n     * @param {Object|String} name\n     * @param {Function|String} [eventId]\n     * @param {Neo.core.Base} [scope]\n     */","meta":{"range":[10311,11827],"filename":"Observable.mjs","lineno":299,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100059751","name":"Observable#removeListener","type":"MethodDefinition","paramnames":["name","eventId","scope"]},"vars":{"":null}},"description":"<p>There are different syntax&#39;s how you can use this method.\nUsing the eventId:</p>\n<pre><code>this.removeListener(&#39;change&#39;, &#39;neo-event-7&#39;);\n</code></pre>\n<p>Passing the handler method:</p>\n<pre><code>this.removeListener(&#39;change&#39;, this.onChange, this);\n</code></pre>\n<p>Passing an object:</p>\n<pre><code>me.field.un({\n    change                    : me.onFieldChange,\n    changeClearToOriginalValue: me.onFieldChange,\n    scope                     : me\n});\n</code></pre>\n","params":[{"type":{"names":["Object","String"]},"name":"name"},{"type":{"names":["function","String"]},"optional":true,"name":"eventId"},{"type":{"names":["Neo.core.Base"]},"optional":true,"name":"scope"}],"name":"removeListener","longname":"Observable#removeListener","kind":"function","memberof":"Observable","scope":"instance","$longname":"Observable#removeListener","$kind":"method","id":1932,"neoClassName":"Neo.core.Observable"},{"comment":"/**\n     * Alias for removeListener\n     * @param {Object|String} name\n     * @param {String} [eventId]\n     */","meta":{"range":[11949,12006],"filename":"Observable.mjs","lineno":355,"columnno":4,"path":"/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core","code":{"id":"astnode100059947","name":"Observable#un","type":"MethodDefinition","paramnames":["args"]},"vars":{"":null}},"description":"<p>Alias for removeListener</p>\n","params":[{"type":{"names":["Object","String"]},"name":"name"},{"type":{"names":["String"]},"optional":true,"name":"eventId"}],"name":"un","longname":"Observable#un","kind":"function","memberof":"Observable","scope":"instance","$longname":"Observable#un","$kind":"method","id":1933,"neoClassName":"Neo.core.Observable"}]}